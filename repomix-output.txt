This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
after/
  queries/
    javascript/
      injections.scm
    typescriptreact/
      textobjects.scm
lua/
  config/
    lsp/
      servers/
        bashls.lua
        cssls.lua
        eslint.lua
        graphql.lua
        html.lua
        jsonls.lua
        lua_ls.lua
        tailwindcss.lua
        tsserver.lua
        vuels.lua
      utils/
        filter.lua
        filterReactDTS.lua
      config.lua
      functions.lua
      setup.lua
    autocmds.lua
    colorscheme.lua
    EcoVim.lua
    keymappings.lua
    lazy.lua
    options.lua
  internal/
    cursorword.lua
    winbar.lua
  plugins/
    ai/
      codecompanion.lua
      codeium.lua
      copilot-chat.lua
      copilot.lua
    code/
      comment.lua
      emmet-vim.lua
      package-info.lua
      printer.lua
    editor/
      flash.lua
      multicursors.lua
    git/
      diffview.lua
      lazygit.yml
      worktree.lua
    languages/
      markdown.lua
      typescript.lua
    telescope/
      multi-rg.lua
      pickers.lua
    ui/
      alpha.lua
      colorizer.lua
      colorscheme.lua
      fidget.lua
      image.lua
      indent.lua
      marks.lua
      noice.lua
      scratch.lua
    util/
      auto-session.lua
      faster.lua
    which-key/
      setup.lua
    autopairs.lua
    blame.lua
    blink.lua
    bqf-init.lua
    bufferline.lua
    cmp.lua
    codesnap.lua
    dap.lua
    dressing.lua
    formatting.lua
    git.lua
    init.lua
    linting.lua
    lsp.lua
    lualine.lua
    markdown-preview.lua
    mini.lua
    navic.lua
    neogit.lua
    notify.lua
    numb.lua
    nvim-ufo.lua
    nvim-web-devicons.lua
    oil.lua
    qmk.lua
    refactoring.lua
    scissors.lua
    session-manager.lua
    smart-splits.lua
    snacks.lua
    spectre.lua
    spider.lua
    stay-in-place.lua
    tabout.lua
    telescope.lua
    testing.lua
    text-case.lua
    todo-comments.lua
    toggleterm.lua
    treesitter.lua
    treesj.lua
    trouble.lua
    which-key.lua
    yanky.lua
  user/
    create-page.lua
  utils/
    _ufo.lua
    functions.lua
    git.lua
    globals.lua
    icons.lua
    init.lua
  .luarc.json
snippets/
  lua.json
  package.json
syntax/
  qf.vim
CHANGELOG.md
init.lua
lazy-lock.json
LICENSE
README.md

================================================================
Files
================================================================

================
File: after/queries/javascript/injections.scm
================
; Use HTML syntax highlighting in template for vue.js
; template: `<html>`
(pair
  key: (property_identifier) @_name
    (#eq? @_name "template")
  value: (template_string) @html
)

================
File: after/queries/typescriptreact/textobjects.scm
================
; extends
(jsx_element) @jsx.element

================
File: lua/config/lsp/servers/bashls.lua
================
local M = {}

M.settings = {}

return M

================
File: lua/config/lsp/servers/cssls.lua
================
local M = {}

M.settings = {
  css = {
    lint = {
      unknownAtRules = 'ignore',
    },
  },
  scss = {
    lint = {
      unknownAtRules = 'ignore',
    },
  },
}

M.on_attach = function(client, bufnr)
  client.server_capabilities.documentFormattingProvider = true
  client.server_capabilities.documentRangeFormattingProvider = true
end

return M

================
File: lua/config/lsp/servers/eslint.lua
================
local M = {}

local on_attach = function(client, bufnr)
  client.server_capabilities.documentFormattingProvider = true
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  buf_set_option("omnifunc", "v:lua.vim.lsp.omnifunc")
end

M.on_attach = on_attach;

M.settings = {
  codeAction = {
    disableRuleComment = {
      enable = true,
      location = "separateLine"
    },
    showDocumentation = {
      enable = true
    }
  },
  codeActionOnSave = {
    enable = false,
    mode = "all"
  },
  format = true,
  nodePath = "",
  onIgnoredFiles = "off",
  packageManager = "npm",
  quiet = false,
  rulesCustomizations = {},
  run = "onType",
  useESLintClass = false,
  validate = "on",
  workingDirectory = {
    mode = "location"
  }
}

return M

================
File: lua/config/lsp/servers/graphql.lua
================
local M = {}

M.settings = {}

return M

================
File: lua/config/lsp/servers/html.lua
================
local M = {}

M.settings = {}

M.filetypes = {
  "webc",
}
return M

================
File: lua/config/lsp/servers/jsonls.lua
================
local M = {}

M.settings = {
  json = {
    schemas = {
      {
        fileMatch = { "package.json" },
        url = "https://json.schemastore.org/package.json"
      },
      {
        fileMatch = { "tsconfig*.json" },
        url = "https://json.schemastore.org/tsconfig.json"
      },
      {
        fileMatch = { ".prettierrc", ".prettierrc.json", "prettier.config.json" },
        url = "https://json.schemastore.org/prettierrc.json"
      },
      {
        fileMatch = { ".eslintrc", ".eslintrc.json" },
        url = "https://json.schemastore.org/eslintrc.json"
      },
      {
        fileMatch = { ".babelrc", ".babelrc.json", "babel.config.json" },
        url = "https://json.schemastore.org/babelrc.json"
      },
      {
        fileMatch = { "lerna.json" },
        url = "https://json.schemastore.org/lerna.json"
      },
      {
        fileMatch = { "now.json", "vercel.json" },
        url = "https://json.schemastore.org/now.json"
      },
      {
        fileMatch = { "ecosystem.json" },
        url = "https://json.schemastore.org/pm2-ecosystem.json"
      },
    }
  }
}

return M

================
File: lua/config/lsp/servers/lua_ls.lua
================
local M = {}

M.settings = {
  Lua = {
    diagnostics = {
      globals = { 'vim', 'bit', 'packer_plugins' }
    }
  }
}

return M

================
File: lua/config/lsp/servers/tailwindcss.lua
================
local M = {}

local capabilities = require("cmp_nvim_lsp").default_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true
capabilities.textDocument.colorProvider = { dynamicRegistration = false }
capabilities.textDocument.foldingRange = {
  dynamicRegistration = false,
  lineFoldingOnly = true,
}

-- Settings

local on_attach = function(client, bufnr)
end

local filetypes = { "astro", "html", "mdx", "javascript", "typescript", "javascriptreact", "typescriptreact", "vue", "svelte" }

local init_options = {
  userLanguages = {
    eelixir = "html-eex",
    eruby = "erb",
  },
}

local settings = {
  tailwindCSS = {
    lint = {
      cssConflict = "warning",
      invalidApply = "error",
      invalidConfigPath = "error",
      invalidScreen = "error",
      invalidTailwindDirective = "error",
      invalidVariant = "error",
      recommendedVariantOrder = "warning",
    },
    experimental = {
      classRegex = {
        "tw`([^`]*)",
        'tw="([^"]*)',
        'tw={"([^"}]*)',
        "tw\\.\\w+`([^`]*)",
        "tw\\(.*?\\)`([^`]*)",
        { "clsx\\(([^)]*)\\)",       "(?:'|\"|`)([^']*)(?:'|\"|`)" },
        { "classnames\\(([^)]*)\\)", "'([^']*)'" },
        { "cva\\(([^)]*)\\)",        "[\"'`]([^\"'`]*).*?[\"'`]" },
        { "cn\\(([^)]*)\\)",         "(?:'|\"|`)([^']*)(?:'|\"|`)" },
      },
    },
    validate = true,
  },
}

M.on_attach = on_attach
M.filetypes = filetypes
M.capabilities = capabilities
M.settings = settings
M.init_options = init_options

return M

================
File: lua/config/lsp/servers/tsserver.lua
================
local M = {}

local filter = require("config.lsp.utils.filter").filter
local filterReactDTS = require("config.lsp.utils.filterReactDTS").filterReactDTS

local handlers = {
  ["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover, {
    silent = true,
    border = EcoVim.ui.float.border or "rounded",
  }),
  ["textDocument/signatureHelp"] = vim.lsp.with(
    vim.lsp.handlers.signature_help, {
      border = EcoVim.ui.float.border or "rounded",
    }
  ),
  ["textDocument/publishDiagnostics"] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics,
    { virtual_text = true }
  ),
  ["textDocument/definition"] = function(err, result, method, ...)
    if vim.tbl_islist(result) and #result > 1 then
      local filtered_result = filter(result, filterReactDTS)
      return vim.lsp.handlers["textDocument/definition"](err, filtered_result, method, ...)
    end

    vim.lsp.handlers["textDocument/definition"](err, result, method, ...)
  end,
}

local settings = {
  typescript = {
    inlayHints = {
      includeInlayParameterNameHints = 'all',
      includeInlayParameterNameHintsWhenArgumentMatchesName = true,
      includeInlayFunctionParameterTypeHints = true,
      includeInlayVariableTypeHints = false,
      includeInlayVariableTypeHintsWhenTypeMatchesName = false,
      includeInlayPropertyDeclarationTypeHints = false,
      includeInlayFunctionLikeReturnTypeHints = false,
      includeInlayEnumMemberValueHints = true,
    },
    suggest = {
      includeCompletionsForModuleExports = false,
    },
  },
  javascript = {
    inlayHints = {
      includeInlayParameterNameHints = 'all',
      includeInlayParameterNameHintsWhenArgumentMatchesName = true,
      includeInlayFunctionParameterTypeHints = true,
      includeInlayVariableTypeHints = false,
      includeInlayVariableTypeHintsWhenTypeMatchesName = false,
      includeInlayPropertyDeclarationTypeHints = false,
      includeInlayFunctionLikeReturnTypeHints = false,
      includeInlayEnumMemberValueHints = true,
    },
    suggest = {
      includeCompletionsForModuleExports = false,
    },
  },
}

local on_attach = function(client, bufnr)
  vim.lsp.inlay_hint.enable(true, { bufnr })
  require("plugins.which-key.setup").attach_typescript(bufnr)
end

M.handlers = handlers
M.settings = settings
M.on_attach = on_attach

return M

================
File: lua/config/lsp/servers/vuels.lua
================
local M = {}

local on_attach = function(client, bufnr)
  client.resolved_capabilities.document_formatting = false
end

M.filetypes = {
  "vue",
}

M.init_options = {
  config = {
    css = {},
    emmet = {},
    html = {
      suggest = {},
    },
    javascript = {
      format = {},
    },
    stylusSupremacy = {},
    typescript = {
      format = {},
    },
    vetur = {
      completion = {
        autoImport = true,
        tagCasing = "kebab",
        useScaffoldSnippets = false,
      },
      format = {
        defaultFormatter = {
          html = "none",
          js = "none",
          ts = "none",
        },
        defaultFormatterOptions = {},
        scriptInitialIndent = false,
        styleInitialIndent = false,
      },
      useWorkspaceDependencies = false,
      validation = {
        script = true,
        style = true,
        template = true,
        templateProps = true,
        interpolation = true,
      },
      experimental = {
        templateInterpolationService = true,
      },
    },
  },
}

M.on_attach = on_attach

return M

================
File: lua/config/lsp/utils/filter.lua
================
local M = {}

M.filter = function (arr, fn)
	if type(arr) ~= "table" then
		return arr
	end

	local filtered = {}
	for k, v in pairs(arr) do
		if fn(v, k, arr) then
			table.insert(filtered, v)
		end
	end

	return filtered
end

return M

================
File: lua/config/lsp/utils/filterReactDTS.lua
================
local M = {}

M.filterReactDTS = function (value)
	-- Depending on typescript version either uri or targetUri is returned
	if value.uri then
		return string.match(value.uri, "%.d.ts") == nil
	elseif value.targetUri then
		return string.match(value.targetUri, "%.d.ts") == nil
	end
end

return M

================
File: lua/config/lsp/config.lua
================
-- Diagnostic config

local codes = {
  -- Lua
  no_matching_function = {
    message = " Can't find a matching function",
    "redundant-parameter",
    "ovl_no_viable_function_in_call",
  },
  empty_block = {
    message = " That shouldn't be empty here",
    "empty-block",
  },
  missing_symbol = {
    message = " Here should be a symbol",
    "miss-symbol",
  },
  expected_semi_colon = {
    message = " Please put the `;` or `,`",
    "expected_semi_declaration",
    "miss-sep-in-table",
    "invalid_token_after_toplevel_declarator",
  },
  redefinition = {
    message = " That variable was defined before",
    icon = " ",
    "redefinition",
    "redefined-local",
    "no-duplicate-imports",
    "@typescript-eslint/no-redeclare",
    "import/no-duplicates"
  },
  no_matching_variable = {
    message = " Can't find that variable",
    "undefined-global",
    "reportUndefinedVariable",
  },
  trailing_whitespace = {
    message = "  Whitespaces are useless",
    "trailing-whitespace",
    "trailing-space",
  },
  unused_variable = {
    message = "󰂭  Don't define variables you don't use",
    icon = "󰂭  ",
    "unused-local",
    "@typescript-eslint/no-unused-vars",
    "no-unused-vars"
  },
  unused_function = {
    message = "  Don't define functions you don't use",
    "unused-function",
  },
  useless_symbols = {
    message = " Remove that useless symbols",
    "unknown-symbol",
  },
  wrong_type = {
    message = " Try to use the correct types",
    "init_conversion_failed",
  },
  undeclared_variable = {
    message = " Have you delcared that variable somewhere?",
    "undeclared_var_use",
  },
  lowercase_global = {
    message = " Should that be a global? (if so make it uppercase)",
    "lowercase-global",
  },
  -- Typescript
  no_console = {
    icon = "  ",
    "no-console",
  },
  -- Prettier
  prettier = {
    icon = "  ",
    "prettier/prettier"
  }
}

vim.diagnostic.config({
  float = {
    source = false,
    format = function(diagnostic)
      local code = diagnostic and diagnostic.user_data and diagnostic.user_data.lsp.code

      if not diagnostic.source or not code then
        return string.format('%s', diagnostic.message)
      end

      if diagnostic.source == 'eslint' then
        for _, table in pairs(codes) do
          if vim.tbl_contains(table, code) then
            return string.format('%s [%s]', table.icon .. diagnostic.message, code)
          end
        end

        return string.format('%s [%s]', diagnostic.message, code)
      end

      for _, table in pairs(codes) do
        if vim.tbl_contains(table, code) then
          return table.message
        end
      end

      return string.format('%s [%s]', diagnostic.message, diagnostic.source)
    end
  },
  severity_sort = true,
  signs = {
    text = {
      [vim.diagnostic.severity.ERROR] = '',
      [vim.diagnostic.severity.WARN] = '',
      [vim.diagnostic.severity.INFO] = '',
      [vim.diagnostic.severity.HINT] = '',
    }
  },
  underline = true,
  update_in_insert = false,
  virtual_text = {
    prefix = EcoVim.icons.circle,
  },
})

-- UI

local lspui_ok, lspui = pcall(require, 'lspconfig.ui.windows')
if not lspui_ok then
  return
end

lspui.default_options.border = EcoVim.ui.float.border or 'rounded'

================
File: lua/config/lsp/functions.lua
================
local M = {}

function M.format()
  local root_dir = vim.fn.getcwd() -- Adjust this if you have a more accurate way to find the project root
  local eslintrc_json = root_dir .. "/.eslintrc.json"
  local eslintrc_js = root_dir .. "/.eslintrc.js"

  -- Check if eslint LSP is active
  local active_clients = vim.lsp.buf_get_clients()
  local eslint_is_active = false

  for _, client in ipairs(active_clients) do
    if client.name == "eslint" then
      eslint_is_active = true
      break
    end
  end

  if eslint_is_active and (vim.fn.filereadable(eslintrc_json) == 1 or vim.fn.filereadable(eslintrc_js) == 1) then
    vim.cmd("EslintFixAll")
  else
    vim.lsp.buf.format({
      async = true,
      timeout_ms = 5000
    })
  end
end

function M.enable_format_on_save()
  local group = vim.api.nvim_create_augroup("format_on_save", { clear = false })
  vim.api.nvim_create_autocmd("BufWritePre", {
    callback = M.format,
    group = group,
  })
  require("notify")("Enabled format on save", "info", { title = "LSP", timeout = 2000 })
end

function M.disable_format_on_save()
  vim.api.nvim_del_augroup_by_name("format_on_save")
  require("notify")("Disabled format on save", "info", { title = "LSP", timeout = 2000 })
end

function M.toggle_format_on_save()
  if vim.fn.exists("#format_on_save#BufWritePre") == 0 then
    M.enable_format_on_save()
  else
    M.disable_format_on_save()
  end
end

vim.api.nvim_create_user_command("LspToggleAutoFormat", 'lua require("config.lsp.functions").toggle_format_on_save()', {})

-- Custom textDocument/hover LSP handler to colorize colors inside hover results - WIP
function M.custom_hover_handler(_, result)
  local handler = function(_, result)
    if result then
      local colorizer = require("colorizer")

      local lines = vim.split(result.contents.value, "\n")
      local bufnr =
          vim.lsp.util.open_floating_preview(lines, "markdown", { border = EcoVim.ui.float.border or "rounded" })
      colorizer.highlight_buffer(bufnr, nil, vim.list_slice(lines, 2, #lines), 0, colorizer.get_buffer_options(0))
    end
  end

  return handler
end

return M

================
File: lua/config/lsp/setup.lua
================
-- Setup installer & lsp configs
local mason = require("mason")
local mason_lsp = require("mason-lspconfig")
local ufo_utils = require("utils._ufo")
local ufo_config_handler = ufo_utils.handler
local lspconfig = require("lspconfig")

mason.setup({
  ui = {
    -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.
    border = EcoVim.ui.float.border or "rounded",
  },
})

mason_lsp.setup({
  -- A list of servers to automatically install if they're not already installed
  ensure_installed = {
    "bashls",
    "cssls",
    "eslint",
    "graphql",
    "html",
     
    "emmet_ls", -- HTML/CSS snippets
    "cssls",    -- css
    "jsonls",
    "lua_ls",
    "prismals",
    "tailwindcss",

    "powershell_es",
  },
  -- Whether servers that are set up (via lspconfig) should be automatically installed if they're not already installed.
  -- This setting has no relation with the `ensure_installed` setting.
  -- Can either be:
  --   - false: Servers are not automatically installed.
  --   - true: All servers set up via lspconfig are automatically installed.
  --   - { exclude: string[] }: All servers set up via lspconfig, except the ones provided in the list, are automatically installed.
  --       Example: automatic_installation = { exclude = { "rust_analyzer", "solargraph" } }
  automatic_installation = true,
})


local handlers = {
  ["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover, {
    silent = true,
    border = EcoVim.ui.float.border,
  }),
  ["textDocument/signatureHelp"] = vim.lsp.with(vim.lsp.handlers.signature_help, { border = EcoVim.ui.float.border }),
}

local capabilities = require('blink.cmp').get_lsp_capabilities()

local function on_attach(client, bufnr)
  vim.lsp.inlay_hint.enable(true, { bufnr })
end

-- Global override for floating preview border
local orig_util_open_floating_preview = vim.lsp.util.open_floating_preview
function vim.lsp.util.open_floating_preview(contents, syntax, opts, ...)
  opts = opts or {}
  opts.border = opts.border or EcoVim.ui.float.border or "rounded" -- default to EcoVim border
  return orig_util_open_floating_preview(contents, syntax, opts, ...)
end

require("mason-lspconfig").setup_handlers {
  -- The first entry (without a key) will be the default handler
  -- and will be called for each installed server that doesn't have
  -- a dedicated handler.
  function(server_name)
    require("lspconfig")[server_name].setup {
      on_attach = on_attach,
      capabilities = capabilities,
      handlers = handlers,
    }
  end,

  ["tailwindcss"] = function()
    capabilities.textDocument.completion.completionItem.snippetSupport = true
    capabilities.textDocument.colorProvider = { dynamicRegistration = false }
    capabilities.textDocument.foldingRange = {
      dynamicRegistration = false,
      lineFoldingOnly = true,
    }

    lspconfig.tailwindcss.setup({
      capabilities = capabilities,
      filetypes = require("config.lsp.servers.tailwindcss").filetypes,
      handlers = handlers,
      init_options = require("config.lsp.servers.tailwindcss").init_options,
      on_attach = require("config.lsp.servers.tailwindcss").on_attach,
      settings = require("config.lsp.servers.tailwindcss").settings,
      flags = {
        debounce_text_changes = 1000,
      },
    })
  end,

  ["cssls"] = function()
    lspconfig.cssls.setup({
      capabilities = capabilities,
      handlers = handlers,
      on_attach = require("config.lsp.servers.cssls").on_attach,
      settings = require("config.lsp.servers.cssls").settings,
    })
  end,

  ["eslint"] = function()
    lspconfig.eslint.setup({
      capabilities = capabilities,
      handlers = handlers,
      on_attach = require("config.lsp.servers.eslint").on_attach,
      settings = require("config.lsp.servers.eslint").settings,
      flags = {
        allow_incremental_sync = false,
        debounce_text_changes = 1000,
        exit_timeout = 1500,
      },
    })
  end,

  ["jsonls"] = function()
    lspconfig.jsonls.setup({
      capabilities = capabilities,
      handlers = handlers,
      on_attach = on_attach,
      settings = require("config.lsp.servers.jsonls").settings,
    })
  end,

  ["lua_ls"] = function()
    lspconfig.lua_ls.setup({
      capabilities = capabilities,
      handlers = handlers,
      on_attach = on_attach,
      settings = require("config.lsp.servers.lua_ls").settings,
    })
  end,

  ["vuels"] = function()
    lspconfig.vuels.setup({
      filetypes = require("config.lsp.servers.vuels").filetypes,
      handlers = handlers,
      init_options = require("config.lsp.servers.vuels").init_options,
      on_attach = require("config.lsp.servers.vuels").on_attach,
      settings = require("config.lsp.servers.vuels").settings,
    })
  end
}

require("ufo").setup({
  fold_virt_text_handler = ufo_config_handler,
  close_fold_kinds_for_ft = { default = { "imports" } },
})



vim.filetype.add({
    extension = {
        mdx = "markdown"
    }
})

================
File: lua/config/autocmds.lua
================
-- [[ Basic Autocommands ]]
--  See `:help lua-guide-autocommands`

-- Highlight when yanking (copying) text
--  Try it with `yap` in normal mode
--  See `:help vim.highlight.on_yank()`
-- vim.api.nvim_create_autocmd('TextYankPost', {
--   desc = 'Highlight when yanking (copying) text',
--   group = vim.api.nvim_create_augroup('kickstart-highlight-yank', { clear = true }),
--   callback = function()
--     vim.highlight.on_yank()
--   end,
-- })

-- Highlight on yank
vim.api.nvim_create_autocmd("TextYankPost",
  { callback = function() vim.highlight.on_yank({ higroup = 'IncSearch', timeout = 1000 }) end })
-- Disable diagnostics in node_modules (0 is current buffer only)
vim.api.nvim_create_autocmd({ "BufRead", "BufNewFile" }, { pattern = "*/node_modules/*", command = "lua vim.diagnostic.disable(0)" })
-- Enable spell checking for certain file types
vim.api.nvim_create_autocmd({ "BufRead", "BufNewFile" }, { pattern = { "*.txt", "*.md", "*.tex" },
  command = "setlocal spell" })
-- Show `` in specific files
vim.api.nvim_create_autocmd({ "BufRead", "BufNewFile" }, { pattern = { "*.txt", "*.md", "*.json" },
  command = "setlocal conceallevel=0" })

-- Attach specific keybindings in which-key for specific filetypes
local present, _ = pcall(require, "which-key")
if not present then return end
local _, pwk = pcall(require, "plugins.which-key.setup")

vim.api.nvim_create_autocmd("BufEnter", { pattern = "*.md",
  callback = function() pwk.attach_markdown(0) end })
vim.api.nvim_create_autocmd("BufEnter", { pattern = { "package.json" },
  callback = function() pwk.attach_npm(0) end })
-- vim.api.nvim_create_autocmd("FileType",
--   { pattern = "*",
--     callback = function()
--       if EcoVim.plugins.zen.enabled and vim.bo.filetype ~= "alpha" then
--         pwk.attach_zen(0)
--       end
--     end
--   })
vim.api.nvim_create_autocmd("BufEnter", { pattern = { "*test.js", "*test.ts", "*test.tsx", "*spec.ts", "*spec.tsx" },
  callback = function() pwk.attach_jest(0) end })
vim.api.nvim_create_autocmd("FileType", { pattern = "spectre_panel",
  callback = function() pwk.attach_spectre(0) end })
-- vim.api.nvim_create_autocmd("FileType", { pattern = "NvimTree",
--   callback = function() pwk.attach_nvim_tree(0) end })

vim.filetype.add({
    extension = {
        mdx = "markdown.mdx"  -- or just "markdown"
    }
})
vim.api.nvim_create_autocmd({"FileType"}, {
  pattern = {"markdown", "markdown.mdx"},
  callback = function()
    -- Enable line wrap
    vim.wo.wrap = true
    -- Soft wrap at words rather than characters
    vim.wo.linebreak = true
    -- Don't count wrapped lines when moving vertically
    vim.wo.breakindent = true
    -- Optional: Add some indentation to wrapped lines
    vim.wo.breakindentopt = "shift:2"
  end
})

================
File: lua/config/colorscheme.lua
================
-- local present, tokyonight = pcall(require, "tokyonight")
-- if not present then
--   return
-- end
--
-- local c = require("tokyonight.colors").setup()
--
-- -- ╭──────────────────────────────────────────────────────────╮
-- -- │ Setup Colorscheme                                        │
-- -- ╰──────────────────────────────────────────────────────────╯
-- tokyonight.setup({
--   style = "night",
--   transparent = vim.g.neovide and true or false, -- Enable this to disable setting the background color
--   terminal_colors = true,                        -- Configure the colors used when opening a `:terminal` in Neovim
--   styles = {
--     -- Style to be applied to different syntax groups
--     -- Value is any valid attr-list value `:help attr-list`
--     comments = "NONE",
--     keywords = "italic",
--     functions = "NONE",
--     variables = "NONE",
--     -- Background styles. Can be "dark", "transparent" or "normal"
--     sidebars = vim.g.neovide and "transparent" or "dark", -- style for sidebars, see below
--     floats = vim.g.neovide and "transparent" or "dark",   -- style for floating windows
--   },
--   sidebars = { "qf", "help" },                            -- Set a darker background on sidebar-like windows. For example: `["qf", "vista_kind", "terminal", "packer"]`
--   day_brightness = 0.3,                                   -- Adjusts the brightness of the colors of the **Day** style. Number between 0 and 1, from dull to vibrant colors
--   hide_inactive_statusline = false,                       -- Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard **StatusLine** and **LuaLine**.
--   dim_inactive = false,                                   -- dims inactive windows
--   lualine_bold = false,                                   -- When `true`, section headers in the lualine theme will be bold
--
--   cache = true,                                           -- When set to true, the theme will be cached for better performance
--   ---@type table<string, boolean|{enabled:boolean}>
--   plugins = {
--     -- enable all plugins when not using lazy.nvim
--     -- set to false to manually enable/disable plugins
--     all = package.loaded.lazy == nil,
--     -- uses your plugin manager to automatically enable needed plugins
--     -- currently only lazy.nvim is supported
--     auto = true,
--     -- add any plugins here that you want to enable
--     -- for all possible plugins, see:
--     --   * https://github.com/folke/tokyonight.nvim/tree/main/lua/tokyonight/groups
--     -- telescope = true,
--   },
--   --- You can override specific color groups to use other groups or a hex color
--   --- function will be called with a ColorScheme table
--   on_colors = function(colors)
--     colors.border = "#1A1B26"
--   end,
--   --- You can override specific highlights to use other groups or a hex color
--   --- function will be called with a Highlights and ColorScheme table
--   -- on_highlights = function(highlights, colors) end,
--   on_highlights = function(hl, _color)
--     local prompt = "#FFA630"
--     local text = "#488dff"
--     local none = "None"
--
--     hl.TelescopeTitle = {
--       fg = prompt,
--       bg = none,
--     }
--     hl.TelescopeNormal = {
--       bg = none,
--       fg = none,
--     }
--     hl.TelescopeBorder = {
--       bg = none,
--       fg = none,
--     }
--     hl.TelescopeMatching = {
--       fg = prompt,
--       bg = none,
--     }
--     hl.MsgArea = {
--       fg = c.fg_dark,
--     }
--   end,
-- })
--
-- local highlights = {
--   -- Ecovim Colors
--   EcovimPrimary                 = { fg = "#488dff" },
--   EcovimSecondary               = { fg = "#FFA630" },
--   EcovimPrimaryBold             = { bold = true, fg = "#488DFF" },
--   EcovimSecondaryBold           = { bold = true, fg = "#FFA630" },
--   EcovimHeader                  = { bold = true, fg = "#000000" },
--   EcovimHeaderInfo              = { bold = true, fg = "#FFA630" },
--   EcovimFooter                  = { bold = true, fg = "#FFA630" },
--   EcovimNvimTreeTitle           = { bold = true, fg = "#FFA630", bg = "#16161e" },
--   -- Lines
--   CursorLineNR                  = { link = "EcovimSecondary" },
--   LineNr                        = { link = "Comment" },
--   -- Floats/Windows
--   NormalFloat                   = { bg = "None", fg = "None" },
--   FloatBorder                   = { bg = "None", fg = "#488DFF" },
--   WhichKeyFloat                 = { bg = "None", fg = "#488DFF" },
--   BufferTabpageFill             = { fg = "None" },
--   BqfPreviewBorder              = { link = "FloatBorder" },
--   BufferInactiveIndex           = { link = "BufferInactive" },
--   LspInfoBorder                 = { link = "FloatBorder" },
--   VertSplit                     = { bg = "#16161e", fg = "#16161e" },
--   -- Tree
--   NvimTreeFolderIcon            = { bg = "None", fg = "None" },
--   -- Misc
--   GitSignsCurrentLineBlame      = { link = "Comment" },
--   StatusLine                    = { bg = "None" },
--   StatusLineNC                  = { bg = "None" },
--   rainbowcol1                   = { fg = c.blue, ctermfg = 9 },
--   TSRainbowRed                  = { fg = c.blue, ctermfg = 9 },
--   RainbowDelimiterRed           = { fg = c.blue, ctermfg = 9 },
--   Boolean                       = { fg = "#F7768E" },
--   BufferOffset                  = { link = "EcovimSecondary" },
--   LspInlayHint                  = { link = "LspCodeLens" },
--   -- Bufferline
--   BufferCurrentSign             = { fg = c.cyan0 },
--   BufferInactiveSign            = { bg = "#202331", fg = c.dark3 },
--   BufferInactiveMod             = { bg = "NONE", fg = c.yellow },
--   BufferLineOffsetSeparator     = { bg = "#13141c", fg = "#13141c" },
--   BufferLineSeparator           = { bg = "#13141c", fg = "#13141c" },
--   -- Completion Menu Colors
--   CmpItemAbbr                   = { fg = c.dark3, bg = "NONE" },
--   CmpItemKindClass              = { fg = c.orange },
--   CmpItemKindConstructor        = { fg = c.purple },
--   CmpItemKindFolder             = { fg = c.blue2 },
--   CmpItemKindFunction           = { fg = c.blue },
--   CmpItemKindInterface          = { fg = c.teal, bg = "NONE" },
--   CmpItemKindKeyword            = { fg = c.magneta2 },
--   CmpItemKindMethod             = { fg = c.red },
--   CmpItemKindReference          = { fg = c.red1 },
--   CmpItemKindSnippet            = { fg = c.dark3 },
--   CmpItemKindVariable           = { fg = c.cyan, bg = "NONE" },
--   CmpItemKindText               = { fg = "LightGrey" },
--   CmpItemMenu                   = { fg = "#C586C0", bg = "NONE" },
--   CmpItemAbbrMatch              = { fg = "#569CD6", bg = "NONE" },
--   CmpItemAbbrMatchFuzzy         = { fg = "#569CD6", bg = "NONE" },
--   CmpBorderedWindow_FloatBorder = { fg = c.blue0 },
-- }
--
--
-- for group, hl in pairs(highlights) do
--   vim.api.nvim_set_hl(0, group, hl)
-- end
--
-- local neovide_highlights = {
--   VertSplit                   = { bg = "None", fg = "None" },
--   NvimTreeWinSeparator        = { bg = "None", fg = "None" },
--   WinSeparator                = { bg = "None", fg = "None" },
--   BufferLineSeparator         = { bg = "None", fg = "None" },
--   BufferTypeSeparator         = { bg = "None", fg = "None" },
--   BufferLineOffsetSeparator   = { bg = "None", fg = "None" },
--   BufferLineSeparatorSelected = { bg = "None", fg = "None" },
--   QuickFixLine                = { bg = "None", fg = "None" },
-- }
--
-- if vim.g.neovide then
--   for group, hl in pairs(neovide_highlights) do
--     vim.api.nvim_set_hl(0, group, hl)
--   end
-- end
--
-- local fixBufferLineSeparator = function()
--   if (EcoVim.plugins.tree.enabled) then
--     vim.api.nvim_set_hl(0, "BufferLineOffsetSeparator", vim.api.nvim_get_hl_by_name('NvimTreeWinSeparator', true))
--     vim.api.nvim_set_hl(0, "BufferLineSeparator", vim.api.nvim_get_hl_by_name('NvimTreeWinSeparator', true))
--   end
-- end
--
-- vim.api.nvim_create_autocmd("ColorScheme", {
--   callback = fixBufferLineSeparator,
-- })
--
-- fixBufferLineSeparator()

================
File: lua/config/EcoVim.lua
================
------------------------------------------------
--                                            --
--    This is a main configuration file for    --
--                    EcoVim                  --
--      Change variables which you need to    --
--                                            --
------------------------------------------------

local icons = require("utils.icons")

EcoVim = {
  colorscheme = "onedark_dark" , -- "tokyonight"
  ui = {
    font = { "FiraCode Nerd Font", ":h14" },
    float = {
      border = "rounded",
    },
  },
  -- plugins = {
  --   -- Make sure to reload nvim & "Update Plugins" after change
  --   ai = {
  --     chatgpt = {
  --       enabled = false,
  --     },
  --     codeium = {
  --       enabled = false,
  --     },
  --     codecompanion = {
  --       enabled = true,
  --     },
  --     copilot = {
  --       enabled = true,
  --     },
  --     tabnine = {
  --       enabled = false,
  --     },
  --   },
  --   completion = {
  --     select_first_on_enter = false,
  --   },
  --   -- Completely replaces the UI for messages, cmdline and the popupmenu
  --   experimental_noice = {
  --     enabled = true,
  --   },
  --   -- Enables moving by subwords and skips significant punctuation with w, e, b motions
  --   jump_by_subwords = {
  --     enabled = true,
  --   },
  --   rooter = {
  --     -- Removing package.json from list in Monorepo Frontend Project can be helpful
  --     -- By that your live_grep will work related to whole project, not specific package
  --     patterns = { ".git", "package.json", "_darcs", ".bzr", ".svn", "Makefile" }, -- Default
  --   },
  --   tree = {
  --     enabled = false
  --   },
  --   -- <leader>z
  --   zen = {
  --     alacritty_enabled = false,
  --     kitty_enabled = false,
  --     wezterm_enabled = false,
  --     enabled = false, -- sync after change
  --   },
  -- },
  -- Please keep it
  icons = icons,
  -- Statusline configuration
  -- statusline = {
  --   path_enabled = false,
  --   path = "relative", -- absolute/relative
  -- },
}

================
File: lua/config/keymappings.lua
================
local keymap = vim.keymap.set
local silent = { silent = true }

table.unpack = table.unpack or unpack -- 5.1 compatibility

-- inserst mode binding

-- Delete word backward with Ctrl-Backspace in Insert mode
vim.keymap.set('i', '<C-BS>', '<C-w>', { desc = 'Delete word backward' })
vim.keymap.set('i', '<C-h>', '<C-w>', { desc = 'Delete word backward (terminal fallback)' })

-- Delete word forward with Ctrl-Delete in Insert mode
vim.keymap.set('i', '<C-Del>', '<C-o>dw', { desc = 'Delete word forward' })

-- Autoindent on insert
vim.keymap.set("n", "i", function()
  if #vim.fn.getline(".") == 0 then
    return [["_cc]]
  else
    return "i"
  end
end, { expr = true, desc = "properly indent on empty line when insert" })

-- Custom command to yank and exit
vim.api.nvim_create_user_command('Y', function(args)
  local vimCmd = '%y+|wq'
  -- if (args['fargs'][0]) then
  --   vimCmd = vimCmd .. ' ' .. args['fargs'][0]
  -- end
  vim.cmd(vimCmd)
  -- vim.cmd "echo 'ok'"
end, { desc = 'Yank buffer, save and exit' })

local function get_visual()
  local vstart = vim.fn.getpos("'<")

  local vend = vim.fn.getpos("'>")

  local line_start = vstart[2]
  local line_end = vend[2]

  -- or use api.nvim_buf_get_lines
  local lines = vim.fn.getline(line_start, line_end)
  return lines
end

vim.api.nvim_create_user_command('CodeSnapText', function()
  -- Get the current visual selection
  local relative_filename = vim.fn.expand('%')
  local file_extension = vim.fn.expand('%:e')
  -- local selection = vim.fn.getreg('"')
  local selection = table.concat(get_visual(),"\n")
  -- selection = string.gsub(selection,"```","``\\`")
  local formated_selection = "*" .. relative_filename .. "*\n" .. "```" .. file_extension .. "\n" .. selection .. "\n```"
  -- Yank the visual selection to the default register
  vim.fn.setreg("+", formated_selection)
  -- Echo a message to the user
end, { desc = "Format selection then yank code to share as text" })

local function launch_terminal()
    local term_program = vim.env.TERM_PROGRAM
    if term_program then
        vim.fn.system(term_program .. ' &')
    else
        vim.notify('TERM_PROGRAM environment variable not set', vim.log.levels.ERROR)
    end
end

vim.keymap.set('n', '<leader>T', launch_terminal, {
    desc = "Execute terminal program in background",
    silent = true
})
vim.keymap.set('x', '<leader>cy', '<Esc><cmd>CodeSnapText<CR>', { desc = 'Yank and format text for sharing' })
vim.keymap.set('n', '<leader>cy', 'ggVG<Esc><cmd>CodeSnapText<CR><C-o>', { desc = 'Yank and format text for sharing' })

vim.keymap.set('n', 'gV', 'v`]o`[', { desc = "Select last pasted (Visual mode)" })
-- vim.keymap.set('n', '<Leader>gv', 'v`]o`[')
-- Fix moving forward in jumplist via <C-i>
keymap("n", "<C-I>", "<C-I>", silent)

-- H to move to the first non-blank character of the line
keymap("n", "H", "^", silent)
-- Visual mode keybinding
vim.keymap.set('v', '<S-Up>', '<Up>', { desc = 'Visual mode prevent page up' })
vim.keymap.set('v', '<S-Down>', '<Down>', { desc = 'Visual mode prevent page down' })
vim.keymap.set('v', '<S-Left>', '<Left>', { desc = 'Visual mode move left' })
vim.keymap.set('v', '<S-Right>', '<Right>', { desc = 'Visual mode move right' })

-- Move selected line / block of text in visual mode
-- keymap("x", "K", ":move '<-2<CR>gv-gv", silent)
-- keymap("x", "J", ":move '>+1<CR>gv-gv", silent)

-- Keep visual mode indenting
keymap("v", "<", "<gv", silent)
keymap("v", ">", ">gv", silent)

-- Case change in visual mode
keymap("v", "`", "u", silent)
keymap("v", "<A-`>", "U", silent)

-- Save file by CTRL-S
-- keymap("n", "<C-s>", ":w<CR>", silent)
-- keymap("i", "<C-s>", "<ESC> :w<CR>", silent)

-- Remove highlights
keymap("n", "<CR>", ":noh<CR><CR>", silent)

-- Buffers
vim.keymap.set('n', '<leader>bk', '<cmd>bd<CR>', { desc = 'Buffer Delete' })
vim.keymap.set('n', '<leader>bd', '<cmd>bd!<CR>', { desc = 'Buffer Delete force!' })

-- Remove highlights on esc
vim.opt.hlsearch = true
vim.keymap.set('n', '<Esc>', '<cmd>nohlsearch<CR>')
vim.keymap.set('i', 'jj', '<Esc>', { desc = 'Exit insert mode' })


-- keymap("n", "<Tab>", ":BufferLineCycleNext<CR>", silent)
-- keymap("n", "gn", ":bn<CR>", silent)
-- keymap("n", "<S-Tab>", ":BufferLineCyclePrev<CR>", silent)
-- keymap("n", "gp", ":bp<CR>", silent)
-- keymap("n", "<S-q>", ":lua require('mini.bufremove').delete(0, false)<CR>", silent)

-- Don't yank on delete char
keymap("n", "x", '"_x', silent)
keymap("n", "X", '"_X', silent)
keymap("v", "x", '"_x', silent)
keymap("v", "X", '"_X', silent)
keymap({'n'}, '<Del>', '"_x')

-- Don't yank on visual paste
keymap("v", "p", '"_dP', silent)

-- Avoid issues because of remapping <c-a> and <c-x> below
vim.cmd([[
  nnoremap <Plug>SpeedDatingFallbackUp <c-a>
  nnoremap <Plug>SpeedDatingFallbackDown <c-x>
]])

-- Quickfix
-- keymap("n", "<Space>,", ":cp<CR>", silent)
-- keymap("n", "<Space>.", ":cn<CR>", silent)

-- Toggle quicklist
keymap("n", "<leader>q", "<cmd>lua require('utils').toggle_quicklist()<CR>", silent)

-- Manually invoke speeddating in case switch.vim didn't work
keymap("n", "<C-a>", ":if !switch#Switch() <bar> call speeddating#increment(v:count1) <bar> endif<CR>", silent)
keymap(
  "n",
  "<C-x>",
  ":if !switch#Switch({'reverse': 1}) <bar> call speeddating#increment(-v:count1) <bar> endif<CR>",
  silent
)
-- Open links under cursor in browser with gx
if vim.fn.has("macunix") == 1 then
  keymap("n", "gx", "<cmd>silent execute '!open ' . shellescape('<cWORD>')<CR>", silent)
else
  keymap("n", "gx", "<cmd>silent execute '!xdg-open ' . shellescape('<cWORD>')<CR>", silent)
end

-- LSP
keymap("n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>", silent)
keymap("n", "gr", "<cmd>lua vim.lsp.buf.references({ includeDeclaration = false })<CR>", silent)
keymap("n", "gy", "<cmd>lua vim.lsp.buf.type_definition()<CR>", silent)
keymap("n", "<C-Space>", "<cmd>lua vim.lsp.buf.code_action()<CR>", silent)
keymap("n", "<leader>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>", silent)
keymap("v", "<leader>ca", "<cmd>'<,'>lua vim.lsp.buf.code_action()<CR>", silent)
keymap("n", "<leader>cr", "<cmd>lua vim.lsp.buf.rename()<CR>", silent)
keymap("n", "<leader>cf", "<cmd>lua require('config.lsp.functions').format()<CR>", silent)
keymap("v", "<leader>cf", function()
  local start_row, _ = table.unpack(vim.api.nvim_buf_get_mark(0, "<"))
  local end_row, _ = table.unpack(vim.api.nvim_buf_get_mark(0, ">"))

  vim.lsp.buf.format({
    range = {
      ["start"] = { start_row, 0 },
      ["end"] = { end_row, 0 },
    },
    async = true,
  })
end, silent)
keymap("n", "<leader>cl", "<cmd>lua vim.diagnostic.open_float({ border = 'rounded', max_width = 100 })<CR>", silent)
keymap("n", "gl", "<cmd>lua vim.diagnostic.open_float({ border = 'rounded', max_width = 100 })<CR>", silent)
keymap("n", "<C-s>", "<cmd>lua vim.lsp.buf.signature_help()<CR>", { desc = "Lsp show signature (Press twice to focus)" })
keymap("n", "]g", "<cmd>lua vim.diagnostic.goto_next({ float = { border = 'rounded', max_width = 100 }})<CR>", silent)
keymap("n", "[g", "<cmd>lua vim.diagnostic.goto_prev({ float = { border = 'rounded', max_width = 100 }})<CR>", silent)
keymap("n", "<C-k>", function()
    local winid = require("ufo").peekFoldedLinesUnderCursor()
    if not winid then
      vim.lsp.buf.hover()
    end
  end,
  { desc = "Lsp hover, show additionnal information such as signature (Press twice to focus)" }

)

================
File: lua/config/lazy.lua
================
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "--single-branch",
    "https://github.com/folke/lazy.nvim.git",
    lazypath,
  })
end
vim.opt.runtimepath:prepend(lazypath)

require("lazy").setup("plugins", {
  defaults = { lazy = false },
  install = { colorscheme = { "tokyonight" } },
  checker = { enabled = false },
  concurrency = 5,
  performance = {
    rtp = {
      disabled_plugins = {
        "gzip",
        "netrwPlugin",
        "tarPlugin",
        "tutor",
        "zipPlugin",
      },
    },
  },
  debug = false,
  ui = {
    border = EcoVim.ui.float.border,
  }
})

-- vim.keymap.set("n", "<leader>/l", "<cmd>:Lazy<cr>")

================
File: lua/config/options.lua
================
local options = {
	clipboard = "unnamed,unnamedplus", --- Copy-paste between vim and everything else
	cmdheight = 0, --- Give more space for displaying messages
	completeopt = "menu,menuone,noselect", --- Better autocompletion
	cursorline = true, --- Highlight of current line
	emoji = false, --- Fix emoji display
	expandtab = true, --- Use spaces instead of tabs
	foldcolumn = "0",
	foldnestmax = 0,
	foldlevel = 99, --- Using ufo provider need a large value
	foldlevelstart = 99, --- Expand all folds by default
	ignorecase = true, --- Needed for smartcase
	laststatus = 3, --- Have a global statusline at the bottom instead of one for each window
	mouse = "a", --- Enable mouse
	number = true, --- Shows current line number
	pumheight = 10, --- Max num of items in completion menu
	relativenumber = true, --- Enables relative number
	scrolloff = 8, --- Always keep space when scrolling to bottom/top edge
	shiftwidth = 2, --- Change a number of space characters inserted for indentation
	showtabline = 2, --- Always show tabs
	signcolumn = "yes:2", --- Add extra sign column next to line number
	smartcase = true, --- Uses case in search
	smartindent = true, --- Makes indenting smart
	smarttab = true, --- Makes tabbing smarter will realize you have 2 vs 4
	softtabstop = 2, --- Insert 2 spaces for a tab
	splitright = true, --- Vertical splits will automatically be to the right
	swapfile = false, --- Swap not needed
	tabstop = 2, --- Insert 2 spaces for a tab
	termguicolors = true, --- Correct terminal colors
	timeoutlen = 200, --- Faster completion (cannot be lower than 200 because then commenting doesn't work)
	undofile = true, --- Sets undo to file Save undo history
	updatetime = 100, --- Faster completion
	viminfo = "'1000", --- Increase the size of file history
	wildignore = "*node_modules/**", --- Don't search inside Node.js modules (works for gutentag)
	wrap = false, --- Display long lines as just one line
	writebackup = false, --- Not needed
	-- Neovim defaults
	autoindent = true, --- Good auto indent
	backspace = "indent,eol,start", --- Making sure backspace works
	backup = false, --- Recommended by coc
	--- Concealed text is completely hidden unless it has a custom replacement character defined (needed for dynamically showing tailwind classes)
	conceallevel = 2,
	concealcursor = "", --- Set to an empty string to expand tailwind class when on cursorline
	encoding = "utf-8", --- The encoding displayed
	errorbells = false, --- Disables sound effect for errors
	fileencoding = "utf-8", --- The encoding written to file
	incsearch = true, --- Start searching before pressing enter
	showmode = false, --- Don't show things like -- INSERT -- anymore
}

local globals = {
	mapleader = " ", --- Map leader key to SPC
	maplocalleader = ",", --- Map local leader key to comma
	speeddating_no_mappings = 1, --- Disable default mappings for speeddating
}

vim.opt.shortmess:append("c")
vim.opt.formatoptions:remove("c")
vim.opt.formatoptions:remove("r")
vim.opt.formatoptions:remove("o")
vim.opt.fillchars:append("stl: ")
vim.opt.fillchars:append("eob: ")
vim.opt.fillchars:append("fold: ")
vim.opt.fillchars:append("foldopen: ")
vim.opt.fillchars:append("foldsep: ")
vim.opt.fillchars:append("foldclose:")
-- Auto-session recommended settings
vim.o.sessionoptions="blank,buffers,curdir,folds,help,tabpages,winsize,winpos,terminal,localoptions"
for k, v in pairs(options) do
	vim.opt[k] = v
end

for k, v in pairs(globals) do
	vim.g[k] = v
end

-- vim.g.editorconfig = false -- See editorconfig plugin for more settings
if vim.g.neovide then
	vim.opt.title = true
	vim.opt.guifont = EcoVim.ui.font
	vim.g.neovide_scale_factor = 1.1
	vim.g.neovide_refresh_rate = 144
	vim.g.neovide_underline_stroke_scale = 0.5
	vim.g.neovide_input_use_logo = 1
	vim.g.neovide_input_macos_option_key_is_meta = "only_left"
	vim.g.neovide_window_blurred = true
	vim.g.neovide_floating_blur_amount_x = 2.0
	vim.g.neovide_floating_blur_amount_y = 2.0
	vim.g.neovide_transparency = 0.9

	vim.keymap.set({ "n", "v" }, "<D-c>", '"+y') -- Copy
	vim.keymap.set({ "n", "v" }, "<D-v>", '"*p') -- Paste normal/visual mode
	vim.keymap.set({ "c", "i" }, "<D-v>", "<C-R>+") -- Paste command/insert mode

	vim.opt.fillchars:append("vert: ")
end

================
File: lua/internal/cursorword.lua
================
local function highlight_cursorword()
  if vim.g.cursorword_highlight ~= false then
    vim.cmd('highlight CursorWord term=underline cterm=underline gui=underline')
  end
end

local function disable_cursorword()
  local disable_ft = {
    ['alpha'] = true,
    ['lspsagafinder'] = true,
    ['NeogitStatus'] = true,
    ['text'] = true,
  }
  if not disable_ft[vim.bo.ft] then
    return
  end
  if vim.w.cursorword_id ~= 0 and vim.w.cursorword_id ~= nil and vim.w.cursorword_match ~= 0 then
    vim.fn.matchdelete(vim.w.cursorword_id)
    vim.w.cursorword_id = nil
    vim.w.cursorword_match = nil
    vim.w.cursorword = nil
  end
end

local function matchadd()
  local disable_ft = {
    ['alpha'] = true,
    ['NvimTree'] = true,
    ['lspsagafinder'] = true,
    ['dashboard'] = true,
  }
  if disable_ft[vim.bo.ft] then
    return
  end

  if vim.api.nvim_get_mode().mode == 'i' then
    return
  end

  local column = vim.api.nvim_win_get_cursor(0)[2]
  local line = vim.api.nvim_get_current_line()
  local cursorword = vim.fn.matchstr(line:sub(1, column + 1), [[\k*$]])
      .. vim.fn.matchstr(line:sub(column + 1), [[^\k*]]):sub(2)

  if cursorword == vim.w.cursorword then
    return
  end
  vim.w.cursorword = cursorword
  if vim.w.cursorword_match == 1 then
    vim.call('matchdelete', vim.w.cursorword_id)
  end
  vim.w.cursorword_match = 0
  if cursorword == ''
      or #cursorword > 100
      or #cursorword < 3
      or string.find(cursorword, '[\192-\255]+') ~= nil
  then
    return
  end
  local pattern = [[\<]] .. cursorword .. [[\>]]
  vim.w.cursorword_id = vim.fn.matchadd('CursorWord', pattern, -1)
  vim.w.cursorword_match = 1
end

local function cursor_moved()
  if vim.api.nvim_get_mode().mode == 'n' then
    matchadd()
  end
end

highlight_cursorword()

vim.api.nvim_create_autocmd({ 'CursorMoved', 'CursorMovedI' }, {
  pattern = '*',
  callback = cursor_moved,
})

vim.api.nvim_create_autocmd({ 'InsertEnter', 'BufWinEnter' }, {
  pattern = '*',
  callback = disable_cursorword,
})

================
File: lua/internal/winbar.lua
================
local M = {}

local function isempty(s)
  return s == nil or s == ""
end

M.filename = function()
  local filename = vim.fn.expand("%:t")
  local file_path = vim.fn.expand("%:p")
  local parent_dir = string.match(file_path, ".*/([^/]+)/[^/]+$")
  local extension = ""
  local file_icon = ""
  local file_icon_color = ""
  local default_file_icon = ""
  local default_file_icon_color = ""

  if not isempty(filename) then
    extension = vim.fn.expand("%:e")

    local default = false

    if isempty(extension) then
      extension = ""
      default = true
    end

    file_icon, file_icon_color =
        require("nvim-web-devicons").get_icon_color(filename, extension, { default = default })

    local hl_group = "FileIconColor" .. extension

    vim.api.nvim_set_hl(0, hl_group, { fg = file_icon_color })
    if file_icon == nil then
      file_icon = default_file_icon
      file_icon_color = default_file_icon_color
    end

    -- Return filename if parent dir doesn't exist
    if (parent_dir == nil or parent_dir == '') then
      return " " .. "%#" .. hl_group .. "#" .. file_icon .. "%*" .. " " .. "%#Winbar#" .. filename .. "%*"
    end

    -- Return parent dir
    return " " .. "%#" .. hl_group .. "#" .. file_icon .. "%*" .. " " .. "%#Winbar#" .. parent_dir .. "%*"
  end
end

M.gps = function()
  local navic = require('nvim-navic')
  local navic_location = navic.get_location()

  if not navic.is_available() then -- Returns boolean value indicating whether a output can be provided
    return
  end

  local retval = M.filename()

  if navic_location == "error" then
    return ""
  else
    if not isempty(navic_location) then
      local hl_group = "Winbar"
      return retval .. " " .. "%#" .. hl_group .. "#" .. EcoVim.icons.caretRight .. "%*" .. " " .. navic_location
    else
      return retval
    end
  end
end

vim.api.nvim_create_autocmd({ "CursorMoved", "BufWinEnter", "BufFilePost" }, {
  callback = function()
    local winbar_filetype_exclude = {
      "help",
      "startify",
      "dashboard",
      "packer",
      "neogitstatus",
      "NvimTree",
      "Trouble",
      "alpha",
      "lir",
      "Outline",
      "spectre_panel",
      "TelescopePrompt",
      "DressingInput",
      "DressingSelect",
      "neotest-summary",
      "toggleterm",
      "octo",
    }

    if vim.api.nvim_win_get_config(0).relative ~= "" then
      return
    end

    if vim.bo.filetype == "dapui_watches" then
      local hl_group = "EcovimSecondary"
      vim.opt_local.winbar = " " .. "%#" .. hl_group .. "#" .. require("utils.icons").watch .. "Watches" .. "%*"
      return
    end

    if vim.bo.filetype == "dapui_stacks" then
      local hl_group = "EcovimSecondary"
      vim.opt_local.winbar = " " .. "%#" .. hl_group .. "#" .. require("utils.icons").git .. "Stacks" .. "%*"
      return
    end

    if vim.bo.filetype == "dapui_breakpoints" then
      local hl_group = "EcovimSecondary"
      vim.opt_local.winbar = " " .. "%#" .. hl_group .. "#" .. require("utils.icons").bigCircle .. "Breakpoints" .. "%*"
      return
    end

    if vim.bo.filetype == "dapui_scopes" then
      local hl_group = "EcovimSecondary"
      vim.opt_local.winbar = " " .. "%#" .. hl_group .. "#" .. require("utils.icons").telescope .. "Scopes" .. "%*"
      return
    end

    if vim.bo.filetype == "dap-repl" then
      local hl_group = "EcovimSecondary"
      vim.opt_local.winbar = " "
          .. "%#"
          .. hl_group
          .. "#"
          .. require("utils.icons").consoleDebug
          .. "Debug Console"
          .. "%*"
      return
    end

    if vim.bo.filetype == "dapui_console" then
      local hl_group = "EcovimSecondary"
      vim.opt_local.winbar = " " .. "%#" .. hl_group .. "#" .. require("utils.icons").console .. "Console" .. "%*"
      return
    end

    if vim.tbl_contains(winbar_filetype_exclude, vim.bo.filetype) then
      vim.opt_local.winbar = nil
      return
    end

    if vim.bo.filetype == "blame" then
      local hl_group = "EcovimSecondary"
      vim.opt_local.winbar = " " .. "%#" .. hl_group .. "#" .. require("utils.icons").git .. "Blame" .. "%*"
      return
    end

    local winbar_present, winbar = pcall(require, "internal.winbar")
    if not winbar_present or type(winbar) == "boolean" then
      vim.opt_local.winbar = nil
      return
    end

    local value = winbar.gps()

    if value == nil then
      value = winbar.filename()
    end

    vim.opt_local.winbar = value
  end,
})

return M

================
File: lua/plugins/ai/codecompanion.lua
================
return {
  {
    "olimorris/codecompanion.nvim",
    enabled = true,
    dependencies = {
      "nvim-lua/plenary.nvim",
      "nvim-treesitter/nvim-treesitter",
      { "MeanderingProgrammer/render-markdown.nvim", ft = { "markdown", "codecompanion" } },
    },
    keys = {

      { "<leader>ccl", "<cmd>CodeCompanion<CR>",     desc = "Inline" },
      { "<leader>ccc", "<cmd>CodeCompanionChat<CR>", desc = "Chat" },
    },
    opts = {
      opts = {
        log_level = "DEBUG",
      },
      display = {
        chat = {
          show_settings = true,
        }
      },
      strategies = {
        chat = {
          adapter = "lmstudio",
          keymaps = {
            completion = {
              modes = {
                i = "<C-x>"
              },
              index = 1,
              callback = "keymaps.completion",
              description = "Completion Menu",
            }
          },
        },
        slash_commands = {
          ["buffer"] = {
            callback = "strategies.chat.slash_commands.buffer",
            description = "Insert open buffers",
            opts = {
              contains_code = true,
              provider = "telescope", -- default|telescope|mini_pick|fzf_lua
            },
          },
          ["fetch"] = {
            callback = "strategies.chat.slash_commands.fetch",
            description = "Insert URL contents",
            opts = {
              adapter = "jina",
            },
          },
          ["file"] = {
            callback = "strategies.chat.slash_commands.file",
            description = "Insert a file",
            opts = {
              contains_code = true,
              max_lines = 1000,
              provider = "telescope", -- default|telescope|mini_pick|fzf_lua
            },
          },
          ["files"] = {
            callback = "strategies.chat.slash_commands.files",
            description = "Insert multiple files",
            opts = {
              contains_code = true,
              max_lines = 1000,
              provider = "telescope", -- default|telescope|mini_pick|fzf_lua
            },
          },
          ["help"] = {
            callback = "strategies.chat.slash_commands.help",
            description = "Insert content from help tags",
            opts = {
              contains_code = false,
              provider = "telescope", -- telescope|mini_pick|fzf_lua
            },
          },
          ["now"] = {
            callback = "strategies.chat.slash_commands.now",
            description = "Insert the current date and time",
            opts = {
              contains_code = false,
            },
          },
          ["symbols"] = {
            callback = "strategies.chat.slash_commands.symbols",
            description = "Insert symbols for a selected file",
            opts = {
              contains_code = true,
              provider = "telescope", -- default|telescope|mini_pick|fzf_lua
            },
          },
          ["terminal"] = {
            callback = "strategies.chat.slash_commands.terminal",
            description = "Insert terminal output",
            opts = {
              contains_code = false,
            },
          },
        },
        inline = {
          adapter = "lmstudio",
        },
        agent = {
          adapter = "lmstudio",
        },
      },
      adapters = {
        lmstudio = function()
          return require("codecompanion.adapters").extend("openai_compatible", {
            env = {
              url = "http://localhost:1234", -- LM Studio API endpoint
            },
          })
        end,
      },

    }
  }
}

================
File: lua/plugins/ai/codeium.lua
================
return {
  {
    "jcdickinson/codeium.nvim",
    enabled = false,
    -- cond = EcoVim.plugins.ai.codeium.enabled,
    event = "InsertEnter",
    cmd = "Codeium",
    dependencies = {
      "nvim-lua/plenary.nvim",
      "hrsh7th/nvim-cmp",
    },
    config = true,
  },
}

================
File: lua/plugins/ai/copilot-chat.lua
================
local prompts = {
  -- Code related prompts
  Explain = "Please explain how the following code works.",
  Review = "Please review the following code and provide suggestions for improvement.",
  Tests = "Please explain how the selected code works, then generate unit tests for it.",
  Refactor = "Please refactor the following code to improve its clarity and readability.",
  FixCode = "Please fix the following code to make it work as intended.",
  FixError = "Please explain the error in the following text and provide a solution.",
  BetterNamings = "Please provide better names for the following variables and functions.",
  Documentation = "Please provide documentation for the following code.",
  SwaggerApiDocs = "Please provide documentation for the following API using Swagger.",
  SwaggerJsDocs = "Please write JSDoc for the following API using Swagger.",
  -- Text related prompts
  Summarize = "Please summarize the following text.",
  Spelling = "Please correct any grammar and spelling errors in the following text.",
  Wording = "Please improve the grammar and wording of the following text.",
  Concise = "Please rewrite the following text to make it more concise.",
}

return {
  {
    "CopilotC-Nvim/CopilotChat.nvim",
    enabled = false,
    branch = "canary",
    event = "VeryLazy",
    opts = {
      show_help = "no",
      prompts = prompts,
    },
    keys = {
      { "<leader>cce", "<cmd>CopilotChatExplain<cr>", desc = "CopilotChat - Explain code" },
      { "<leader>cct", "<cmd>CopilotChatTests<cr>",   desc = "CopilotChat - Generate tests" },
      {
        "<leader>ccc",
        ":CopilotChatToggle<CR>",
        mode = { "n", "x" },
        desc = "CopilotChat",
      },
      {
        "<leader>ccf",
        "<cmd>CopilotChatFixDiagnostic<cr>", -- Get a fix for the diagnostic message under the cursor.
        desc = "CopilotChat Fix Diagnostic",
      },
    }
  },
}

================
File: lua/plugins/ai/copilot.lua
================
return {
  {
    "zbirenbaum/copilot.lua",
    enabled = false,
    -- cond = EcoVim.plugins.ai.copilot.enabled,
    lazy = false,
    cmd = "Copilot",
    event = "VeryLazy",
    opts = {
      panel = { enabled = false, auto_refresh = true },
      suggestion = {
        enabled = false,
        auto_trigger = true,
        keymap = {
          accept = "<TAB>",
          accept_word = "<C-w>",
          accept_line = "<C-l>",
          next = "<C-j>",
          prev = "<C-k>",
          dismiss = "<ESC>",
        },
      },
    },
  },
}

================
File: lua/plugins/code/comment.lua
================
return {
  {
    "numToStr/Comment.nvim",
    lazy = false,
    dependencies = "JoosepAlviste/nvim-ts-context-commentstring",
    config = function()
      require('ts_context_commentstring').setup()

      require('Comment').setup {
        ---Add a space b/w comment and the line
        ---@type boolean
        padding = true,

        ---Lines to be ignored while comment/uncomment.
        ---Could be a regex string or a function that returns a regex string.
        ---Example: Use '^$' to ignore empty lines
        ---@type string|function
        ignore = nil,

        ---Create basic (operator-pending) and extended mappings for NORMAL + VISUAL mode
        ---@type table
        mappings = {
          ---operator-pending mapping
          ---Includes `gcc`, `gcb`, `gc[count]{motion}` and `gb[count]{motion}`
          basic = true,
          ---extra mapping
          ---Includes `gco`, `gcO`, `gcA`
          extra = true,
          ---extended mapping
          ---Includes `g>`, `g<`, `g>[count]{motion}` and `g<[count]{motion}`
          extended = false,
        },

        ---LHS of toggle mapping in NORMAL + VISUAL mode
        ---@type table
        toggler = {
          ---line-comment keymap
          line = 'gcc',
          ---block-comment keymap
          block = 'gbc',
        },

        ---LHS of operator-pending mapping in NORMAL + VISUAL mode
        ---@type table
        opleader = {
          ---line-comment keymap
          line = 'gc',
          ---block-comment keymap
          block = 'gb',
        },

        pre_hook = require("ts_context_commentstring.integrations.comment_nvim").create_pre_hook(),

        ---Post-hook, called after commenting is done
        ---@type function|nil
        post_hook = nil,
      }
    end,
  },
}

================
File: lua/plugins/code/emmet-vim.lua
================
-- Expand html abbreviation,Wrap html tags easy

-- return { 'mattn/emmet-vim' }
return { {
-- enabled = false,
   "mattn/emmet-vim",

  config = function()
    -- vim.g.user_emmet_leader_key = '<C-h>' --Doesnt work
-- let g:user_emmet_leader_key='<C-Z>'
  end,
}, }

================
File: lua/plugins/code/package-info.lua
================
local icons = EcoVim.icons

return {
  {
    "vuki656/package-info.nvim",
    event = "BufEnter package.json",
    opts = {
      colors = {
        up_to_date = "#3C4048", -- Text color for up to date package virtual text
        outdated = "#fc514e", -- Text color for outdated package virtual text
      },
      icons = {
        enable = true,                -- Whether to display icons
        style = {
          up_to_date = icons.checkSquare, -- Icon for up to date packages
          outdated = icons.gitRemove, -- Icon for outdated packages
        },
      },
      autostart = true,          -- Whether to autostart when `package.json` is opened
      hide_up_to_date = true,    -- It hides up to date versions when displaying virtual text
      hide_unstable_versions = true, -- It hides unstable versions from version list e.g next-11.1.3-canary3

      -- Can be `npm` or `yarn`. Used for `delete`, `install` etc...
      -- The plugin will try to auto-detect the package manager based on
      -- `yarn.lock` or `package-lock.json`. If none are found it will use the
      -- provided one,                              if nothing is provided it will use `yarn`
      package_manager = 'yarn'
    }
  },
}

================
File: lua/plugins/code/printer.lua
================
return {
  {
    "rareitems/printer.nvim",
    event = "BufEnter",
    ft = {
      "lua",
      "javascript",
      "typescript",
      "javascriptreact",
      "typescriptreact",
    },
    opts = {
      keymap = "<leader>cp",             -- Plugin doesn't have any keymaps by default
      behavior = "yank", -- how operator should behave
      -- "insert_below" will insert the text below the cursor
      --  "yank" will not insert but instead put text into the default '"' register
      formatters = {
        -- you can define your formatters for specific filetypes
        -- by assigning function that takes two strings
        -- one text modified by 'add_to_inside' function
        -- second the variable (thing) you want to print out
        -- see examples in lua/formatters.lua
        lua = function(inside, variable)
          return string.format('print("%s: " .. %s)', inside, variable)
        end,
        typescriptreact = function(inside, variable)
          return string.format("console.log('%s: ', %s);", inside, variable)
        end,
        astro = function(inside, variable)
          return string.format("console.log('%s: ', %s);", inside, variable)
        end,
      },
      -- function which modifies the text inside string in the print statement, by default it adds the path and line number
      add_to_inside = function(text)
        return string.format("[%s:%s] %s", vim.fn.expand("%:h"):gsub(GIT_CWD(), ''), vim.fn.line("."), text)
      end,
      -- set to to indenity function to turn off the default behaviour
      -- add_to_inside = function(text)
      --     return text
      -- end,
    },
    keys = {
      -- You can use use '<Plug>printer_print' to call the pluging inside more advanced keymaps
      -- for example a keymap that always adds a prnt statement based on 'iw'
      "n", "gP", "<Plug>(printer_print)iw"
    }
  },
}

================
File: lua/plugins/editor/flash.lua
================
return {
  {
    "folke/flash.nvim",
    event = "VeryLazy",
    opts = {
      char = {
        keys = { "f", "F", "t", "T" },
      }
    },
    keys = {
      { "s", mode = { "n", "x", "o" }, function() require("flash").jump() end, desc = "Flash" },
    { "S", mode = { "n", "o", "x" }, function() require("flash").treesitter() end, desc = "Flash Treesitter" },
    { "r", mode = "o", function() require("flash").remote() end, desc = "Remote Flash" },
    { "R", mode = { "o", "x" }, function() require("flash").treesitter_search() end, desc = "Treesitter Search" },
    { "<c-s>", mode = { "c" }, function() require("flash").toggle() end, desc = "Toggle Flash Search" },
    },
  },
}

================
File: lua/plugins/editor/multicursors.lua
================
return {
  {
    "smoka7/multicursors.nvim",
    enabled = false,
    event = "VeryLazy",
    dependencies = {
      'nvim-treesitter/nvim-treesitter',
      'smoka7/hydra.nvim',
    },
    opts = {
      hint_config = {
        border = EcoVim.ui.float.border or "rounded",
        position = 'bottom',
        show_name = false,
      }
    },
    keys = {
      {
        '<LEADER>m',
        '<CMD>MCstart<CR>',
        desc = 'multicursor',
      },
      {
        '<LEADER>m',
        '<CMD>MCvisual<CR>',
        mode = "v",
        desc = 'multicursor',
      },
      {
        '<C-Down>',
        '<CMD>MCunderCursor<CR>',
        desc = 'multicursor down',
      },
    },
  },
}

================
File: lua/plugins/git/diffview.lua
================
local lib = require("diffview.lib")
local diffview = require("diffview")

local M = {}

-- ╭──────────────────────────────────────────────────────────╮
-- │ Custom Ecovim toggle file history function via <leader>gd│
-- ╰──────────────────────────────────────────────────────────╯
M.toggle_file_history = function ()
  local view = lib.get_current_view()
  if view == nil then
    diffview.file_history();
    return
  end

  if view then
    view:close()
    lib.dispose_view(view)
  end
end

-- ╭──────────────────────────────────────────────────────────╮
-- │ Custom Ecovim toggle status function via <leader>gs      │
-- ╰──────────────────────────────────────────────────────────╯
M.toggle_status = function ()
  local view = lib.get_current_view()
  if view == nil then
    diffview.open();
    return
  end

  if view then
    view:close()
    lib.dispose_view(view)
  end
end

return M

================
File: lua/plugins/git/lazygit.yml
================
# Config relating to the Lazygit UI
gui:
    # The number of lines you scroll by when scrolling the main window
    scrollHeight: 2
    # If true, allow scrolling past the bottom of the content in the main window
    scrollPastBottom: true
    # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#scroll-off-margin
    scrollOffMargin: 2
    # One of: 'margin' (default) | 'jump'
    scrollOffBehavior: margin
    # If true, capture mouse events.
    # When mouse events are captured, it's a little harder to select text: e.g. requiring you to hold the option key when on macOS.
    mouseEvents: true
    # If true, do not show a warning when discarding changes in the staging view.
    skipDiscardChangeWarning: false
    # If true, do not show warning when applying/popping the stash
    skipStashWarning: false
    # If true, do not show a warning when attempting to commit without any staged files; instead stage all unstaged files.
    skipNoStagedFilesWarning: false
    # If true, do not show a warning when rewording a commit via an external editor
    skipRewordInEditorWarning: false
    # Fraction of the total screen width to use for the left side section. You may want to pick a small number (e.g. 0.2) if you're using a narrow screen, so that you can see more of the main section.
    # Number from 0 to 1.0.
    sidePanelWidth: 0.3333
    # If true, increase the height of the focused side window; creating an accordion effect.
    expandFocusedSidePanel: false
    # The weight of the expanded side panel, relative to the other panels. 2 means
    # twice as tall as the other panels. Only relevant if `expandFocusedSidePanel` is true.
    expandedSidePanelWeight: 2
    # Sometimes the main window is split in two (e.g. when the selected file has both staged and unstaged changes). This setting controls how the two sections are split.
    # Options are:
    # - 'horizontal': split the window horizontally
    # - 'vertical': split the window vertically
    # - 'flexible': (default) split the window horizontally if the window is wide enough, otherwise split vertically
    mainPanelSplitMode: flexible
    # How the window is split when in half screen mode (i.e. after hitting '+' once).
    # Possible values:
    # - 'left': split the window horizontally (side panel on the left, main view on the right)
    # - 'top': split the window vertically (side panel on top, main view below)
    enlargedSideViewLocation: left
    # One of 'auto' (default) | 'en' | 'zh-CN' | 'zh-TW' | 'pl' | 'nl' | 'ja' | 'ko' | 'ru'
    language: auto
    # Format used when displaying time e.g. commit time.
    # Uses Go's time format syntax: https://pkg.go.dev/time#Time.Format
    timeFormat: 02 Jan 06
    # Format used when displaying time if the time is less than 24 hours ago.
    # Uses Go's time format syntax: https://pkg.go.dev/time#Time.Format
    shortTimeFormat: 3:04PM
    # Config relating to colors and styles.
    # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#color-attributes
    theme:
        # Border color of focused window
        activeBorderColor:
            - green
            - bold
        # Border color of non-focused windows
        inactiveBorderColor:
            - default
        # Border color of focused window when searching in that window
        searchingActiveBorderColor:
            - cyan
            - bold
        # Color of keybindings help text in the bottom line
        optionsTextColor:
            - blue
        # Background color of selected line.
        # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#highlighting-the-selected-line
        selectedLineBgColor:
            - blue
        # Background color of selected line when view doesn't have focus.
        inactiveViewSelectedLineBgColor:
            - bold
        # Foreground color of copied commit
        cherryPickedCommitFgColor:
            - blue
        # Background color of copied commit
        cherryPickedCommitBgColor:
            - cyan
        # Foreground color of marked base commit (for rebase)
        markedBaseCommitFgColor:
            - blue
        # Background color of marked base commit (for rebase)
        markedBaseCommitBgColor:
            - yellow
        # Color for file with unstaged changes
        unstagedChangesColor:
            - red
        # Default text color
        defaultFgColor:
            - default
    # Config relating to the commit length indicator
    commitLength:
        # If true, show an indicator of commit message length
        show: true
    # If true, show the '5 of 20' footer at the bottom of list views
    showListFooter: true
    # If true, display the files in the file views as a tree. If false, display the files as a flat list.
    # This can be toggled from within Lazygit with the '~' key, but that will not change the default.
    showFileTree: true
    # If true, show a random tip in the command log when Lazygit starts
    showRandomTip: true
    # If true, show the command log
    showCommandLog: true
    # If true, show the bottom line that contains keybinding info and useful buttons. If false, this line will be hidden except to display a loader for an in-progress action.
    showBottomLine: true
    # If true, show jump-to-window keybindings in window titles.
    showPanelJumps: true
    # Deprecated: use nerdFontsVersion instead
    showIcons: false
    # Nerd fonts version to use.
    # One of: '2' | '3' | empty string (default)
    # If empty, do not show icons.
    nerdFontsVersion: ""
    # If true (default), file icons are shown in the file views. Only relevant if NerdFontsVersion is not empty.
    showFileIcons: true
    # Length of author name in (non-expanded) commits view. 2 means show initials only.
    commitAuthorShortLength: 2
    # Length of author name in expanded commits view. 2 means show initials only.
    commitAuthorLongLength: 17
    # Length of commit hash in commits view. 0 shows '*' if NF icons aren't on.
    commitHashLength: 8
    # If true, show commit hashes alongside branch names in the branches view.
    showBranchCommitHash: false
    # Whether to show the divergence from the base branch in the branches view.
    # One of: 'none' | 'onlyArrow'  | 'arrowAndNumber'
    showDivergenceFromBaseBranch: none
    # Height of the command log view
    commandLogSize: 8
    # Whether to split the main window when viewing file changes.
    # One of: 'auto' | 'always'
    # If 'auto', only split the main window when a file has both staged and unstaged changes
    splitDiff: auto
    # Default size for focused window. Window size can be changed from within Lazygit with '+' and '_' (but this won't change the default).
    # One of: 'normal' (default) | 'half' | 'full'
    windowSize: normal
    # Window border style.
    # One of 'rounded' (default) | 'single' | 'double' | 'hidden'
    border: rounded
    # If true, show a seriously epic explosion animation when nuking the working tree.
    animateExplosion: true
    # Whether to stack UI components on top of each other.
    # One of 'auto' (default) | 'always' | 'never'
    portraitMode: auto
    # How things are filtered when typing '/'.
    # One of 'substring' (default) | 'fuzzy'
    filterMode: substring
    # Config relating to the spinner.
    spinner:
        # The frames of the spinner animation.
        frames:
            - '|'
            - /
            - '-'
            - \
        # The "speed" of the spinner in milliseconds.
        rate: 50
    # Status panel view.
    # One of 'dashboard' (default) | 'allBranchesLog'
    statusPanelView: dashboard
    # If true, jump to the Files panel after popping a stash
    switchToFilesAfterStashPop: true
    # If true, jump to the Files panel after applying a stash
    switchToFilesAfterStashApply: true
# Config relating to git
git:
    # See https://github.com/jesseduffield/lazygit/blob/master/docs/Custom_Pagers.md
    paging:
        # Value of the --color arg in the git diff command. Some pagers want this to be set to 'always' and some want it set to 'never'
        colorArg: always
        # e.g.
        # diff-so-fancy
        # delta --dark --paging=never
        # ydiff -p cat -s --wrap --width={{columnWidth}}
        pager: ""
        # If true, Lazygit will use whatever pager is specified in `$GIT_PAGER`, `$PAGER`, or your *git config*. If the pager ends with something like ` | less` we will strip that part out, because less doesn't play nice with our rendering approach. If the custom pager uses less under the hood, that will also break rendering (hence the `--paging=never` flag for the `delta` pager).
        useConfig: false
        # e.g. 'difft --color=always'
        externalDiffCommand: ""
    # Config relating to committing
    commit:
        # If true, pass '--signoff' flag when committing
        signOff: false
        # Automatic WYSIWYG wrapping of the commit message as you type
        autoWrapCommitMessage: true
        # If autoWrapCommitMessage is true, the width to wrap to
        autoWrapWidth: 72
    # Config relating to merging
    merging:
        # If true, run merges in a subprocess so that if a commit message is required, Lazygit will not hang
        # Only applicable to unix users.
        manualCommit: false
        # Extra args passed to `git merge`, e.g. --no-ff
        args: ""
        # The commit message to use for a squash merge commit. Can contain "{{selectedRef}}" and "{{currentBranch}}" placeholders.
        squashMergeMessage: Squash merge {{selectedRef}} into {{currentBranch}}
    # list of branches that are considered 'main' branches, used when displaying commits
    mainBranches:
        - master
        - main
    # Prefix to use when skipping hooks. E.g. if set to 'WIP', then pre-commit hooks will be skipped when the commit message starts with 'WIP'
    skipHookPrefix: WIP
    # If true, periodically fetch from remote
    autoFetch: true
    # If true, periodically refresh files and submodules
    autoRefresh: true
    # If true, pass the --all arg to git fetch
    fetchAll: true
    # If true, lazygit will automatically stage files that used to have merge
    # conflicts but no longer do; and it will also ask you if you want to
    # continue a merge or rebase if you've resolved all conflicts. If false, it
    # won't do either of these things.
    autoStageResolvedConflicts: true
    # Command used when displaying the current branch git log in the main window
    branchLogCmd: git log --graph --color=always --abbrev-commit --decorate --date=relative --pretty=medium {{branchName}} --
    # Command used to display git log of all branches in the main window.
    # Deprecated: User `allBranchesLogCmds` instead.
    allBranchesLogCmd: git log --graph --all --color=always --abbrev-commit --decorate --date=relative  --pretty=medium
    # If true, do not spawn a separate process when using GPG
    overrideGpg: false
    # If true, do not allow force pushes
    disableForcePushing: false
    # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#predefined-commit-message-prefix
    commitPrefix:
        # pattern to match on. E.g. for 'feature/AB-123' to match on the AB-123 use "^\\w+\\/(\\w+-\\w+).*"
        pattern: ""
        # Replace directive. E.g. for 'feature/AB-123' to start the commit message with 'AB-123 ' use "[$1] "
        replace: ""
    # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#predefined-branch-name-prefix
    branchPrefix: ""
    # If true, parse emoji strings in commit messages e.g. render :rocket: as 🚀
    # (This should really be under 'gui', not 'git')
    parseEmoji: false
    # Config for showing the log in the commits view
    log:
        # One of: 'date-order' | 'author-date-order' | 'topo-order' | 'default'
        # 'topo-order' makes it easier to read the git log graph, but commits may not
        # appear chronologically. See https://git-scm.com/docs/
        #
        # Deprecated: Configure this with `Log menu -> Commit sort order` (<c-l> in the commits window by default).
        order: topo-order
        # This determines whether the git graph is rendered in the commits panel
        # One of 'always' | 'never' | 'when-maximised'
        #
        # Deprecated: Configure this with `Log menu -> Show git graph` (<c-l> in the commits window by default).
        showGraph: always
        # displays the whole git graph by default in the commits view (equivalent to passing the `--all` argument to `git log`)
        showWholeGraph: false
    # When copying commit hashes to the clipboard, truncate them to this
    # length. Set to 40 to disable truncation.
    truncateCopiedCommitHashesTo: 12
# Periodic update checks
update:
    # One of: 'prompt' (default) | 'background' | 'never'
    method: prompt
    # Period in days between update checks
    days: 14
# Background refreshes
refresher:
    # File/submodule refresh interval in seconds.
    # Auto-refresh can be disabled via option 'git.autoRefresh'.
    refreshInterval: 10
    # Re-fetch interval in seconds.
    # Auto-fetch can be disabled via option 'git.autoFetch'.
    fetchInterval: 60
# If true, show a confirmation popup before quitting Lazygit
confirmOnQuit: false
# If true, exit Lazygit when the user presses escape in a context where there is nothing to cancel/close
quitOnTopLevelReturn: false
# Config relating to things outside of Lazygit like how files are opened, copying to clipboard, etc
os:
    # Command for editing a file. Should contain "{{filename}}".
    edit: ""
    # Command for editing a file at a given line number. Should contain
    # "{{filename}}", and may optionally contain "{{line}}".
    editAtLine: ""
    # Same as EditAtLine, except that the command needs to wait until the
    # window is closed.
    editAtLineAndWait: ""
    # For opening a directory in an editor
    openDirInEditor: ""
    # A built-in preset that sets all of the above settings. Supported presets
    # are defined in the getPreset function in editor_presets.go.
    editPreset: ""
    # Command for opening a file, as if the file is double-clicked. Should
    # contain "{{filename}}", but doesn't support "{{line}}".
    open: ""
    # Command for opening a link. Should contain "{{link}}".
    openLink: ""
    # EditCommand is the command for editing a file.
    # Deprecated: use Edit instead. Note that semantics are different:
    # EditCommand is just the command itself, whereas Edit contains a
    # "{{filename}}" variable.
    editCommand: ""
    # EditCommandTemplate is the command template for editing a file
    # Deprecated: use EditAtLine instead.
    editCommandTemplate: ""
    # OpenCommand is the command for opening a file
    # Deprecated: use Open instead.
    openCommand: ""
    # OpenLinkCommand is the command for opening a link
    # Deprecated: use OpenLink instead.
    openLinkCommand: ""
    # CopyToClipboardCmd is the command for copying to clipboard.
    # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#custom-command-for-copying-to-and-pasting-from-clipboard
    copyToClipboardCmd: ""
    # ReadFromClipboardCmd is the command for reading the clipboard.
    # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#custom-command-for-copying-to-and-pasting-from-clipboard
    readFromClipboardCmd: ""
# If true, don't display introductory popups upon opening Lazygit.
disableStartupPopups: false
# What to do when opening Lazygit outside of a git repo.
# - 'prompt': (default) ask whether to initialize a new repo or open in the most recent repo
# - 'create': initialize a new repo
# - 'skip': open most recent repo
# - 'quit': exit Lazygit
notARepository: prompt
# If true, display a confirmation when subprocess terminates. This allows you to view the output of the subprocess before returning to Lazygit.
promptToReturnFromSubprocess: true
# Keybindings
keybinding:
    universal:
        quit: q
        quit-alt1: <c-c>
        return: <esc>
        quitWithoutChangingDirectory: Q
        togglePanel: <tab>
        prevItem: <up>
        nextItem: <down>
        prevItem-alt: k
        nextItem-alt: j
        prevPage: ','
        nextPage: .
        scrollLeft: H
        scrollRight: L
        gotoTop: <
        gotoBottom: '>'
        toggleRangeSelect: v
        rangeSelectDown: <s-down>
        rangeSelectUp: <s-up>
        prevBlock: <left>
        nextBlock: <right>
        prevBlock-alt: h
        nextBlock-alt: l
        nextBlock-alt2: <tab>
        prevBlock-alt2: <backtab>
        jumpToBlock:
            - "1"
            - "2"
            - "3"
            - "4"
            - "5"
        nextMatch: "n"
        prevMatch: "N"
        startSearch: /
        optionMenu: <disabled>
        optionMenu-alt1: '?'
        select: <space>
        goInto: <enter>
        confirm: <enter>
        confirmInEditor: <a-enter>
        remove: d
        new: "n"
        edit: e
        openFile: o
        scrollUpMain: <pgup>
        scrollDownMain: <pgdown>
        scrollUpMain-alt1: K
        scrollDownMain-alt1: J
        scrollUpMain-alt2: <c-u>
        scrollDownMain-alt2: <c-d>
        executeShellCommand: <disabled>
        createRebaseOptionsMenu: m
        # 'Files' appended for legacy reasons
        pushFiles: P
        # 'Files' appended for legacy reasons
        pullFiles: p
        refresh: R
        createPatchOptionsMenu: <c-p>
        nextTab: ']'
        prevTab: '['
        nextScreenMode: +
        prevScreenMode: _
        undo: z
        redo: <c-z>
        filteringMenu: <c-s>
        diffingMenu: W
        diffingMenu-alt: <c-e>
        copyToClipboard: <c-o>
        openRecentRepos: <c-r>
        submitEditorText: <enter>
        extrasMenu: '@'
        toggleWhitespaceInDiffView: <c-w>
        increaseContextInDiffView: '}'
        decreaseContextInDiffView: '{'
        increaseRenameSimilarityThreshold: )
        decreaseRenameSimilarityThreshold: (
        openDiffTool: <c-t>
    status:
        checkForUpdate: u
        recentRepos: <enter>
        allBranchesLogGraph: a
    files:
        commitChanges: c
        commitChangesWithoutHook: w
        amendLastCommit: A
        commitChangesWithEditor: C
        findBaseCommitForFixup: <c-f>
        confirmDiscard: x
        ignoreFile: i
        refreshFiles: r
        stashAllChanges: s
        viewStashOptions: S
        toggleStagedAll: a
        viewResetOptions: D
        fetch: f
        toggleTreeView: '`'
        openMergeTool: M
        openStatusFilter: <c-b>
        copyFileInfoToClipboard: "y"
    branches:
        createPullRequest: o
        viewPullRequestOptions: O
        copyPullRequestURL: <c-y>
        checkoutBranchByName: c
        forceCheckoutBranch: F
        rebaseBranch: r
        renameBranch: R
        mergeIntoCurrentBranch: M
        viewGitFlowOptions: i
        fastForward: f
        createTag: T
        pushTag: P
        setUpstream: u
        fetchRemote: f
        sortOrder: s
    worktrees:
        viewWorktreeOptions: w
    commits:
        squashDown: s
        renameCommit: r
        renameCommitWithEditor: R
        viewResetOptions: g
        markCommitAsFixup: f
        createFixupCommit: F
        squashAboveCommits: S
        moveDownCommit: <c-j>
        moveUpCommit: <c-k>
        amendToCommit: A
        resetCommitAuthor: a
        pickCommit: p
        revertCommit: t
        cherryPickCopy: C
        pasteCommits: V
        markCommitAsBaseForRebase: B
        tagCommit: T
        checkoutCommit: <space>
        resetCherryPick: <c-R>
        copyCommitAttributeToClipboard: "y"
        openLogMenu: <c-l>
        openInBrowser: o
        viewBisectOptions: b
        startInteractiveRebase: i
    amendAttribute:
        resetAuthor: a
        setAuthor: A
        addCoAuthor: c
    stash:
        popStash: g
        renameStash: r
    commitFiles:
        checkoutCommitFile: c
    main:
        toggleSelectHunk: a
        pickBothHunks: b
        editSelectHunk: E
    submodules:
        init: i
        update: u
        bulkMenu: b
    commitMessage:
        commitMenu: <c-o>

================
File: lua/plugins/git/worktree.lua
================
local present, worktree = pcall(require, "git-worktree")
if not present then
  return
end

local keymap = vim.keymap.set
local silent = { silent = true }
local utils = require('utils')

-- ╭──────────────────────────────────────────────────────────╮
-- │ Keymappings                                              │
-- ╰──────────────────────────────────────────────────────────╯
-- <Enter> - switches to that worktree
-- <c-d> - deletes that worktree
-- <c-f> - toggles forcing of the next deletion
keymap("n", "<Leader>gww", "<CMD>lua require('telescope').extensions.git_worktree.git_worktrees()<CR>", silent)

-- First a telescope git branch window will appear.
-- Presing enter will choose the selected branch for the branch name.
-- If no branch is selected, then the prompt will be used as the branch name.

-- After the git branch window,
-- a prompt will be presented to enter the path name to write the worktree to.

-- As of now you can not specify the upstream in the telescope create workflow,
-- however if it finds a branch of the same name in the origin it will use it
keymap("n", "<Leader>gwc", "<CMD>lua require('telescope').extensions.git_worktree.create_git_worktree()<CR>", silent)

-- ╭──────────────────────────────────────────────────────────╮
-- │ Hooks                                                    │
-- ╰──────────────────────────────────────────────────────────╯
-- op = Operations.Switch, Operations.Create, Operations.Delete
-- metadata = table of useful values (structure dependent on op)
--      Switch
--          path = path you switched to
--          prev_path = previous worktree path
--      Create
--          path = path where worktree created
--          branch = branch name
--          upstream = upstream remote name
--      Delete
--          path = path where worktree deleted

worktree.on_tree_change(function(op, metadata)
  if op == worktree.Operations.Switch then
    utils.log("Switched from " .. metadata.prev_path .. " to " .. metadata.path, "Git Worktree")
    utils.closeOtherBuffers()
    vim.cmd ('e')
  end
end)

================
File: lua/plugins/languages/markdown.lua
================
return {
  { "dhruvasagar/vim-table-mode", ft = { "markdown" } },
  {
    "MeanderingProgrammer/render-markdown.nvim",
    ft = { "markdown", "Avante", "copilot-chat", "codecompanion" },
    opts = {
      render_modes = true,
      file_types = { "markdown", "Avante", "copilot-chat", "codecompanion" },
      sign = {
        enabled = false,
      },
    },
    dependencies = { "nvim-treesitter/nvim-treesitter", "nvim-tree/nvim-web-devicons" }, -- if you prefer nvim-web-devicons
  },
  {
    "iamcco/markdown-preview.nvim",
    cmd = { "MarkdownPreviewToggle", "MarkdownPreview", "MarkdownPreviewStop" },
    build = "cd app && pnpm install",
    init = function()
      vim.g.mkdp_filetypes = { "markdown" }
    end,
    ft = { "markdown" },
  }, }

================
File: lua/plugins/languages/typescript.lua
================
return {
  {
    "pmizio/typescript-tools.nvim",
    event = "LspAttach",
    dependencies = {
      "nvim-lua/plenary.nvim",
      "neovim/nvim-lspconfig",
      {
        "saghen/blink.cmp",
        -- Ensure blink.cmp is loaded before typescript-tools
        lazy = false,
        priority = 1000,
      }
    },
  },

  {
    "razak17/tailwind-fold.nvim",
    opts = {
      min_chars = 50,
    },
    dependencies = { "nvim-treesitter/nvim-treesitter" },
    ft = { "html", "svelte", "astro", "vue", "typescriptreact" },
  },

  {
    "MaximilianLloyd/tw-values.nvim",
    keys = {
      { "<Leader>cv", "<CMD>TWValues<CR>", desc = "Tailwind CSS values" },
    },
    opts = {
      border = EcoVim.ui.float.border or "rounded", -- Valid window border style,
      show_unknown_classes = true                   -- Shows the unknown classes popup
    }
  },

  {
    "laytan/tailwind-sorter.nvim",
    cmd = {
      "TailwindSort",
      "TailwindSortOnSaveToggle"
    },
    keys = {
      { "<Leader>cS", "<CMD>TailwindSortOnSaveToggle<CR>", desc = "toggle Tailwind CSS classes sort on save" },

    },
    dependencies = { "nvim-treesitter/nvim-treesitter", "nvim-lua/plenary.nvim" },
    build = "cd formatter && npm i && npm run build",
    config = true,
  },

  {
    "axelvc/template-string.nvim",
    event = "InsertEnter",
    ft = {
      "javascript",
      "typescript",
      "javascriptreact",
      "typescriptreact",
    },
    config = true, -- run require("template-string").setup()
  },

  {
    "dmmulroy/tsc.nvim",
    cmd = { "TSC" },
    config = true,
  },

  {
    "dmmulroy/ts-error-translator.nvim",
    config = true
  },
}

================
File: lua/plugins/telescope/multi-rg.lua
================
-- ╭──────────────────────────────────────────────────────────╮
-- │ This is a custom telescope ripgrep picker that           │
-- │  accepts predefined shortcuts after two spaces in input. │
-- │                                                          │
-- │ Those shortcuts will filter files by selected            │
-- │  extension only.                                         │
-- │                                                          │
-- │ Default keybinding is <S-P>                              │
-- ╰──────────────────────────────────────────────────────────╯

local conf = require("telescope.config").values
local finders = require "telescope.finders"
local make_entry = require "telescope.make_entry"
local pickers = require "telescope.pickers"

local flatten = vim.tbl_flatten

local function is_table(t) return type(t) == 'table' end
local function is_string(t) return type(t) == 'string' end

return function(opts)
  opts = opts or {}
  opts.cwd = opts.cwd and vim.fn.expand(opts.cwd) or vim.loop.cwd()
  opts.shortcuts = opts.shortcuts
      or {
        ["c"] = "*.c",
        ["js"] = "*.{js,jsx}",
        ["json"] = "*.json",
        ["l"] = "*.lua",
        ["lua"] = "*.lua",
        ["md"] = "*.md",
        ["styles"] = "{styles.tsx,styles.ts,styles.js,*.styles.tsx,*.styles.ts,*.styles.js}",
        ["stories"] = "{stories.tsx,stories.ts,stories.js,*.stories.tsx,*.stories.ts,*.stories.js}",
        ["test"] = "*{.test.tsx,.test.ts,.test.js,-test.tsx,-test.ts,-test.js}",
        ["tests"] = "*{.test.tsx,.test.ts,.test.js,-test.tsx,-test.ts,-test.js}",
        ["typescript"] = "*.ts",
        ["ts"] = {
          "*.{ts,tsx}",
          "!*{.test.tsx,.test.ts,.test.js,-test.tsx,-test.ts,-test.js}"
        },
        ["tsx"] = {
          "*.tsx",
          "!*{.test.tsx,.test.ts,.test.js,-test.tsx,-test.ts,-test.js}"
        },
        ["xml"] = "*.xml",
      }
  opts.pattern = opts.pattern or "%s"

  local custom_grep = finders.new_async_job {
    command_generator = function(prompt)
      if not prompt or prompt == "" then
        return nil
      end

      local prompt_split = vim.split(prompt, "  ")

      local args = { "rg" }
      if prompt_split[1] then
        table.insert(args, "-e")
        table.insert(args, prompt_split[1])
      end

      if prompt_split[2] and is_table(opts.shortcuts[prompt_split[2]]) then
        local pattern

        for _, value in pairs(opts.shortcuts[prompt_split[2]]) do
          table.insert(args, "-g")
          if opts.shortcuts[prompt_split[2]] then
            pattern = value
          else
            pattern = prompt_split[2]
          end

          table.insert(args, string.format(opts.pattern, pattern))
        end
      end

      if prompt_split[2] and is_string(opts.shortcuts[prompt_split[2]]) then
        table.insert(args, "-g")

        local pattern
        if opts.shortcuts[prompt_split[2]] then
          pattern = opts.shortcuts[prompt_split[2]]
        else
          pattern = prompt_split[2]
        end

        table.insert(args, string.format(opts.pattern, pattern))
      end

      return flatten {
        args,
        { "-F" , "--color=never", "--no-heading", "--with-filename", "--line-number", "--column", "--smart-case" },
      }
    end,
    entry_maker = make_entry.gen_from_vimgrep(opts),
    cwd = opts.cwd,
  }

  pickers.new(opts, {
    debounce = 100,
    prompt_title = "Live Grep (with shortcuts)",
    finder = custom_grep,
    previewer = conf.grep_previewer(opts),
    sorter = require("telescope.sorters").empty(),
  }):find()
end

================
File: lua/plugins/telescope/pickers.lua
================
local previewers = require('telescope.previewers')
local builtin    = require('telescope.builtin')

-- Implement delta as previewer for diffs

local M = {}

local delta_bcommits = previewers.new_termopen_previewer {
  get_command = function(entry)
    return { 'git', '-c', 'core.pager=delta', '-c', 'delta.side-by-side=false', 'diff', entry.value .. '^!', '--',
      entry.current_file }
  end
}

local delta = previewers.new_termopen_previewer {
  get_command = function(entry)
    return { 'git', '-c', 'core.pager=delta', '-c', 'delta.side-by-side=false', 'diff', entry.value .. '^!' }
  end
}

M.my_git_commits = function(opts)
  opts = opts or {}
  opts.previewer = {
    delta,
    previewers.git_commit_message.new(opts),
    previewers.git_commit_diff_as_was.new(opts),
  }

  builtin.git_commits(opts)
end

M.my_git_bcommits = function(opts)
  opts = opts or {}
  opts.previewer = {
    delta_bcommits,
    previewers.git_commit_message.new(opts),
    previewers.git_commit_diff_as_was.new(opts),
  }

  builtin.git_bcommits(opts)
end

-- Custom pickers

M.edit_neovim = function()
  builtin.git_files(
    require('telescope.themes').get_dropdown({
      color_devicons   = true,
      cwd              = "~/.config/nvim",
      previewer        = false,
      prompt_title     = "Ecovim Dotfiles",
      sorting_strategy = "ascending",
      winblend         = 4,
      layout_config    = {
        horizontal = {
          mirror = false,
        },
        vertical = {
          mirror = false,
        },
        prompt_position = "top",
      },
    }))
end

M.project_files = function(opts)
  opts = opts or {} -- define here if you want to define something
  local ok = pcall(require "telescope.builtin".git_files, opts)
  if not ok then require "telescope.builtin".find_files(opts) end
end

M.command_history = function()
  builtin.command_history(
    require('telescope.themes').get_dropdown({
      color_devicons = true,
      winblend       = 4,
      layout_config  = {
        width = function(_, max_columns, _)
          return math.min(max_columns, 150)
        end,
        height = function(_, _, max_lines)
          return math.min(max_lines, 15)
        end,
      },
    }))
end

M.buffer_search = function()
  builtin.buffers(
    require('telescope.themes').get_dropdown({
      previewer      = false,
      color_devicons = true,
      winblend       = 4,
      layout_config  = {
        width = function(_, max_columns, _)
          return math.min(max_columns, 100)
        end,
        height = function(_, _, max_lines)
          return math.min(max_lines, 15)
        end,
      },
    }))
end

return M

================
File: lua/plugins/ui/alpha.lua
================
return {
  {
    "goolord/alpha-nvim",
    lazy = false,
    config = function()
      local present, alpha = pcall(require, "alpha")
      if not present then
        return
      end

      local dashboard = require("alpha.themes.dashboard")
      local icons = require("utils.icons")
      local if_nil = vim.F.if_nil
      local fn = vim.fn
      local config_dir = fn.stdpath('config')

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ Header                                                   │
      -- ╰──────────────────────────────────────────────────────────╯

      -- local header = {
      --   " ████████                           ██            ",
      --   "░██░░░░░                           ░░             ",
      --   "░██        █████   ██████  ██    ██ ██ ██████████ ",
      --   "░███████  ██░░░██ ██░░░░██░██   ░██░██░░██░░██░░██",
      --   "░██░░░░  ░██  ░░ ░██   ░██░░██ ░██ ░██ ░██ ░██ ░██",
      --   "░██      ░██   ██░██   ░██ ░░████  ░██ ░██ ░██ ░██",
      --   "░████████░░█████ ░░██████   ░░██   ░██ ███ ░██ ░██",
      --   "░░░░░░░░  ░░░░░   ░░░░░░     ░░    ░░ ░░░  ░░  ░░ ",
      -- }

      local header = {
  [[                                                                       ]],
  [[                                                                       ]],
  [[                                                                       ]],
  [[                                                                       ]],
  [[                                                                     ]],
  [[       ████ ██████           █████      ██                     ]],
  [[      ███████████             █████                             ]],
  [[      █████████ ███████████████████ ███   ███████████   ]],
  [[     █████████  ███    █████████████ █████ ██████████████   ]],
  [[    █████████ ██████████ █████████ █████ █████ ████ █████   ]],
  [[  ███████████ ███    ███ █████████ █████ █████ ████ █████  ]],
  [[ ██████  █████████████████████ ████ █████ █████ ████ ██████ ]],
  [[                                                                       ]],
  [[                                                                       ]],
  [[                                                                       ]],
}

      dashboard.section.header.type = "text";
      dashboard.section.header.val = header;
      dashboard.section.header.opts = {
        position = "center",
        hl = "EcovimHeader",
      }

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ Heading Info                                             │
      -- ╰──────────────────────────────────────────────────────────╯

      local thingy = io.popen(
      'echo "$(LANG=en_us_88591; date +%a) $(date +%d) $(LANG=en_us_88591; date +%b)" | tr -d "\n"')
      if thingy == nil then return end
      local date = thingy:read("*a")
      thingy:close()

      local datetime = os.date " %H:%M"

      local hi_top_section = {
        type = "text",
        val = "┌────────────   Today is " .. date .. " ────────────┐",
        opts = {
          position = "center",
          hl = "EcovimHeaderInfo"
        }
      }

      local hi_middle_section = {
        type = "text",
        val = "│                                                │",
        opts = {
          position = "center",
          hl = "EcovimHeaderInfo"
        }
      }

      local hi_bottom_section = {
        type = "text",
        val = "└───══───══───══───  " .. datetime .. "  ───══───══───══────┘",
        opts = {
          position = "center",
          hl = "EcovimHeaderInfo"
        }
      }

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ Buttons                                                  │
      -- ╰──────────────────────────────────────────────────────────╯
      -- Copied from Alpha.nvim source code

      local leader = "SPC"

      --- @param sc string
      --- @param txt string
      --- @param keybind string optional
      --- @param keybind_opts table optional
      local function button(sc, txt, keybind, keybind_opts)
        local sc_ = sc:gsub("%s", ""):gsub(leader, "<leader>")

        local opts = {
          position = "center",
          shortcut = sc,
          cursor = 5,
          width = 50,
          align_shortcut = "right",
          hl_shortcut = "EcovimPrimary",
        }
        if keybind then
          keybind_opts = if_nil(keybind_opts, { noremap = true, silent = true, nowait = true })
          opts.keymap = { "n", sc_, keybind, keybind_opts }
        end

        local function on_press()
          -- local key = vim.api.nvim_replace_termcodes(keybind .. "<Ignore>", true, false, true)
          local key = vim.api.nvim_replace_termcodes(sc_ .. "<Ignore>", true, false, true)
          vim.api.nvim_feedkeys(key, "t", false)
        end

        return {
          type = "button",
          val = txt,
          on_press = on_press,
          opts = opts,
        }
      end

      dashboard.section.buttons.val = {
        button("s", icons.timer .. " " .. "Session Lens", "<cmd>SessionSearch<CR>", {}),
        button("l", icons.timer .. " " .. "Load Last Session", "<cmd>SessionRestore<CR>", {}),
        button("f", icons.fileNoBg .. " " .. "Find File", "<cmd>Telescope find_files<CR>", {}),
        button("w", icons.word .. " " .. "Find Word",
          "<cmd>lua require('plugins.telescope.multi-rg')()<CR>", {}),
        button("h", icons.fileRecent .. " " .. "Recents", "<cmd>Telescope oldfiles hidden=true<CR>", {}),
        button("u", icons.packageDown .. " " .. "Update Plugins", "<cmd>Lazy update<CR>", {}),
        button("m", icons.package .. " " .. "Manage Plugins", "<cmd>Lazy<CR>", {}),
        -- button("<ESC>", icons.exit .. " " .. "Exit", "<cmd>exit<CR>", {}),
      }

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ Footer                                                   │
      -- ╰──────────────────────────────────────────────────────────╯

      local function file_exists(file)
        local f = io.open(file, "rb")
        if f then f:close() end
        return f ~= nil
      end

      local function line_from(file)
        if not file_exists(file) then return {} end
        local lines = {}
        for line in io.lines(file) do
          lines[#lines + 1] = line
        end
        return lines
      end

      local function footer()
        local plugins = require("lazy").stats().count
        local v = vim.version()
        local ecovim_version = line_from(config_dir .. "/.ecovim.version")
        return string.format(" v%d.%d.%d  󰂖 %d   %s ", v.major, v.minor, v.patch, plugins, ecovim_version[1])
      end

      dashboard.section.footer.val = {
        footer()
      }
      dashboard.section.footer.opts = {
        position = "center",
        hl = "EcovimFooter",
      }

      local section = {
        header = dashboard.section.header,
        hi_top_section = hi_top_section,
        hi_middle_section = hi_middle_section,
        hi_bottom_section = hi_bottom_section,
        buttons = dashboard.section.buttons,
        footer = dashboard.section.footer,
      }

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ Setup                                                    │
      -- ╰──────────────────────────────────────────────────────────╯

      local opts = {
        layout = {
          { type = "padding", val = 3 },
          section.header,
          { type = "padding", val = 1 },
          section.hi_top_section,
          section.hi_middle_section,
          section.hi_bottom_section,
          { type = "padding", val = 2 },
          section.buttons,
          { type = "padding", val = 3 },
          section.footer,
        },
        opts = {
          margin = 5
        },
      }

      alpha.setup(opts)

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ Hide tabline and statusline on startup screen            │
      -- ╰──────────────────────────────────────────────────────────╯
      vim.api.nvim_create_augroup("alpha_tabline", { clear = true })

      vim.api.nvim_create_autocmd("FileType", {
        group = "alpha_tabline",
        pattern = "alpha",
        command = "set showtabline=0 laststatus=0 noruler",
      })

      vim.api.nvim_create_autocmd("FileType", {
        group = "alpha_tabline",
        pattern = "alpha",
        callback = function()
          vim.api.nvim_create_autocmd("BufUnload", {
            group = "alpha_tabline",
            buffer = 0,
            command = "set showtabline=2 ruler laststatus=3",
          })
        end,
      })
    end,
  }
}

================
File: lua/plugins/ui/colorizer.lua
================
return {
  {
    "brenoprata10/nvim-highlight-colors",
    opts = {
      enable_tailwind = false,
    }
  },
}

================
File: lua/plugins/ui/colorscheme.lua
================
return {
  {
    "folke/tokyonight.nvim",
    lazy = false,
    priority = 1000,
    config = function()
      -- load the colorscheme here
      -- vim.cmd([[colorscheme tokyonight]])
      vim.cmd("colorscheme " .. EcoVim.colorscheme)
      require("config.colorscheme")
    end,
  },

  {
    "olimorris/onedarkpro.nvim",
    priority = 1000, -- Ensure it loads first
    config = function()
      -- load the colorscheme here
      -- vim.cmd([[colorscheme tokyonight]])
      vim.cmd("colorscheme " .. EcoVim.colorscheme)
      require("config.colorscheme")
    end,
  }
}

================
File: lua/plugins/ui/fidget.lua
================
return {
  {
    "j-hui/fidget.nvim",
    opts = {
      -- options
    },
  }
}

================
File: lua/plugins/ui/image.lua
================
return {
{
    "vhyrro/luarocks.nvim",
    priority = 1001, -- this plugin needs to run before anything else
    opts = {
        rocks = { "magick" },
    },
},
{
    "3rd/image.nvim",
    enabled = false,
    dependencies = { "luarocks.nvim" },
    opts = {}
}}

================
File: lua/plugins/ui/indent.lua
================
return {

  {
    "lukas-reineke/indent-blankline.nvim",
    enabled = false,
    event = "BufReadPre",
    main = "ibl",
    config = function()
      vim.opt.list = true
      -- vim.opt.listchars:append("space:⋅")
      -- vim.opt.listchars:append("eol:↴")

      require("ibl").setup {
        exclude = {
          filetypes = { "help", "dashboard", "packer", "NvimTree", "Trouble", "TelescopePrompt", "Float" },
          buftypes = { "terminal", "nofile", "telescope" },
        },
        indent = {
          char = "│",
        },
        scope = {
          enabled = true,
          show_start = false,
        }
      }
    end,
  },
}

================
File: lua/plugins/ui/marks.lua
================
return {
  {
    "chentoast/marks.nvim",
    event = "BufEnter",
    config = true,
  },
}

================
File: lua/plugins/ui/noice.lua
================
return {
  {
    "folke/noice.nvim",
    enabled = false,
    -- cond = EcoVim.plugins.experimental_noice.enabled,
    lazy = false,
    opts = {
      messages = { enabled = false },
      lsp = {
        -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
        override = {
          ["vim.lsp.util.convert_input_to_markdown_lines"] = false,
          ["vim.lsp.util.stylize_markdown"] = false,
          ["cmp.entry.get_documentation"] = true,
        },
        progress = {
          enabled = false,
        },
        hover = {
          enabled = false,
        },
      },
      -- you can enable a preset for easier configuration
      presets = {
        bottom_search = false,    -- use a classic bottom cmdline for search
        command_palette = true,   -- position the cmdline and popupmenu together
        long_message_to_split = true, -- long messages will be sent to a split
        inc_rename = false,       -- enables an input dialog for inc-rename.nvim
        lsp_doc_border = false,   -- add a border to hover docs and signature help
      },
    }
  },
}

================
File: lua/plugins/ui/scratch.lua
================
-- To launch scratch buffer, use:
-- alias nvscratch='nvim -c "Scratch"'
return {
  "LintaoAmons/scratch.nvim",
  event = "VeryLazy",
  lazy = false,
  dependencies = {
    { "stevearc/dressing.nvim" },      -- optional: to have the same UI shown in the GIF
    { "ibhagwan/fzf-lua" },            --optional: if you want to use fzf-lua to pick scratch file. Recommanded, since it will order the files by modification datetime desc. (require rg)
    { "nvim-telescope/telescope.nvim" }, -- optional: if you want to pick scratch file by telescope
  },
  config = function()
    require("scratch").setup({
      scratch_file_dir = vim.fn.stdpath("cache") .. "/scratch.nvim", -- where your scratch files will be put
      -- window_cmd = "rightbelow vsplit", -- 'vsplit' | 'split' | 'edit' | 'tabedit' | 'rightbelow vsplit'
      use_telescope = true,
      -- fzf-lua is recommanded, since it will order the files by modification datetime desc. (require rg)
      file_picker = "fzflua",                        -- "fzflua" | "telescope" | nil
      filetypes = { "md", "ts", "js", "lua", "sh" }, -- you can simply put filetype here
      filetype_details = {                           -- or, you can have more control here
        json = {},                                   -- empty table is fine
        ["project-name.md"] = {
          subdir = "project-name"                    -- group scratch files under specific sub folder
        },
        ["yaml"] = {},
        go = {
          requireDir = true, -- true if each scratch file requires a new directory
          filename = "main", -- the filename of the scratch file in the new directory
          content = { "package main", "", "func main() {", "  ", "}" },
          cursor = {
            location = { 4, 2 },
            insert_mode = true,
          },
        },
      },
      localKeys = {
        {
          filenameContains = { "sh" },
          LocalKeys = {
            {
              cmd = "<CMD>RunShellCurrentLine<CR>",
              key = "<C-r>",
              modes = { "n", "i", "v" },
            },
          },
        },
      },
      -- hooks = {
      --   {
      -- -- Example to create buffer with 2 lines containing hello, world
      -- callback = function()
      --   vim.api.nvim_buf_set_lines(0, 0, -1, false, { "hello", "world" })
      -- end,
      --   },
      -- },
    })
  end,

      keys = {
        -- { "<C-p>", "<CMD>lua require('plugins.telescope.pickers').project_files()<CR>" },
        { "<leader>wo", "<CMD>ScratchOpen<CR>", {desc = "Open scratch"} },
        { "<leader>wn", "<CMD>Scratch<CR>", {desc = "New scratch"} },
        { "<leader>wN", "<CMD>ScratchWithName<CR>", {desc = "New scratch with name"} },
      }
}

================
File: lua/plugins/util/auto-session.lua
================
return {
	"rmagatti/auto-session",
	lazy = false,
  keys = {
    -- Will use Telescope if installed or a vim.ui.select picker otherwise
    { '<leader>wl', '<cmd>SessionSearch<CR>', desc = '[S]ession lens' },
    { '<leader>ws', '<cmd>SessionSave<CR>', desc = 'Save session' },
    { '<leader>wa', '<cmd>SessionToggleAutoSave<CR>', desc = 'Toggle autosave' },
  },
	---enables autocomplete for opts
	---@module "auto-session"
	---@type AutoSession.Config
	opts = {
	},
	config = function()
		require("auto-session").setup({
			bypass_save_filetypes = { "alpha", "dashboard" }, -- or whatever dashboard you use
			enabled = true, -- Enables/disables auto creating, saving and restoring
			root_dir = vim.fn.stdpath("data") .. "/sessions/", -- Root dir where sessions will be stored
			auto_save = true, -- Enables/disables auto saving session on exit
			auto_restore = true, -- Enables/disables auto restoring session on start
			auto_create = function()
        local cmd = 'git rev-parse --is-inside-work-tree'
        return vim.fn.system(cmd) == 'true\n'
      end, -- Enables/disables auto creating new session files. Can take a function that should return true/false if a new session file should be created or not
      suppressed_dirs = { "~/", "~/workspace/", "~/Downloads", "/" },
			allowed_dirs = nil, -- Allow session restore/create in certain directories
			auto_restore_last_session = false, -- On startup, loads the last saved session if session for cwd does not exist
			use_git_branch = false, -- Include git branch name in session name
			lazy_support = true, -- Automatically detect if Lazy.nvim is being used and wait until Lazy is done to make sure session is restored correctly. Does nothing if Lazy isn't being used. Can be disabled if a problem is suspected or for debugging
			close_unsupported_windows = true, -- Close windows that aren't backed by normal file before autosaving a session
			args_allow_single_directory = true, -- Follow normal sesion save/load logic if launched with a single directory as the only argument
			args_allow_files_auto_save = false, -- Allow saving a session even when launched with a file argument (or multiple files/dirs). It does not load any existing session first. While you can just set this to true, you probably want to set it to a function that decides when to save a session when launched with file args. See documentation for more detail
			continue_restore_on_error = true, -- Keep loading the session even if there's an error
			cwd_change_handling = false, -- Follow cwd changes, saving a session before change and restoring after
			log_level = "error", -- Sets the log level of the plugin (debug, info, warn, error).

			session_lens = {
				load_on_setup = false, -- Initialize on startup (requires Telescope)
				theme_conf = { -- Pass through for Telescope theme options
					-- layout_config = { -- As one example, can change width/height of picker
					--   width = 0.8,    -- percent of window
					--   height = 0.5,
					-- },
				},
				previewer = true, -- File preview for session picker

				mappings = {
					-- Mode can be a string or a table, e.g. {"i", "n"} for both insert and normal mode
					delete_session = { "i", "<C-D>" },
					alternate_session = { "i", "<C-S>" },
					copy_session = { "i", "<C-Y>" },
				},

				session_control = {
					control_dir = vim.fn.stdpath("data") .. "/auto_session/", -- Auto session control dir, for control files, like alternating between two sessions with session-lens
					control_filename = "session_control.json", -- File name of the session control file
				},
			},
  })
	end,
}

================
File: lua/plugins/util/faster.lua
================
return {
  'pteroctopus/faster.nvim',
  opts = {
    -- Behaviour table contains configuration for behaviours faster.nvim uses
    behaviours = {
      -- Bigfile configuration controls disabling and enabling of features when
      -- big file is opened
      bigfile = {
        -- Behaviour can be turned on or off. To turn on set to true, otherwise
        -- set to false
        on = true,
        -- Table which contains names of features that will be disabled when
        -- bigfile is opened. Feature names can be seen in features table below.
        -- features_disabled can also be set to "all" and then all features that
        -- are on (on=true) are going to be disabled for this behaviour
        features_disabled = {
          "illuminate", "matchparen", "lsp", "treesitter",
          "indent_blankline", "vimopts", "syntax", "filetype"
        },
        -- Files larger than `filesize` are considered big files. Value is in MB.
        filesize = 2,
        -- Autocmd pattern that controls on which files behaviour will be applied.
        -- `*` means any file.
        pattern = "*",
        -- Optional extra patterns and sizes for which bigfile behaviour will apply.
        -- Note! that when multiple patterns (including the main one) and filesizes
        -- are defined: bigfile behaviour will be applied for minimum filesize of
        -- those defined in all applicable patterns for that file.
        -- extra_pattern example in multi line comment is bellow:
        --[[
      extra_patterns = {
        -- If this is used than bigfile behaviour for *.md files will be
        -- triggered for filesize of 1.1MiB
        { filesize = 1.1, pattern = "*.md" },
        -- If this is used than bigfile behaviour for *.log file will be
        -- triggered for the value in `behaviours.bigfile.filesize`
        { pattern  = "*.log" },
        -- Next line is invalid without the pattern and will be ignored
        { filesize = 3 },
      },
      ]]
        -- By default `extra_patterns` is an empty table: {}.
        extra_patterns = {},
      },
      -- Fast macro configuration controls disabling and enabling features when
      -- macro is executed
      fastmacro = {
        -- Behaviour can be turned on or off. To turn on set to true, otherwise
        -- set to false
        on = true,
        -- Table which contains names of features that will be disabled when
        -- macro is executed. Feature names can be seen in features table below.
        -- features_disabled can also be set to "all" and then all features that
        -- are on (on=true) are going to be disabled for this behaviour.
        -- Specificaly: lualine plugin is disabled when macros are executed because
        -- if a recursive macro opens a buffer on every iteration this error will
        -- happen after 300-400 hundred iterations:
        -- `E5108: Error executing lua Vim:E903: Process failed to start: too many open files: "/usr/bin/git"`
        features_disabled = { "lualine" },
      }
    },
    -- Feature table contains configuration for features faster.nvim will disable
    -- and enable according to rules defined in behaviours.
    -- Defined feature will be used by faster.nvim only if it is on (`on=true`).
    -- Defer will be used if some features need to be disabled after others.
    -- defer=false features will be disabled first and defer=true features last.
    features = {
      -- Neovim filetype plugin
      -- https://neovim.io/doc/user/filetype.html
      filetype = {
        on = true,
        defer = true,
      },
      -- Illuminate plugin
      -- https://github.com/RRethy/vim-illuminate
      illuminate = {
        on = true,
        defer = false,
      },
      -- Indent Blankline
      -- https://github.com/lukas-reineke/indent-blankline.nvim
      indent_blankline = {
        on = true,
        defer = false,
      },
      -- Neovim LSP
      -- https://neovim.io/doc/user/lsp.html
      lsp = {
        on = true,
        defer = false,
      },
      -- Lualine
      -- https://github.com/nvim-lualine/lualine.nvim
      lualine = {
        on = true,
        defer = false,
      },
      -- Neovim Pi_paren plugin
      -- https://neovim.io/doc/user/pi_paren.html
      matchparen = {
        on = true,
        defer = false,
      },
      -- Neovim syntax
      -- https://neovim.io/doc/user/syntax.html
      syntax = {
        on = true,
        defer = true,
      },
      -- Neovim treesitter
      -- https://neovim.io/doc/user/treesitter.html
      treesitter = {
        on = true,
        defer = false,
      },
      -- Neovim options that affect speed when big file is opened:
      -- swapfile, foldmethod, undolevels, undoreload, list
      vimopts = {
        on = true,
        defer = false,
      }
    }
  }
}

================
File: lua/plugins/which-key/setup.lua
================
local present, wk = pcall(require, "which-key")
if not present then
	return
end

wk.setup({
  preset = "helix",
	plugins = {
		marks = true, -- shows a list of your marks on ' and `
		registers = true, -- shows your registers on " in NORMAL or <C-r> in INSERT mode
		-- the presets plugin, adds help for a bunch of default keybindings in Neovim
		-- No actual key bindings are created
		spelling = {
			enabled = true, -- enabling this will show WhichKey when pressing z= to select spelling suggestions
			suggestions = 20, -- how many suggestions should be shown in the list?
		},
		presets = {
			operators = true, -- adds help for operators like d, y, ... and registers them for motion / text object completion
			motions = true, -- adds help for motions text_objects = false, -- help for text objects triggered after entering an operator
			windows = true, -- default bindings on <c-w>
			nav = true, -- misc bindings to work with windows
			z = true, -- bindings for folds, spelling and others prefixed with z
			g = true, -- bindings for prefixed with g
		},
	},
	icons = {
		breadcrumb = "»", -- symbol used in the command line area that shows your active key combo
		separator = "➜", -- symbol used between a key and it's label
		group = "+", -- symbol prepended to a group
	},
	win = {
		border = EcoVim.ui.float.border or "rounded", -- none, single, double, shadow, rounded
		padding = { 2, 2, 2, 2 }, -- extra window padding [top, right, bottom, left]
	},
	layout = {
		height = { min = 4, max = 25 }, -- min and max height of the columns
		width = { min = 20, max = 50 }, -- min and max width of the columns
		spacing = 4, -- spacing between columns
		align = "left", -- align columns left, center or right
	},
	show_help = true, -- show help message on the command line when the popup is visible
  
})

-- ignore
-- wk.add({
-- 	-- { "<leader><leader>", hidden = true },
-- 	-- { "<leader>1", hidden = true },
-- 	-- { "<leader>2", hidden = true },
-- 	-- { "<leader>3", hidden = true },
-- 	-- { "<leader>4", hidden = true },
-- 	-- { "<leader>5", hidden = true },
-- 	-- { "<leader>6", hidden = true },
-- 	-- { "<leader>7", hidden = true },
-- 	-- { "<leader>8", hidden = true },
-- 	-- { "<leader>9", hidden = true },
-- })

-- which key
wk.add({
  {
      "<leader>?",
      function()
        require("which-key").show({ global = true })
      end,
      desc = "Buffer Keymaps (which-key)",
  }

})
-- Mini
wk.add({
	{ "gs", group = "Surround", mode = { "n", "v" } },
})
-- single
wk.add({
	{ "<leader>=", "<cmd>vertical resize +5<CR>", desc = "resize +5" },
	{ "<leader>-", "<cmd>vertical resize -5<CR>", desc = "resize -5" },
	{ "<leader>v", "<C-W>v", desc = "split right" },
	{ "<leader>V", "<C-W>s", desc = "split below" },
	{ "<leader>q", desc = "quicklist" },
})

-- wk.add({
	-- { "<leader>/", group = "Ecovim" },
	-- { "<leader>/s", group = "Session" },
	-- { "<leader>//", "<cmd>Alpha<CR>", desc = "open dashboard" },
	-- { "<leader>/c", "<cmd>e $MYVIMRC<CR>", desc = "open config" },
	-- { "<leader>/i", "<cmd>Lazy<CR>", desc = "manage plugins" },
	-- { "<leader>/u", "<cmd>Lazy update<CR>", desc = "update plugins" },
-- })

-- wk.add({
-- 	{ "<leader>a", group = "Actions", mode = { "n", "v" } },
-- 	{ "<leader>an", "<cmd>set nonumber!<CR>", desc = "line numbers" },
-- 	{ "<leader>ar", "<cmd>set norelativenumber!<CR>", desc = "relative number" },
-- })

wk.add({
	{ "<leader>b", group = "Buffer" },
	{ "<leader>bs", group = "Sort" },
	{ "<leader>bc", '<cmd>lua require("utils").closeOtherBuffers()<CR>', desc = "Close but current" },
	-- { "<leader>bf", "<cmd>bfirst<CR>", desc = "First buffer" 
  -- },
})

wk.add({

  {"<leader>w", group = "Workspace"},
})

wk.add({
	{ "<leader>c", group = "LSP", mode = { "n", "v" } },
	{ "<leader>ca", desc = "code quick action", mode = { "n", "v" } },
	{ "<leader>cd", "<cmd>Trouble diagnostics toggle<CR>", desc = "diagnostics (Trouble)" },
	{ "<leader>cD", "<cmd>Telescope diagnostics wrap_results=true<CR>", desc = "workspace diagnostics" },
	{ "<leader>cf", desc = "format", mode = { "n", "v" } },
	{ "<leader>cl", desc = "line diagnostics" },
	{ "<leader>cr", desc = "rename" },
	{ "<leader>cR", desc = "structural replace" },
	{ "<leader>ct", "<cmd>LspToggleAutoFormat<CR>", desc = "toggle format on save" },
})

wk.add({
	{ "<leader>d", group = "Debug" },
	{ "<leader>da", desc = "attach" },
	{ "<leader>db", desc = "breakpoint" },
	{ "<leader>dc", desc = "continue" },
	{ "<leader>dC", desc = "close UI" },
	{ "<leader>dd", desc = "continue" },
	{ "<leader>dh", desc = "visual hover" },
	{ "<leader>di", desc = "step into" },
	{ "<leader>do", desc = "step over" },
	{ "<leader>dO", desc = "step out" },
	{ "<leader>dr", desc = "repl" },
	{ "<leader>ds", desc = "scopes" },
	{ "<leader>dt", desc = "terminate" },
	{ "<leader>dU", desc = "open UI" },
	{ "<leader>dv", desc = "log variable" },
	{ "<leader>dV", desc = "log variable above" },
	{ "<leader>dw", desc = "watches" },
})

wk.add({
	{ "<leader>g", group = "Git", mode = { "n", "v" } },
	{ "<leader>gg", group = "neoGit", mode = { "n", "v" } },
	{ "<leader>ga", "<cmd>!git add %:p<CR>", desc = "add current" },
	{ "<leader>gA", "<cmd>!git add .<CR>", desc = "add all" },
	{ "<leader>gb", "<cmd>BlameToggle window<CR>", desc = "blame" },
	{ "<leader>gB", "<cmd>Telescope git_branches<CR>", desc = "branches" },
	{ "<leader>gc", group = "Conflict" },
	{ "<leader>gh", group = "Hunk" },
	{ "<leader>ghr", desc = "reset hunk", mode = { "v" } },
	{ "<leader>ghs", desc = "stage hunk", mode = { "v" } },
	{ "<leader>gi", "<cmd>Octo issue list<CR>", desc = "Issues List" },
	{ "<leader>gl", group = "Log" },
	{
		"<leader>glA",
		"<cmd>lua require('plugins.telescope.pickers').my_git_commits()<CR>",
		desc = "commits (Telescope)",
	},
	{ "<leader>gla", "<cmd>LazyGitFilter<CR>", desc = "commits" },
	{
		"<leader>glC",
		"<cmd>lua require('plugins.telescope.pickers').my_git_bcommits()<CR>",
		desc = "buffer commits (Telescope)",
	},
	{ "<leader>glc", "<cmd>LazyGitFilterCurrentFile<CR>", desc = "buffer commits" },
	{ "<leader>gm", desc = "blame line" },
	{
		"<leader>gp",
		"<cmd>Octo pr list<CR>",
		desc = "Pull Requests List",
	},
	{ "<leader>gs", "<cmd>Telescope git_status<CR>", desc = "telescope status" },
	{ "<leader>gw", group = "Worktree" },
	{ "<leader>gww", desc = "worktrees" },
	{ "<leader>gwc", desc = "create worktree" },
})

wk.add({
	{ "<leader>p", group = "Project" },
	-- { "<leader>pf", desc = { "file" } },
	-- { "<leader>pw", desc = { "word" } },
	{
		"<leader>pl",
		"<cmd>lua require'telescope'.extensions.repo.cached_list{file_ignore_patterns={'/%.cache/', '/%.cargo/', '/%.local/', '/%timeshift/', '/usr/', '/srv/', '/%.oh%-my%-zsh', '/Library/', '/%.cocoapods/'}}<CR>",
		desc = "list",
	},
	-- {
	-- 	"<leader>pr",
	-- 	desc = { "refactor" },
	-- 	mode = { "v", "n" },
	-- },
	{
		"<leader>pt",
		"<cmd>TodoTrouble<CR>",
		desc = "todo",
	},
})

wk.add({
	{ "<leader>r", group = "Refactor", mode = { "n", "v" } },
})
-- Telescope
wk.add({
	{ "<leader>s", group = "Search" },
	{ "<leader>ss", group = "Search Symbol" },
	-- { "<leader>sc", "<cmd>Telescope colorscheme<CR>", desc = "color schemes" },
  -- { "<leader>sq", "<cmd>Telescope quickfix<CR>", desc = "Quickfix List" },
  { "<leader>f", group = "Find" },
  { "<leader>F", group = "Find from outside project" },
	-- { "<leader>sd", "<cmd>lua require('plugins.telescope.pickers').edit_neovim()<CR>", desc = "dotfiles" },
	-- { "<leader>sh", "<cmd>Telescope oldfiles hidden=true<CR>", desc = "file history" },
	-- { "<leader>sH", "<cmd>lua require('plugins.telescope').command_history()<CR>", desc = "command history" },
	-- { "<leader>ss", "<cmd>Telescope search_history theme=dropdown<CR>", desc = "search history" },
})
wk.add({ -- Notification
	{ "<leader>n", group = "Notification", mode = { "n" } },
})
-- Table mode For markdown?
wk.add({
	{ "<leader>t", group = "Table Mode", mode = { "n", "v" } },
	{ "<leader>tm", desc = { "toggle" } },
	{ "<leader>tt", desc = { "tableize" }, mode = { "n", "v" } },
})

wk.add({
	{ "<leader>s", "<cmd>'<,'>sort<CR>", desc = "sort", mode = { "v" } },
})

local function attach_markdown(bufnr)
	wk.add({
		{ "<leader>a", group = "Actions", buffer = bufnr },
		{ "<leader>am", "<cmd>MarkdownPreviewToggle<CR>", desc = "markdown preview", mode = "n", buffer = bufnr },
	})
end

local function attach_typescript(bufnr)
	wk.add({
		{ buffer = bufnr },
   { "<leader>c",   group = "LSP", },
    { "<leader>ce",  "<cmd>TSC<CR>",                      desc = "workspace errors (TSC)" },
    { "<leader>cF",  "<cmd>TSToolsFixAll<CR>",            desc = "fix all" },
    { "<leader>ci",  "<cmd>TSToolsAddMissingImports<CR>", desc = "import all" },
    { "<leader>co",  "<cmd>TSToolsOrganizeImports<CR>",   desc = "organize imports" },
    { "<leader>cs",  "<cmd>TSToolsSortImports<CR>",       desc = "sort imports" },
    { "<leader>cu",  "<cmd>TSToolsRemoveUnused<CR>",      desc = "remove unused" },
    { "<leader>cR",  "<cmd>TSToolsRenameFile<CR>",        desc = "rename file" },
    { "<leader>cF",  "<cmd>TSToolsFileReferences<CR>",    desc = "file references" },
	})
end

local function attach_npm(bufnr)
	wk.add({
		{ buffer = bufnr },
		{ "<leader>n", group = "NPM" },
		{ "<leader>nc", '<cmd>lua require("package-info").change_version()<CR>', desc = "change version" },
		{ "<leader>nd", '<cmd>lua require("package-info").delete()<CR>', desc = "delete package" },
		{ "<leader>nh", "<cmd>lua require('package-info').hide()<CR>", desc = "hide" },
		{ "<leader>ni", '<cmd>lua require("package-info").install()<CR>', desc = "install new package" },
		{ "<leader>nr", '<cmd>lua require("package-info").reinstall()<CR>', desc = "reinstall dependencies" },
		{ "<leader>ns", '<cmd>lua require("package-info").show()<CR>', desc = "show" },
		{ "<leader>nu", '<cmd>lua require("package-info").update()<CR>', desc = "update package" },
	})
end

local function attach_zen(bufnr)
	wk.add({
		{ "<leader>z", "<cmd>ZenMode<CR>", buffer = bufnr, desc = "zen", nowait = false, remap = false },
	})
end

local function attach_jest(bufnr)
	wk.add({
		{ buffer = bufnr },
		{ "<leader>j", group = "Jest" },
		{ "<leader>jf", "<cmd>lua require('neotest').run.run(vim.fn.expand('%'))<CR>", desc = "run current file" },
		{ "<leader>ji", "<cmd>lua require('neotest').summary.toggle()<CR>", desc = "toggle info panel" },
		{ "<leader>jj", "<cmd>lua require('neotest').run.run()<CR>", desc = "run nearest test" },
		{ "<leader>jl", "<cmd>lua require('neotest').run.run_last()<CR>", desc = "run last test" },
		{ "<leader>jo", "<cmd>lua require('neotest').output.open({ enter = true })<CR>", desc = "open test output" },
		{ "<leader>js", "<cmd>lua require('neotest').run.stop()<CR>", desc = "stop" },
	})
end

local function attach_spectre(bufnr)
	wk.add({
		{ buffer = bufnr },
		{ "<LocalLeader>r", desc = "Replace all" },
		{ "<LocalLeader>o", desc = "Show options" },
		{ "<LocalLeader>q", desc = "Send all to Quicklist" },
		{ "<LocalLeader>v", desc = "Change view mode" },
	})
end

local function attach_nvim_tree(bufnr)
	wk.add({
		{ buffer = bufnr },
		{ "<leader>=", "<cmd>NvimTreeResize +5<CR>", desc = "resize +5" },
		{ "<leader>-", "<cmd>NvimTreeResize -5<CR>", desc = "resize +5" },
	})
end

return {
	attach_markdown = attach_markdown,
	attach_typescript = attach_typescript,
	attach_npm = attach_npm,
	attach_zen = attach_zen,
	attach_jest = attach_jest,
	attach_spectre = attach_spectre,
	attach_nvim_tree = attach_nvim_tree,
}

================
File: lua/plugins/autopairs.lua
================
return {
  {
    'altermo/ultimate-autopair.nvim',
    event = { 'InsertEnter', 'CmdlineEnter' },
    branch = 'v0.6', --recommended as each new version will have breaking changes
    opts = {
      --Config goes here
    },
  },
  {
    'windwp/nvim-autopairs',
    enabled = true,
    event = "InsertEnter",
    config = function()
      local npairs = require('nvim-autopairs')
      npairs.setup()

      for _, i in ipairs(npairs.config.rules) do
        i.key_map = nil
      end
    end
  }
}
--
-- return {
--   {
--     'altermo/ultimate-autopair.nvim',
--     event = { 'InsertEnter', 'CmdlineEnter' },
--     branch = 'v0.6', --recommended as each new version will have breaking changes
--     opts = {
--       --Config goes here
--     },
--   },
--   {
--     'windwp/nvim-autopairs',
--     event = "InsertEnter",
--     config = function()
--       local npairs = require('nvim-autopairs')
--       npairs.setup()
--
--       local cmp_autopairs = require('nvim-autopairs.completion.cmp')
--       local cmp = require('cmp')
--       cmp.event:on(
--         'confirm_done',
--         cmp_autopairs.on_confirm_done()
--       )
--
--       for _, i in ipairs(npairs.config.rules) do
--         i.key_map = nil
--       end
--     end
--   }
-- }

================
File: lua/plugins/blame.lua
================
return {
  {
    "FabijanZulj/blame.nvim",
    config = function()
      require("blame").setup()
    end
  }
}

================
File: lua/plugins/blink.lua
================
-- return {
--   'saghen/blink.nvim',
--   build = 'cargo build --release', -- for delimiters
--   lazy = false,                    -- lazy loading handled internally
--   keys = {
--     -- chartoggle
--     {
--       '<C-;>',
--       function()
--         require('blink.chartoggle').toggle_char_eol(';')
--       end,
--       mode = { 'n', 'v' },
--       desc = 'Toggle ; at eol',
--     },
--     {
--       ',',
--       function()
--         require('blink.chartoggle').toggle_char_eol(',')
--       end,
--       mode = { 'n', 'v' },
--       desc = 'Toggle , at eol',
--     },
--
--     -- tree
--     { '<C-e>',     '<cmd>BlinkTree reveal<cr>',       desc = 'Reveal current file in tree' },
--     { '<leader>E', '<cmd>BlinkTree toggle<cr>',       desc = 'Reveal current file in tree' },
--     { '<leader>e', '<cmd>BlinkTree toggle-focus<cr>', desc = 'Toggle file tree focus' },
--   },
--   -- all modules handle lazy loading internally
--   lazy = false,
--   opts = {
--     chartoggle = { enabled = true },
--     indent = { enabled = true },
--     tree = { enabled = true }
--   }
-- }


return {
  {
    'saghen/blink.cmp',
    -- enabled = false,
    lazy = false, -- lazy loading handled internally
    version = "*",
    dependencies = {
      {
        "saghen/blink.compat",
        opts = { impersonate_nvim_cmp = true },
      },
      "rafamadriz/friendly-snippets",
      -- "giuxtaposition/blink-cmp-copilot",
      -- "David-Kunz/cmp-npm",
      {
        "L3MON4D3/LuaSnip",
        version = "v2.*",
        build = "make install_jsregexp",
        config = function()
          require("luasnip.loaders.from_vscode").lazy_load({
            paths = { vim.fn.stdpath("config") .. "/snippets" },
          })
        end,
      },
    },

    -- use a release tag to download pre-built binaries
    -- version = 'v0.*',
    -- OR build from source, requires nightly: https://rust-lang.github.io/rustup/concepts/channels.html#working-with-nightly-rust
    build = 'cargo build --release',
    -- If you use nix, you can build from source using latest nightly rust with:
    -- build = 'nix run .#build-plugin',

    ---@module 'blink.cmp'
    opts = {
      -- 'default' for mappings similar to built-in completion
      -- 'super-tab' for mappings similar to vscode (tab to accept, arrow keys to navigate)
      -- 'enter' for mappings similar to 'super-tab' but with 'enter' to accept
      -- see the "default configuration" section below for full documentation on how to define
      -- your own keymap.
      keymap = {
        preset = 'super-tab',

        ['<C-space>'] = { 'show', 'show_documentation', 'hide_documentation' },
        ["<S-k>"] = { "scroll_documentation_up", "fallback" },
        ["<S-j>"] = { "scroll_documentation_down", "fallback" },
        ['<PageUp>'] = { 'scroll_documentation_up', 'fallback' },
        ['<PageDown>'] = { 'scroll_documentation_down', 'fallback' },
        ['<A-CR>'] = { 'accept', 'fallback' },
      },

      snippets = {
        preset = 'luasnip',
        expand = function(snippet) require('luasnip').lsp_expand(snippet) end,
        active = function(filter)
          if filter and filter.direction then
            return require('luasnip').jumpable(filter.direction)
          end
          return require('luasnip').in_snippet()
        end,
        jump = function(direction) require('luasnip').jump(direction) end,
      },

      sources = {
        default = {
          'lsp',
          'path',
          'snippets',
          'buffer',
          'codecompanion',
          -- 'copilot',
        },
        -- cmdline = {},

        providers = {
          codecompanion = {
            name = "CodeCompanion",
            module = "codecompanion.providers.completion.blink",
          },
          -- copilot = {
          --   name = "copilot",
          --   module = "blink-cmp-copilot",
          --   score_offset = 100,
          --   async = true,
          --   transform_items = function(_, items)
          --     local CompletionItemKind = require("blink.cmp.types").CompletionItemKind
          --     local kind_idx = #CompletionItemKind + 1
          --     CompletionItemKind[kind_idx] = "Copilot"
          --     for _, item in ipairs(items) do
          --       item.kind = kind_idx
          --     end
          --     return items
          --   end,
          -- },
          -- npm = {
          --   name = 'npm',
          --   module = 'blink.compat.source',
          --
          --   -- all blink.cmp source config options work as normal:
          --   -- score_offset = -3,
          --
          --   opts = {
          --     ignore = {},
          --     only_semantic_versions = false,
          --   },
          -- },
        }
      },

      completion = {
        trigger = {
          -- When true, will show the completion window after typing a trigger character
          show_on_trigger_character = true,
          -- When both this and show_on_trigger_character are true, will show the completion window
          -- when the cursor comes after a trigger character when entering insert mode
          show_on_insert_on_trigger_character = true,
          -- List of trigger characters (on top of `show_on_blocked_trigger_characters`) that won't trigger
          -- the completion window when the cursor comes after a trigger character when
          -- entering insert mode/accepting an item
          show_on_x_blocked_trigger_characters = { "'", '"', '(', '{' },
          -- or a function, similar to show_on_blocked_trigger_character
        },
        menu = {
          border = EcoVim.ui.float.border,
          draw = {
            columns = { { "label", "label_description", gap = 1 }, { "kind_icon", "kind", gap = 1 } },
            treesitter = {},
          },
        },

        -- experimental auto-brackets support
        accept = {
          auto_brackets = { enabled = false },
        },

        documentation = {
          auto_show = false,
          auto_show_delay_ms = 500,
          treesitter_highlighting = true,
          window = {
            border = EcoVim.ui.float.border,
          }
        },

        ghost_text = {
          enabled = false,
        },

      },

      signature = {
        enabled = true,
        window = {
          border = EcoVim.ui.float.border,
        }
      },
    },
    -- allows extending the enabled_providers array elsewhere in your config
    -- without having to redefine it
    opts_extend = { "sources.default" },

    appearance = {
      kind_icons = {
        Copilot = "",
        Text = '󰉿',
        Method = '󰊕',
        Function = '󰊕',
        Constructor = '󰒓',

        Field = '󰜢',
        Variable = '󰆦',
        Property = '󰖷',

        Class = '󱡠',
        Interface = '󱡠',
        Struct = '󱡠',
        Module = '󰅩',

        Unit = '󰪚',
        Value = '󰦨',
        Enum = '󰦨',
        EnumMember = '󰦨',

        Keyword = '󰻾',
        Constant = '󰏿',

        Snippet = '󱄽',
        Color = '󰏘',
        File = '󰈔',
        Reference = '󰬲',
        Folder = '󰉋',
        Event = '󱐋',
        Operator = '󰪚',
        TypeParameter = '󰬛',
      },

    },
  },

  -- LSP servers and clients communicate what features they support through "capabilities".
  --  By default, Neovim support a subset of the LSP specification.
  --  With blink.cmp, Neovim has *more* capabilities which are communicated to the LSP servers.
  --  Explanation from TJ: https://youtu.be/m8C0Cq9Uv9o?t=1275
  --
  -- This can vary by config, but in general for nvim-lspconfig:
}

================
File: lua/plugins/bqf-init.lua
================
return {
  {
    -- The goal of nvim-bqf is to make Neovim's quickfix window better.
    "kevinhwang91/nvim-bqf",
    ft = "qf",
    init = function()
      -- Configure the UI aspect of the quickfix window
      local fn = vim.fn

      function _G.qftf(info)
        local items
        local ret = {}
        -- The name of item in list is based on the directory of quickfix window.
        -- Change the directory for quickfix window make the name of item shorter.
        -- It's a good opportunity to change current directory in quickfixtextfunc :)
        --
        -- local alterBufnr = fn.bufname('#') -- alternative buffer is the buffer before enter qf window
        -- local root = getRootByAlterBufnr(alterBufnr)
        -- vim.cmd(('noa lcd %s'):format(fn.fnameescape(root)))
        --
        if info.quickfix == 1 then
          items = fn.getqflist({ id = info.id, items = 0 }).items
        else
          items = fn.getloclist(info.winid, { id = info.id, items = 0 }).items
        end
        local filename_chars_limit = 60
        local fnameFmt1, fnameFmt2 = "%-" .. filename_chars_limit .. "s", "…%." .. (filename_chars_limit - 1) .. "s"
        local validFmt = "%s │%5d:%-3d│%s %s"
        for i = info.start_idx, info.end_idx do
          local e = items[i]
          local fname = ""
          local str
          if e.valid == 1 then
            if e.bufnr > 0 then
              fname = fn.bufname(e.bufnr)
              if fname == "" then
                fname = "[No Name]"
              else
                fname = fname:gsub("^" .. vim.env.HOME, "~")
              end
              -- char in fname may occur more than 1 width, ignore this issue in order to keep performance
              if #fname <= filename_chars_limit then
                fname = fnameFmt1:format(fname)
              else
                fname = fnameFmt2:format(fname:sub(1 - filename_chars_limit))
              end
            end
            local lnum = e.lnum > 99999 and -1 or e.lnum
            local col = e.col > 999 and -1 or e.col
            local qtype = e.type == "" and "" or " " .. e.type:sub(1, 1):upper()
            str = validFmt:format(fname, lnum, col, qtype, e.text)
          else
            str = e.text
          end
          table.insert(ret, str)
        end
        return ret
      end

      vim.o.qftf = "{info -> v:lua._G.qftf(info)}"
    end,
  },
}

================
File: lua/plugins/bufferline.lua
================
return {
	{
		"akinsho/bufferline.nvim",
		event = "VeryLazy",
		dependencies = {
			"nvim-tree/nvim-web-devicons",
			{
				"echasnovski/mini.bufremove",
				version = "*",
				config = function()
					require("mini.bufremove").setup({
						silent = true,
					})
				end,
			},
		},
		config = function()
			local bufferline = require("bufferline")
			bufferline.setup({
				options = {
					close_command = function(n)
						require("mini.bufremove").delete(n, false)
					end,
					right_mouse_command = function(n)
						require("mini.bufremove").delete(n, false)
					end,
					show_buffer_close_icons = false,
					separator_style = { "|", "|" },
					always_show_bufferline = true,
					style_preset = bufferline.style_preset.no_italic,
					numbers = function(opts)
						return string.format("%s", opts.ordinal)
					end,
					custom_filter = function(buf_number)
						-- filter out filetypes you don't want to see
						if vim.bo[buf_number].filetype ~= "qf" then
							return true
						end
					end,
					offsets = {
						{
							filetype = "NvimTree",
							text = "File Explorer",
							highlight = "EcovimNvimTreeTitle",
							text_align = "center",
							separator = true,
						},
					},
				},
			})
		end,
		keys = {
			-- { "<tab>", "<cmd>BufferLineCycleNext<CR>", desc = "Bufferline cycle next buffer" },
			-- { "<S-tab>", "<cmd>BufferLineCyclePrev<CR>", desc = "Bufferline cycle prev buffer" },
			{ "<C-M-l>", "<cmd>BufferLineCycleNext<CR>", desc = "Bufferline cycle next buffer" },
			{ "<C-M-h>", "<cmd>BufferLineCyclePrev<CR>", desc = "Bufferline cycle prev buffer" },
			{ "<C-M-Right>", "<cmd>BufferLineCycleNext<CR>", desc = "Bufferline cycle next buffer" },
			{ "<C-M-Left>", "<cmd>BufferLineCyclePrev<CR>", desc = "Bufferline cycle prev buffer" },
			{ "L", "<cmd>BufferLineCycleNext<CR>", desc = "Bufferline cycle next buffer" },
			{ "H", "<cmd>BufferLineCyclePrev<CR>", desc = "Bufferline cycle prev buffer" },
			{ "<S-Right>", "<cmd>BufferLineCycleNext<CR>", desc = "Bufferline cycle next buffer" },
			{ "<S-Left>", "<cmd>BufferLineCyclePrev<CR>", desc = "Bufferline cycle prev buffer" },
			{ "<leader>bp", "<cmd>BufferLineTogglePin<CR>", desc = "[B]ufferline [P]in Toggle" },
		},
	},
}

================
File: lua/plugins/cmp.lua
================
-- ╭──────────────────────────────────────────────────────────╮
-- │ Setup                                                    │
-- ╰──────────────────────────────────────────────────────────╯
local source_mapping = {
	npm = EcoVim.icons.terminal .. "NPM",
	cmp_tabnine = EcoVim.icons.light,
	Copilot = EcoVim.icons.copilot,
	Codeium = EcoVim.icons.codeium,
	nvim_lsp = EcoVim.icons.stack .. "LSP",
	buffer = EcoVim.icons.buffer .. "BUF",
	nvim_lua = EcoVim.icons.bomb,
	luasnip = EcoVim.icons.snippet .. "SNP",
	calc = EcoVim.icons.calculator,
	path = EcoVim.icons.folderOpen2,
	treesitter = EcoVim.icons.tree,
	zsh = EcoVim.icons.terminal .. "ZSH",
}

local buffer_option = {
	-- Complete from all visible buffers (splits)
	get_bufnrs = function()
		local bufs = {}
		for _, win in ipairs(vim.api.nvim_list_wins()) do
			bufs[vim.api.nvim_win_get_buf(win)] = true
		end
		return vim.tbl_keys(bufs)
	end,
}

-- ╭──────────────────────────────────────────────────────────╮
-- │ Tabnine Setup                                            │
-- ╰──────────────────────────────────────────────────────────╯

return {
	{
		"hrsh7th/nvim-cmp",
    enabled = false,
		version = false,
		event = "InsertEnter",
		config = function()
			local cmp = require("cmp")

			local types = require("cmp.types")

			local _, tabnine = pcall(require, "cmp_tabnine.config")

			-- ╭──────────────────────────────────────────────────────────╮
			-- │ Utils                                                    │
			-- ╰──────────────────────────────────────────────────────────╯
			local check_backspace = function()
				local col = vim.fn.col(".") - 1
				return col == 0 or vim.fn.getline("."):sub(col, col):match("%s")
			end

			local function deprioritize_snippet(entry1, entry2)
				if entry1:get_kind() == types.lsp.CompletionItemKind.Snippet then
					return false
				end
				if entry2:get_kind() == types.lsp.CompletionItemKind.Snippet then
					return true
				end
			end

			local function limit_lsp_types(entry, ctx)
				local kind = entry:get_kind()
				local line = ctx.cursor.line
				local col = ctx.cursor.col
				local char_before_cursor = string.sub(line, col - 1, col - 1)
				local char_after_dot = string.sub(line, col, col)

				if char_before_cursor == "." and char_after_dot:match("[a-zA-Z]") then
					if
						kind == types.lsp.CompletionItemKind.Method
						or kind == types.lsp.CompletionItemKind.Field
						or kind == types.lsp.CompletionItemKind.Property
					then
						return true
					else
						return false
					end
				elseif string.match(line, "^%s+%w+$") then
					if
						kind == types.lsp.CompletionItemKind.Function
						or kind == types.lsp.CompletionItemKind.Variable
					then
						return true
					else
						return false
					end
				end

				return true
			end

			local has_words_before = function()
				if vim.api.nvim_buf_get_option(0, "buftype") == "prompt" then
					return false
				end
				local line, col = unpack(vim.api.nvim_win_get_cursor(0))
				return col ~= 0
					and vim.api.nvim_buf_get_text(0, line - 1, 0, line - 1, col, {})[1]:match("^%s*$") == nil
			end

			--- Get completion context, i.e., auto-import/target module location.
			--- Depending on the LSP this information is stored in different parts of the
			--- lsp.CompletionItem payload. The process to find them is very manual: log the payloads
			--- And see where useful information is stored.
			local function get_lsp_completion_context(completion, source)
				local ok, source_name = pcall(function()
					return source.source.client.config.name
				end)
				if not ok then
					return nil
				end
				if source_name == "tsserver" or source_name == "typescript-tools" then
					return completion.detail
				elseif source_name == "pyright" then
					if completion.labelDetails ~= nil then
						return completion.labelDetails.description
					end
				end
			end

			local luasnip = require("luasnip")
			local lspkind = require("lspkind")
			require("cmp_git").setup()
			require("luasnip/loaders/from_vscode").lazy_load()

			cmp.setup({
				snippet = {
					expand = function(args)
						luasnip.lsp_expand(args.body)
					end,
				},
				mapping = cmp.mapping.preset.insert({
					["<C-k>"] = cmp.mapping.select_prev_item(),
					["<C-j>"] = cmp.mapping.select_next_item(),
					["<C-d>"] = cmp.mapping(cmp.mapping.scroll_docs(-2), { "i", "c" }),
					["<C-f>"] = cmp.mapping(cmp.mapping.scroll_docs(2), { "i", "c" }),
					["<C-Space>"] = cmp.mapping(cmp.mapping.complete(), { "i", "c" }),
					["<C-y>"] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
					["<C-e>"] = cmp.mapping({
						i = cmp.mapping.abort(),
						c = cmp.mapping.close(),
					}),
					["<CR>"] = cmp.mapping.confirm({
						-- this is the important line for Copilot
						behavior = cmp.ConfirmBehavior.Replace,
						select = false,-- EcoVim.plugins.completion.select_first_on_enter,
					}),
					["<Tab>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							cmp.select_next_item()
						elseif cmp.visible() and has_words_before() then
							cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
						elseif luasnip.expandable() then
							luasnip.expand()
						elseif luasnip.expand_or_jumpable() then
							luasnip.expand_or_jump()
						elseif check_backspace() then
							fallback()
						else
							fallback()
						end
					end, {
						"i",
						"s",
					}),
					["<S-Tab>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							cmp.select_prev_item()
						elseif luasnip.jumpable(-1) then
							luasnip.jump(-1)
						else
							fallback()
						end
					end, {
						"i",
						"s",
					}),
					["<C-l>"] = cmp.mapping(function(fallback)
						if luasnip.expandable() then
							luasnip.expand()
						elseif luasnip.expand_or_jumpable() then
							luasnip.expand_or_jump()
						else
							fallback()
						end
					end, {
						"i",
						"s",
					}),
					["<C-h>"] = cmp.mapping(function(fallback)
						if luasnip.jumpable(-1) then
							luasnip.jump(-1)
						else
							fallback()
						end
					end, {
						"i",
						"s",
					}),
				}),
				formatting = {
					format = function(entry, vim_item)
						-- Set the highlight group for the Codeium source
						if entry.source.name == "codeium" then
							vim_item.kind_hl_group = "CmpItemKindCopilot"
						end

						-- Get the item with kind from the lspkind plugin
						local item_with_kind = require("lspkind").cmp_format({
							mode = "symbol_text",
							maxwidth = 50,
							symbol_map = source_mapping,
						})(entry, vim_item)

						item_with_kind.kind = lspkind.symbolic(item_with_kind.kind, { with_text = true })
						item_with_kind.menu = source_mapping[entry.source.name]
						item_with_kind.menu = vim.trim(item_with_kind.menu or "")
						item_with_kind.abbr = string.sub(item_with_kind.abbr, 1, item_with_kind.maxwidth)

						if entry.source.name == "cmp_tabnine" then
							if entry.completion_item.data ~= nil and entry.completion_item.data.detail ~= nil then
								item_with_kind.kind = " "
									.. lspkind.symbolic("Event", { with_text = false })
									.. " TabNine"
								item_with_kind.menu = item_with_kind.menu .. entry.completion_item.data.detail
							else
								item_with_kind.kind = " "
									.. lspkind.symbolic("Event", { with_text = false })
									.. " TabNine"
								item_with_kind.menu = item_with_kind.menu .. " TBN"
							end
						end

						local completion_context = get_lsp_completion_context(entry.completion_item, entry.source)
						if completion_context ~= nil and completion_context ~= "" then
							item_with_kind.menu = item_with_kind.menu .. [[ -> ]] .. completion_context
						end

						if string.find(vim_item.kind, "Color") then
							-- Override for plugin purposes
							vim_item.kind = "Color"
							local tailwind_item = require("cmp-tailwind-colors").format(entry, vim_item)
							item_with_kind.menu = lspkind.symbolic("Color", { with_text = false }) .. " Color"
							item_with_kind.kind = " " .. tailwind_item.kind
						end

						return item_with_kind
					end,
				},
				-- You should specify your *installed* sources.
				sources = {
					{
						name = "copilot",
						priority = 10,
						max_item_count = 3,
					},
					{
						name = "nvim_lsp",
						priority = 9,
						-- Limits LSP results to specific types based on line context (Fields, Methods, Variables)
						entry_filter = limit_lsp_types,
					},
					{ name = "npm", priority = 8 },
					{ name = "codeium", priority = 8 },
					{ name = "git", priority = 7 },
					{ name = "cmp_tabnine", priority = 7 },
					{
						name = "luasnip",
						priority = 7,
						max_item_count = 5,
					},
					{
						name = "buffer",
						priority = 7,
						keyword_length = 5,
						max_item_count = 10,
						option = buffer_option,
					},
					{ name = "nvim_lua", priority = 5 },
					{ name = "path", priority = 4 },
					{ name = "calc", priority = 3 },
				},
				sorting = {
					priority_weight = 2,
					comparators = {
						deprioritize_snippet,
						-- require("copilot_cmp.comparators").prioritize or function() end,
            cmp.config.compare.kind,
						cmp.config.compare.exact,
						cmp.config.compare.locality,
						cmp.config.compare.score,
						cmp.config.compare.recently_used,
						cmp.config.compare.offset,
						cmp.config.compare.sort_text,
						cmp.config.compare.order,
					},
				},
				confirm_opts = {
					behavior = cmp.ConfirmBehavior.Replace,
					select = false,
				},
				window = {
					completion = cmp.config.window.bordered({
						winhighlight = "NormalFloat:NormalFloat,FloatBorder:FloatBorder",
					}),
					documentation = cmp.config.window.bordered({
						winhighlight = "NormalFloat:NormalFloat,FloatBorder:FloatBorder",
					}),
				},
				experimental = {
					ghost_text = true,
				},
				performance = {
					max_view_entries = 100,
				},
			})
		end,
		dependencies = {
			"hrsh7th/cmp-nvim-lua",
			"hrsh7th/cmp-nvim-lsp",
			"hrsh7th/cmp-buffer",
			"hrsh7th/cmp-path",
			"hrsh7th/cmp-cmdline",
			"hrsh7th/cmp-calc",
			"onsails/lspkind-nvim",
			"saadparwaiz1/cmp_luasnip",
			{
				"L3MON4D3/LuaSnip",
				dependencies = "rafamadriz/friendly-snippets",
				build = "make install_jsregexp",
				config = function()
					require("luasnip.loaders.from_vscode").lazy_load({
						paths = { vim.fn.stdpath("config") .. "/snippets" },
					})
				end,
			},
			-- {
			-- 	cond = EcoVim.plugins.ai.tabnine.enabled,
			-- 	"tzachar/cmp-tabnine",
			-- 	build = "./install.sh",
			-- },
			{
				"David-Kunz/cmp-npm",
				opts = {
					ignore = {},
					only_semantic_versions = false,
				},
			},
			{
				"zbirenbaum/copilot-cmp",
				cond = false, -- EcoVim.plugins.ai.copilot.enabled,
				config = function()
					require("copilot_cmp").setup()
				end,
			},
			"petertriho/cmp-git",
			{
				"js-everts/cmp-tailwind-colors",
				config = true,
			},
		},
	},
}

================
File: lua/plugins/codesnap.lua
================
return {
  {
    "mistricky/codesnap.nvim",
    build = "make build_generator",
    cmd = { "CodeSnap", "CodeSnapPreviewOn" },
    opts = {
    },
    config = function() 
      require("codesnap").setup({
        bg_color = "#535c68",
        mac_window_bar = false,
        title = "CodeSnap.nvim",
        code_font_family = "CaskaydiaCove Nerd Font",
        watermark_font_family = "Pacifico",
        watermark = "",
        bg_theme = "default",
        breadcrumbs_separator = "/",
        has_breadcrumbs = true,
        has_line_number = true,
        show_workspace = false,
        min_width = 0,
        bg_x_padding = 0,
        bg_y_padding = 0,
        save_path = os.getenv("XDG_PICTURES_DIR") or (os.getenv("HOME").. "/Pictures"),
      })
    end,
    keys = {
      { "<leader>cYy", "<Esc><cmd>CodeSnap<cr>", mode = "x", desc = "Save selected code snapshot into clipboard" },
      { "<leader>cYY", "<Esc><cmd>CodeSnapSave<cr>", mode = "x", desc = "Save selected code snapshot in ~/Pictures" },
    },
  },
}

================
File: lua/plugins/dap.lua
================
return {
  {
    "szw/vim-maximizer",
    cmd = "MaximizerToggle",
  },
  {
    "mfussenegger/nvim-dap",
    config = function()
      local present_dapui, dapui = pcall(require, "dapui")
      local present_dap, dap = pcall(require, "dap")
      local present_virtual_text, dap_vt = pcall(require, "nvim-dap-virtual-text")
      local present_dap_utils, dap_utils = pcall(require, "dap.utils")
      local keymap = vim.keymap.set
      local opts = { noremap = true, silent = true }

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ DAP Virtual Text Setup                                   │
      -- ╰──────────────────────────────────────────────────────────╯
      dap_vt.setup({
        enabled = true,                        -- enable this plugin (the default)
        enabled_commands = true,               -- create commands DapVirtualTextEnable, DapVirtualTextDisable, DapVirtualTextToggle, (DapVirtualTextForceRefresh for refreshing when debug adapter did not notify its termination)
        highlight_changed_variables = true,    -- highlight changed values with NvimDapVirtualTextChanged, else always NvimDapVirtualText
        highlight_new_as_changed = false,      -- highlight new variables in the same way as changed variables (if highlight_changed_variables)
        show_stop_reason = true,               -- show stop reason when stopped for exceptions
        commented = false,                     -- prefix virtual text with comment string
        only_first_definition = true,          -- only show virtual text at first definition (if there are multiple)
        all_references = false,                -- show virtual text on all all references of the variable (not only definitions)
        filter_references_pattern = "<module", -- filter references (not definitions) pattern when all_references is activated (Lua gmatch pattern, default filters out Python modules)
        -- Experimental Features:
        virt_text_pos = "eol",                 -- position of virtual text, see `:h nvim_buf_set_extmark()`
        all_frames = false,                    -- show virtual text for all stack frames not only current. Only works for debugpy on my machine.
        virt_lines = false,                    -- show virtual lines instead of virtual text (will flicker!)
        virt_text_win_col = nil,               -- position the virtual text at a fixed window column (starting from the first text column) ,
      })

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ DAP UI Setup                                             │
      -- ╰──────────────────────────────────────────────────────────╯
      dapui.setup({
        icons = { expanded = "▾", collapsed = "▸" },
        mappings = {
          -- Use a table to apply multiple mappings
          expand = { "<CR>", "<2-LeftMouse>" },
          open = "o",
          remove = "d",
          edit = "e",
          repl = "r",
          toggle = "t",
        },
        -- Expand lines larger than the window
        -- Requires >= 0.7
        expand_lines = vim.fn.has("nvim-0.7"),
        -- Layouts define sections of the screen to place windows.
        -- The position can be "left", "right", "top" or "bottom".
        -- The size specifies the height/width depending on position. It can be an Int
        -- or a Float. Integer specifies height/width directly (i.e. 20 lines/columns) while
        -- Float value specifies percentage (i.e. 0.3 - 30% of available lines/columns)
        -- Elements are the elements shown in the layout (in order).
        -- Layouts are opened in order so that earlier layouts take priority in window sizing.
        layouts = {
          {
            elements = {
              -- Elements can be strings or table with id and size keys.
              { id = "scopes", size = 0.25 },
              "breakpoints",
              "watches",
            },
            size = 40, -- 40 columns
            position = "left",
          },
          {
            elements = {
              "repl",
              "console",
            },
            size = 0.25, -- 25% of total lines
            position = "bottom",
          },
        },
        floating = {
          max_height = nil,                             -- These can be integers or a float between 0 and 1.
          max_width = nil,                              -- Floats will be treated as percentage of your screen.
          border = EcoVim.ui.float.border or "rounded", -- Border style. Can be "single", "double" or "rounded"
          mappings = {
            close = { "q", "<Esc>" },
          },
        },
        windows = { indent = 1 },
        render = {
          max_type_length = nil, -- Can be integer or nil.
        },
      })

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ DAP Setup                                                │
      -- ╰──────────────────────────────────────────────────────────╯
      dap.set_log_level("TRACE")

      -- Automatically open UI
      dap.listeners.before.attach["dapui_config"] = function()
        dapui.open()
      end
      dap.listeners.before.launch["dapui_config"] = function()
        dapui.open()
      end
      dap.listeners.after.event_initialized["dapui_config"] = function()
        dapui.open()
      end
      dap.listeners.before.event_terminated["dapui_config"] = function()
        dapui.close()
      end
      dap.listeners.before.event_exited["dapui_config"] = function()
        dapui.close()
      end

      -- Enable virtual text
      vim.g.dap_virtual_text = true

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ Icons                                                    │
      -- ╰──────────────────────────────────────────────────────────╯
      vim.fn.sign_define("DapBreakpoint", { text = "🟥", texthl = "", linehl = "", numhl = "" })
      vim.fn.sign_define("DapStopped", { text = "⭐️", texthl = "", linehl = "", numhl = "" })

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ Keybindings                                              │
      -- ╰──────────────────────────────────────────────────────────╯
      keymap("n", "<Leader>da", "<CMD>lua require('dap').continue()<CR>", opts)
      keymap("n", "<Leader>db", "<CMD>lua require('dap').toggle_breakpoint()<CR>", opts)
      keymap("n", "<Leader>dd", "<CMD>lua require('dap').continue()<CR>", opts)
      keymap("n", "<Leader>dh", "<CMD>lua require('dapui').eval()<CR>", opts)
      keymap("n", "<Leader>di", "<CMD>lua require('dap').step_into()<CR>", opts)
      keymap("n", "<Leader>do", "<CMD>lua require('dap').step_out()<CR>", opts)
      keymap("n", "<Leader>dO", "<CMD>lua require('dap').step_over()<CR>", opts)
      keymap("n", "<Leader>dt", "<CMD>lua require('dap').terminate()<CR>", opts)
      keymap("n", "<Leader>du", "<CMD>lua require('dapui').open()<CR>", opts)
      keymap("n", "<Leader>dc", "<CMD>lua require('dapui').close()<CR>", opts)

      keymap("n", "<Leader>dw", "<CMD>lua require('dapui').float_element('watches', { enter = true })<CR>", opts)
      keymap("n", "<Leader>ds", "<CMD>lua require('dapui').float_element('scopes', { enter = true })<CR>", opts)
      keymap("n", "<Leader>dr", "<CMD>lua require('dapui').float_element('repl', { enter = true })<CR>", opts)

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ Adapters                                                 │
      -- ╰──────────────────────────────────────────────────────────╯

      -- VSCODE JS (Node/Chrome/Terminal/Jest)
      require("dap-vscode-js").setup({
        debugger_path = vim.fn.stdpath("data") .. "/mason/packages/js-debug-adapter",
        debugger_cmd = { "js-debug-adapter" },
        adapters = { "chrome", "pwa-node", "pwa-chrome", "pwa-msedge", "node-terminal", "pwa-extensionHost" },
      })

      -- ╭──────────────────────────────────────────────────────────╮
      -- │ Configurations                                           │
      -- ╰──────────────────────────────────────────────────────────╯
      local exts = {
        "javascript",
        "typescript",
        "javascriptreact",
        "typescriptreact",
        "vue",
        "svelte",
      }

      for i, ext in ipairs(exts) do
        dap.configurations[ext] = {
          {
            type = "pwa-chrome",
            request = "launch",
            name = "Launch Chrome with \"localhost\"",
            url = function()
              local co = coroutine.running()
              return coroutine.create(function()
                vim.ui.input({ prompt = 'Enter URL: ', default = 'http://localhost:3000' }, function(url)
                  if url == nil or url == '' then
                    return
                  else
                    coroutine.resume(co, url)
                  end
                end)
              end)
            end,
            port = 9222,
            webRoot = vim.fn.getcwd(),
            protocol = 'inspector',
            sourceMaps = true,
            userDataDir = false,
            skipFiles = { "<node_internals>/**", "node_modules/**", "${workspaceFolder}/node_modules/**" },
            resolveSourceMapLocations = {
              "${workspaceFolder}/apps/**/**",
              "${workspaceFolder}/**",
              "!**/node_modules/**",
            }
          },
          {
            type = "pwa-node",
            request = "launch",
            name = "Launch Current File (pwa-node)",
            cwd = vim.fn.getcwd(),
            args = { "${file}" },
            sourceMaps = true,
            protocol = "inspector",
            runtimeExecutable = "npm",
            runtimeArgs = {
              "run-script", "dev"
            },
            resolveSourceMapLocations = {
              "${workspaceFolder}/**",
              "!**/node_modules/**",
            }

          },
          {
            type = "pwa-node",
            request = "launch",
            name = "Launch Current File (pwa-node with ts-node)",
            cwd = vim.fn.getcwd(),
            runtimeArgs = { "--loader", "ts-node/esm" },
            runtimeExecutable = "node",
            args = { "${file}" },
            sourceMaps = true,
            protocol = "inspector",
            skipFiles = { "<node_internals>/**", "node_modules/**" },
            resolveSourceMapLocations = {
              "${workspaceFolder}/**",
              "!**/node_modules/**",
            },
          },
          {
            type = "pwa-node",
            request = "launch",
            name = "Launch Test Current File (pwa-node with jest)",
            cwd = vim.fn.getcwd(),
            runtimeArgs = { "${workspaceFolder}/node_modules/.bin/jest" },
            runtimeExecutable = "node",
            args = { "${file}", "--coverage", "false" },
            rootPath = "${workspaceFolder}",
            sourceMaps = true,
            console = "integratedTerminal",
            internalConsoleOptions = "neverOpen",
            skipFiles = { "<node_internals>/**", "node_modules/**" },
          },
          {
            type = "pwa-node",
            request = "launch",
            name = "Launch Test Current File (pwa-node with vitest)",
            cwd = vim.fn.getcwd(),
            program = "${workspaceFolder}/node_modules/vitest/vitest.mjs",
            args = { "--inspect-brk", "--threads", "false", "run", "${file}" },
            autoAttachChildProcesses = true,
            smartStep = true,
            console = "integratedTerminal",
            skipFiles = { "<node_internals>/**", "node_modules/**" },
          },
          {
            type = "pwa-node",
            request = "launch",
            name = "Launch Test Current File (pwa-node with deno)",
            cwd = vim.fn.getcwd(),
            runtimeArgs = { "test", "--inspect-brk", "--allow-all", "${file}" },
            runtimeExecutable = "deno",
            attachSimplePort = 9229,
          },
          {
            type = "pwa-chrome",
            request = "attach",
            name = "Attach Program (pwa-chrome, select port)",
            program = "${file}",
            cwd = vim.fn.getcwd(),
            sourceMaps = true,
            protocol = 'inspector',
            port = function()
              return vim.fn.input("Select port: ", 9222)
            end,
            webRoot = "${workspaceFolder}",
            skipFiles = { "<node_internals>/**", "node_modules/**" },
          },
          {
            type = "pwa-node",
            request = "attach",
            name = "Attach Program (pwa-node, select pid)",
            cwd = vim.fn.getcwd(),
            processId = dap_utils.pick_process,
            skipFiles = { "<node_internals>/**" },
          },
        }
      end
    end,
    keys = {
      "<Leader>da",
      "<Leader>db",
      "<Leader>dc",
      "<Leader>dd",
      "<Leader>dh",
      "<Leader>di",
      "<Leader>do",
      "<Leader>dO",
      "<Leader>dt",
    },
    dependencies = {
      "theHamsta/nvim-dap-virtual-text",
      "rcarriga/nvim-dap-ui",
      "mxsdev/nvim-dap-vscode-js",
      {
        "LiadOz/nvim-dap-repl-highlights",
        config = true,
        dependencies = {
          "mfussenegger/nvim-dap",
          "nvim-treesitter/nvim-treesitter",
        },
        build = function()
          if not require("nvim-treesitter.parsers").has_parser("dap_repl") then
            vim.cmd(":TSInstall dap_repl")
          end
        end,
      },
    },
  },
}

================
File: lua/plugins/dressing.lua
================
return {
  {
    "stevearc/dressing.nvim",
    event = "VeryLazy",
    dependencies = "MunifTanjim/nui.nvim",
    opts = {
      input = {
        -- Set to false to disable the vim.ui.input implementation
        enabled = true,

        -- Default prompt string
        default_prompt = "Input:",

        -- Can be 'left', 'right', or 'center'
        prompt_align = "left",

        -- When true, <Esc> will close the modal
        insert_only = true,

        -- When true, input will start in insert mode.
        start_in_insert = true,

        -- These are passed to nvim_open_win
        border = EcoVim.ui.float.border or "rounded",
        -- 'editor' and 'win' will default to being centered
        relative = "cursor",

        -- These can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
        prefer_width = 10,
        width = nil,
        -- min_width and max_width can be a list of mixed types.
        -- min_width = {20, 0.2} means "the greater of 20 columns or 20% of total"
        max_width = { 140, 0.9 },
        min_width = { 10, 0.1 },

        win_options = {
          -- Window transparency (0-100)
          winblend = 10,
          -- Change default highlight groups (see :help winhl)
          winhighlight = "",
        },

        -- Set to `false` to disable
        mappings = {
          n = {
            ["<Esc>"] = "Close",
            ["<CR>"] = "Confirm",
          },
          i = {
            ["<C-c>"] = "Close",
            ["<CR>"] = "Confirm",
            ["<Up>"] = "HistoryPrev",
            ["<Down>"] = "HistoryNext",
          },
        },

        override = function(conf)
          -- This is the config that will be passed to nvim_open_win.
          -- Change values here to customize the layout
          return conf
        end,

        -- see :help dressing_get_config
        get_config = nil,
      },

      select = {
        -- Set to false to disable the vim.ui.select implementation
        enabled = true,

        -- Priority list of preferred vim.select implementations
        backend = { "telescope", "nui", "fzf", "builtin" },

        -- Options for nui Menu
        nui = {
          position = {
            row = 1,
            col = 0,
          },
          size = nil,
          relative = "cursor",
          border = {
            style = EcoVim.ui.float.border or "rounded",
            text = {
              top_align = "right",
            },
          },
          buf_options = {
            swapfile = false,
            filetype = "DressingSelect",
          },
          max_width = 80,
          max_height = 40,
        },

        -- Options for built-in selector
        builtin = {
          -- These are passed to nvim_open_win
          wnchor = "SW",
          border = EcoVim.ui.float.border or "rounded",
          -- 'editor' and 'win' will default to being centered
          relative = "cursor",

          win_options = {
            -- Window transparency (0-100)
            winblend = 5,
            -- Change default highlight groups (see :help winhl)
            winhighlight = "",
          },

          -- These can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
          -- the min_ and max_ options can be a list of mixed types.
          -- max_width = {140, 0.8} means "the lesser of 140 columns or 80% of total"
          width = nil,
          max_width = { 140, 0.8 },
          min_width = { 10, 0.2 },
          height = nil,
          max_height = 0.9,
          min_height = { 2, 0.05 },

          -- Set to `false` to disable
          mappings = {
            ["<Esc>"] = "Close",
            ["<C-c>"] = "Close",
            ["<CR>"] = "Confirm",
          },

          override = function(conf)
            -- This is the config that will be passed to nvim_open_win.
            -- Change values here to customize the layout
            return conf
          end,
        },

        -- see :help dressing_get_config
        get_config = function(opts)
          if opts.kind == 'codeaction' then
            return {
              backend = 'builtin',
              nui = {
                relative = 'cursor',
                max_width = 80,
                min_height = 2,
              }
            }
          end
        end
      },
    }
  },
}

================
File: lua/plugins/formatting.lua
================
return {
  {
    "stevearc/conform.nvim",
    event = { "BufReadPre", "BufNewFile" },
    log_level = vim.log.levels.DEBUG,
    config = function()
      local conform = require("conform")

      conform.setup({
        formatters_by_ft = {
          css = { { "prettierd", "prettier" } },
          graphql = { { "prettierd", "prettier" } },
          html = { { "prettierd", "prettier" } },
          javascript = { { "prettierd", "prettier" } },
          javascriptreact = { { "prettierd", "prettier" } },
          json = { { "prettierd", "prettier" } },
          lua = { "stylua" },
          markdown = { { "prettierd", "prettier" } },
          python = { "isort", "black" },
          sql = { "sql-formatter" },
          svelte = { { "prettierd", "prettier" } },
          typescript = { { "prettierd", "prettier", } },
          -- typescript = { { "prettierd", "prettier", "sql-formatter" } },
          typescriptreact = { { "prettierd", "prettier" } },
          yaml = { "prettier" },
        },
      })

      vim.keymap.set({ "n" }, "<leader>bf", function()
        conform.format({
          lsp_fallback = true,
          async = false,
          timeout_ms = 500,
        })
      end, { desc = "Buffer Format" })

      vim.keymap.set({ "v" }, "<leader>f", function()
        conform.format({
          lsp_fallback = true,
          async = false,
          timeout_ms = 500,
        })
      end, { desc = "format selection" })

      vim.api.nvim_create_user_command("Format", function(args)
        local range = nil
        if args.count ~= -1 then
          local end_line = vim.api.nvim_buf_get_lines(0, args.line2 - 1, args.line2, true)[1]
          range = {
            start = { args.line1, 0 },
            ["end"] = { args.line2, end_line:len() },
          }
        end

        conform.format({ async = true, lsp_fallback = true, range = range })
      end, { range = true })
    end,
  },
}

================
File: lua/plugins/git.lua
================
return {
  {
    "lewis6991/gitsigns.nvim",
    event = "BufRead",
    dependencies = { "nvim-lua/plenary.nvim" },
    config = function()
      local signs = require('gitsigns')
      signs.setup {
        signs                        = {
          add          = { text = '▎' },
          change       = { text = '▎' },
          delete       = { text = '_' },
          topdelete    = { text = '‾' },
          changedelete = { text = '~' },
          untracked    = { text = '┆' },
        },
        signcolumn                   = true,  -- Toggle with `:Gitsigns toggle_signs`
        numhl                        = false, -- Toggle with `:Gitsigns toggle_numhl`
        linehl                       = false, -- Toggle with `:Gitsigns toggle_linehl`
        word_diff                    = false, -- Toggle with `:Gitsigns toggle_word_diff`
        watch_gitdir                 = {
          interval = 700,
          follow_files = true
        },
        attach_to_untracked          = true,
        current_line_blame           = true, -- Toggle with `:Gitsigns toggle_current_line_blame`
        current_line_blame_opts      = {
          virt_text = true,
          virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
          delay = 700,
          ignore_whitespace = false,
        },
        current_line_blame_formatter = '<author>, <author_time:%Y-%m-%d> - <summary>',
        sign_priority                = 6,
        update_debounce              = 100,
        status_formatter             = nil, -- Use default
        max_file_length              = 40000,
        preview_config               = {
          -- Options passed to nvim_open_win
          border = EcoVim.ui.float.border,
          style = 'minimal',
          relative = 'cursor',
          row = 0,
          col = 1
        },
        on_attach                    = function(bufnr)
          local gs = package.loaded.gitsigns

          local function map(mode, l, r, opts)
            opts = opts or {}
            opts.buffer = bufnr
            vim.keymap.set(mode, l, r, opts)
          end

          -- ╭──────────────────────────────────────────────────────────╮
          -- │ Keymappings                                              │
          -- ╰──────────────────────────────────────────────────────────╯

          -- Navigation
          map('n', ']c', function()
            if vim.wo.diff then return ']c' end
            vim.schedule(function() gs.next_hunk() end)
            return '<Ignore>'
          end, { expr = true })

          map('n', '[c', function()
            if vim.wo.diff then return '[c' end
            vim.schedule(function() gs.prev_hunk() end)
            return '<Ignore>'
          end, { expr = true })

          -- Actions
          map({ 'n', 'v' }, '<leader>ghs', gs.stage_hunk, { desc = "stage hunk" })
          map({ 'n', 'v' }, '<leader>ghr', gs.reset_hunk, { desc = "reset hunk" })
          map('n', '<leader>ghS', gs.stage_buffer, { desc = "stage buffer" })
          map('n', '<leader>ghu', gs.undo_stage_hunk, { desc = "undo stage" })
          map('n', '<leader>ghR', gs.reset_buffer, { desc = "reset buffer" })
          map('n', '<leader>ghp', gs.preview_hunk, { desc = "preview hunk" })
          map('n', '<leader>gm', function() gs.blame_line { full = true } end, { desc = "blame line" })
          map('n', '<leader>ghd', gs.diffthis, { desc = "diff hunk" })
          map('n', '<leader>ght', gs.toggle_deleted, { desc = "toggle deleted" })

          -- Text object
          map({ 'o', 'x' }, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
        end
      }
    end,
    keys = {
      { "<leader>ghd" },
      { "<leader>ghp" },
      { "<leader>ghR" },
      { "<leader>ghr" },
      { "<leader>ghs" },
      { "<leader>ghS" },
      { "<leader>ght" },
      { "<leader>ghu" },
    }
  },

  {
    "sindrets/diffview.nvim",
    lazy = true,
    enabled = true,
    event = "BufRead",
    config = function()
      require("plugins.git.diffview")
    end,
    keys = {
      { "<Leader>gd", "<cmd>lua require('plugins.git.diffview').toggle_file_history()<CR>", desc = "diff file" },
      { "<Leader>gS", "<cmd>lua require('plugins.git.diffview').toggle_status()<CR>",       desc = "status" }
    },
  },

  {
    "akinsho/git-conflict.nvim",
    lazy = false,
    event = "BufRead",
    version = "*",
    config = function()
      vim.api.nvim_create_autocmd("User", {
        pattern = "GitConflictDetected",
        callback = function()
          vim.notify("Conflict detected in " .. vim.fn.expand("<afile>"))
        end,
      })

      require("git-conflict").setup({
        default_mappings = true,    -- disable buffer local mapping created by this plugin
        default_commands = true,    -- disable commands created by this plugin
        disable_diagnostics = true, -- This will disable the diagnostics in a buffer whilst it is conflicted
        list_opener = 'copen',      -- command or function to open the conflicts list
        highlights = {              -- They must have background color, otherwise the default color will be used
          incoming = "DiffText",
          current = "DiffAdd",
        },
      })

      vim.api.nvim_set_hl(0, "GitConflictIncoming", { bg = "#293919" })
      vim.api.nvim_set_hl(0, "GitConflictIncomingLabel", { bold = true, bg = "#698F3F" })

    end,
    keys = {
      { "<Leader>gcb", '<cmd>GitConflictChooseBoth<CR>',   desc = 'choose both' },
      { "<Leader>gcn", '<cmd>GitConflictNextConflict<CR>', desc = 'move to next conflict' },
      { "<Leader>gcc", '<cmd>GitConflictChooseOurs<CR>',   desc = 'choose current' },
      { "<Leader>gcp", '<cmd>GitConflictPrevConflict<CR>', desc = 'move to prev conflict' },
      { "<Leader>gci", '<cmd>GitConflictChooseTheirs<CR>', desc = 'choose incoming' },
    }
  },

  {
    "ThePrimeagen/git-worktree.nvim",
    lazy = false,
    config = function()
      require("plugins.git.worktree")
    end,
    opts = {
      change_directory_command = "cd",  -- default: "cd",
      update_on_change = true,          -- default: true,
      update_on_change_command = "e .", -- default: "e .",
      clearjumps_on_change = true,      -- default: true,
      autopush = false,                 -- default: false,
    },
    keys = {
      { "<Leader>gww", desc = "worktrees" },
      { "<Leader>gwc", desc = "create worktree" }
    }
  },

  {
    "kdheepak/lazygit.nvim",
    cmd = {
      "LazyGit",
      "LazyGitCurrentFile",
      "LazyGitFilterCurrentFile",
      "LazyGitFilter",
      "LazyGitConfig",
    },
    keys = {
      -- { "<Leader>gg", "<cmd>LazyGit<CR>", desc = "lazygit" },
    },

    config = function()
      -- local nvim_appname = vim.api.env.NVIM_APPNAME
      local nvim_appname = vim.fn.stdpath('config')
      vim.g.lazygit_floating_window_scaling_factor = 0.95
      -- vim.g.lazygit_config_file_path = '${NVIM_APPNAME}/lua/plugins/git/lazygit.yml'
      vim.g.lazygit_use_custom_config_file_path = 1
      vim.g.lazygit_config_file_path = nvim_appname .. "/lua/plugins/git/lazygit.yml"
    end,
  },

  {
    "pwntester/octo.nvim",
    dependencies = {
      "nvim-lua/plenary.nvim",
      "nvim-telescope/telescope.nvim",
      "nvim-tree/nvim-web-devicons",
    },
    cmd = {
      "Octo",
    },
    config = function()
      local wk = require("which-key")

      require('octo').setup({
        mappings = {
          issue = {
            close_issue = { lhs = "<LocalLeader>ic", desc = "close issue" },
            reopen_issue = { lhs = "<LocalLeader>io", desc = "reopen issue" },
            list_issues = { lhs = "<LocalLeader>il", desc = "list open issues on same repo" },
            reload = { lhs = "R", desc = "reload issue" },
            open_in_browser = { lhs = "B", desc = "open issue in browser" },
            copy_url = { lhs = "<C-y>", desc = "copy url to system clipboard" },
            add_assignee = { lhs = "<LocalLeader>aa", desc = "add assignee" },
            remove_assignee = { lhs = "<LocalLeader>ad", desc = "remove assignee" },
            create_label = { lhs = "<LocalLeader>lc", desc = "create label" },
            add_label = { lhs = "<LocalLeader>la", desc = "add label" },
            remove_label = { lhs = "<LocalLeader>ld", desc = "remove label" },
            goto_issue = { lhs = "<LocalLeader>gi", desc = "navigate to a local repo issue" },
            add_comment = { lhs = "<LocalLeader>ca", desc = "add comment" },
            delete_comment = { lhs = "<LocalLeader>cd", desc = "delete comment" },
            next_comment = { lhs = "]c", desc = "go to next comment" },
            prev_comment = { lhs = "[c", desc = "go to previous comment" },
            react_hooray = { lhs = "<LocalLeader>rp", desc = "add/remove 🎉 reaction" },
            react_heart = { lhs = "<LocalLeader>rh", desc = "add/remove ❤️ reaction" },
            react_eyes = { lhs = "<LocalLeader>re", desc = "add/remove 👀 reaction" },
            react_thumbs_up = { lhs = "<LocalLeader>r+", desc = "add/remove 👍 reaction" },
            react_thumbs_down = { lhs = "<LocalLeader>r-", desc = "add/remove 👎 reaction" },
            react_rocket = { lhs = "<LocalLeader>rr", desc = "add/remove 🚀 reaction" },
            react_laugh = { lhs = "<LocalLeader>rl", desc = "add/remove 😄 reaction" },
            react_confused = { lhs = "<LocalLeader>rc", desc = "add/remove 😕 reaction" },
          },
          pull_request = {
            checkout_pr = { lhs = "<LocalLeader>po", desc = "checkout PR" },
            merge_pr = { lhs = "<LocalLeader>pMm", desc = "merge commit PR" },
            squash_and_merge_pr = { lhs = "<LocalLeader>pMs", desc = "squash and merge PR" },
            list_commits = { lhs = "<LocalLeader>pc", desc = "list PR commits" },
            list_changed_files = { lhs = "<LocalLeader>pf", desc = "list PR changed files" },
            show_pr_diff = { lhs = "<LocalLeader>pd", desc = "show PR diff" },
            add_reviewer = { lhs = "<LocalLeader>va", desc = "add reviewer" },
            remove_reviewer = { lhs = "<LocalLeader>vd", desc = "remove reviewer request" },
            close_issue = { lhs = "<LocalLeader>pmc", desc = "close PR" },
            reopen_issue = { lhs = "<LocalLeader>pmo", desc = "reopen PR" },
            list_issues = { lhs = "<LocalLeader>il", desc = "list open issues on same repo" },
            reload = { lhs = "R", desc = "reload PR" },
            open_in_browser = { lhs = "B", desc = "open PR in browser" },
            copy_url = { lhs = "<C-y>", desc = "copy url to system clipboard" },
            goto_file = { lhs = "gf", desc = "go to file" },
            add_assignee = { lhs = "<LocalLeader>aa", desc = "add assignee" },
            remove_assignee = { lhs = "<LocalLeader>ad", desc = "remove assignee" },
            create_label = { lhs = "<LocalLeader>lc", desc = "create label" },
            add_label = { lhs = "<LocalLeader>la", desc = "add label" },
            remove_label = { lhs = "<LocalLeader>ld", desc = "remove label" },
            goto_issue = { lhs = "<LocalLeader>gi", desc = "navigate to a local repo issue" },
            add_comment = { lhs = "<LocalLeader>ca", desc = "add comment" },
            delete_comment = { lhs = "<LocalLeader>cd", desc = "delete comment" },
            next_comment = { lhs = "]c", desc = "go to next comment" },
            prev_comment = { lhs = "[c", desc = "go to previous comment" },
            react_hooray = { lhs = "<LocalLeader>rp", desc = "add/remove 🎉 reaction" },
            react_heart = { lhs = "<LocalLeader>rh", desc = "add/remove ❤️ reaction" },
            react_eyes = { lhs = "<LocalLeader>re", desc = "add/remove 👀 reaction" },
            react_thumbs_up = { lhs = "<LocalLeader>r+", desc = "add/remove 👍 reaction" },
            react_thumbs_down = { lhs = "<LocalLeader>r-", desc = "add/remove 👎 reaction" },
            react_rocket = { lhs = "<LocalLeader>rr", desc = "add/remove 🚀 reaction" },
            react_laugh = { lhs = "<LocalLeader>rl", desc = "add/remove 😄 reaction" },
            react_confused = { lhs = "<LocalLeader>rc", desc = "add/remove 😕 reaction" },
          },
          review_thread = {
            goto_issue = { lhs = "<LocalLeader>gi", desc = "navigate to a local repo issue" },
            add_comment = { lhs = "<LocalLeader>ca", desc = "add comment" },
            delete_comment = { lhs = "<LocalLeader>cd", desc = "delete comment" },
            add_suggestion = { lhs = "<LocalLeader>sa", desc = "add suggestion" },
            next_comment = { lhs = "]c", desc = "go to next comment" },
            prev_comment = { lhs = "[c", desc = "go to previous comment" },
            select_next_entry = { lhs = "]q", desc = "move to previous changed file" },
            select_prev_entry = { lhs = "[q", desc = "move to next changed file" },
            close_review_tab = { lhs = "<C-c>", desc = "close review tab" },
            react_hooray = { lhs = "<LocalLeader>rp", desc = "add/remove 🎉 reaction" },
            react_heart = { lhs = "<LocalLeader>rh", desc = "add/remove ❤️ reaction" },
            react_eyes = { lhs = "<LocalLeader>re", desc = "add/remove 👀 reaction" },
            react_thumbs_up = { lhs = "<LocalLeader>r+", desc = "add/remove 👍 reaction" },
            react_thumbs_down = { lhs = "<LocalLeader>r-", desc = "add/remove 👎 reaction" },
            react_rocket = { lhs = "<LocalLeader>rr", desc = "add/remove 🚀 reaction" },
            react_laugh = { lhs = "<LocalLeader>rl", desc = "add/remove 😄 reaction" },
            react_confused = { lhs = "<LocalLeader>rc", desc = "add/remove 😕 reaction" },
          },
          submit_win = {
            approve_review = { lhs = "<LocalLeader>sa", desc = "approve review" },
            comment_review = { lhs = "<LocalLeader>sc", desc = "comment review" },
            request_changes = { lhs = "<LocalLeader>sr", desc = "request changes review" },
            close_review_tab = { lhs = "<LocalLeader>sx", desc = "close review tab" },
          },
          review_diff = {
            add_review_comment = { lhs = "<LocalLeader>ca", desc = "add a new review comment" },
            add_review_suggestion = { lhs = "<LocalLeader>sa", desc = "add a new review suggestion" },
            focus_files = { lhs = "<LocalLeader>e", desc = "move focus to changed file panel" },
            toggle_files = { lhs = "<LocalLeader>b", desc = "hide/show changed files panel" },
            next_thread = { lhs = "]t", desc = "move to next thread" },
            prev_thread = { lhs = "[t", desc = "move to previous thread" },
            select_next_entry = { lhs = "]q", desc = "move to previous changed file" },
            select_prev_entry = { lhs = "[q", desc = "move to next changed file" },
            close_review_tab = { lhs = "<C-c>", desc = "close review tab" },
            toggle_viewed = { lhs = "<LocalLeader><space>", desc = "toggle viewer viewed state" },
            goto_file = { lhs = "gf", desc = "go to file" },
          },
          file_panel = {
            next_entry = { lhs = "j", desc = "move to next changed file" },
            prev_entry = { lhs = "k", desc = "move to previous changed file" },
            select_entry = { lhs = "<cr>", desc = "show selected changed file diffs" },
            refresh_files = { lhs = "R", desc = "refresh changed files panel" },
            focus_files = { lhs = "<LocalLeader>f", desc = "move focus to changed file panel" },
            toggle_files = { lhs = "<LocalLeader>b", desc = "hide/show changed files panel" },
            select_next_entry = { lhs = "]q", desc = "move to previous changed file" },
            select_prev_entry = { lhs = "[q", desc = "move to next changed file" },
            close_review_tab = { lhs = "<C-c>", desc = "close review tab" },
            toggle_viewed = { lhs = "<LocalLeader><Space>", desc = "toggle viewer viewed state" },
          }
        }
      })

      local function attach_octo(bufnr)
        wk.add({
          { buffer = bufnr,     mode = { "n", "x" } },
          { "<LocalLeader>a",   "<cmd>Octo assignee<CR>",         desc = "Assignee" },
          { "<LocalLeader>c",   "<cmd>Octo comment<CR>",          desc = "Comment" },
          { "<LocalLeader>g",   "<cmd>Octo goto<CR>",             desc = "Go To" },
          { "<LocalLeader>i",   "<cmd>Octo issue<CR>",            desc = "Issue" },
          { "<LocalLeader>l",   "<cmd>Octo label<CR>",            desc = "Label" },
          { "<LocalLeader>p",   group = "Pull Request" },
          { "<LocalLeader>pr",  "<cmd>Octo pr ready<CR>",         desc = "mark draft as ready to review" },
          { "<LocalLeader>ps",  "<cmd>Octo pr checks<CR>",        desc = "status of all checks" },
          { "<LocalLeader>pm",  "<cmd>Octo pr manage<CR>",        desc = "Manage pull request" },
          { "<LocalLeader>pM",  "<cmd>Octo pr merge<CR>",         desc = "Merge" },
          { "<LocalLeader>r",   "<cmd>Octo reaction<CR>",         desc = "Reaction" },
          { "<LocalLeader>s",   group = "Submit" },
          { "<LocalLeader>t",   group = "Thread" },
          { "<LocalLeader>tr",  "<cmd>Octo thread resolve<CR>",   desc = "resolve thread" },
          { "<LocalLeader>tu",  "<cmd>Octo thread unresolve<CR>", desc = "unresolve thread" },
          { "<LocalLeader>v",   "<cmd>Octo reviewer<CR>",         desc = "Reviewer" },
          { "<LocalLeader>R",   group = "Review" },
          { "<LocalLeader>Rs",  "<cmd>Octo review start<CR>",     desc = "start review" },
          { "<LocalLeader>Rr",  "<cmd>Octo review resume<CR>",    desc = "resume" },
          { "<LocalLeader>Rm",  group = "Manage Review" },
          { "<LocalLeader>Rmd", "<cmd>Octo review discard<CR>",   desc = "delete pending review" },
          { "<LocalLeader>Rms", "<cmd>Octo review submit<CR>",    desc = "submit review" },
          { "<LocalLeader>Rmc", "<cmd>Octo review comments<CR>",  desc = "view pending comments" },
          { "<LocalLeader>Rmp", "<cmd>Octo review commit<CR>",    desc = "pick a commit" },
        })
      end


      -- Review buffer
      local function attach_conf(bufnr)
        wk.add({
          { buffer = bufnr,   mode = { "n", "x", "v" } },
          { "<LocalLeader>c", desc = "Comment" },
          { "<LocalLeader>s", desc = "Suggestion" },
          { "<LocalLeader>q", "<cmd>Octo review close<CR>", desc = "quit review" },
        })
      end

      vim.api.nvim_create_autocmd("FileType", {
        pattern = "octo",
        callback = function() attach_octo(0) end
      })

      vim.api.nvim_create_autocmd("FileType", {
        pattern = "conf",
        callback = function() attach_conf(0) end
      })
    end,
  },

  {
    'linrongbin16/gitlinker.nvim',
    config = function()
      require('gitlinker').setup()
    end,
    keys = {
      { "<Leader>gL", "<cmd>GitLink<CR>", mode = "x", desc = "get url for selection" }
    },
    cmd = "GitLink",
  },
}

================
File: lua/plugins/init.lua
================
return {
  -- Add subdirectories here
  {
    { import = "plugins.ai" },
    { import = "plugins.languages" },
    { import = "plugins.ui" },
    { import = "plugins.editor" },
    -- { import = "plugins.other" },
    { import = "plugins.util" },
    { import = "plugins.code" },
    -- { import = "plugins.file-management" },
  },

  -- ╭─────────────────────────────────────────────────────────╮
  -- │ General plugins                                         │
  -- ╰─────────────────────────────────────────────────────────╯
  { "AndrewRadev/switch.vim", lazy = false },
  -- { "tpope/vim-repeat",       lazy = false }, -- for surround.vim speeddating.vim unimpaired.vim vim-easyclip vim-radical
  -- { "tpope/vim-speeddating",  lazy = false },
  {
    "airblade/vim-rooter",
    event = "VeryLazy",
    config = function()
      vim.g.rooter_patterns = { ".git", "package.json", "_darcs", ".bzr", ".svn", "Makefile" }
      vim.g.rooter_silent_chdir = 1
      vim.g.rooter_resolve_links = 1
    end,
  },
  {
    "kylechui/nvim-surround",
    enabled = false,
    version = "*", -- Use for stability; omit to use `main` branch for the latest features
    event = "VeryLazy",
    config = true,
  },
}

================
File: lua/plugins/linting.lua
================
return {
  {
    "mfussenegger/nvim-lint",
    event = {
      "BufReadPre",
      "BufNewFile",
    },
    config = function()
      local lint = require("lint")

      lint.linters_by_ft = {
        javascript = { "eslint_d" },
        typescript = { "eslint_d" },
        javascriptreact = { "eslint_d" },
        typescriptreact = { "eslint_d" },
        svelte = { "eslint_d" },
        python = { "pylint" },
      }

      -- vim.keymap.set("n", "<leader>l", function()
      --   lint.try_lint()
      -- end, { desc = "lint file" })
    end,
  },
}

================
File: lua/plugins/lsp.lua
================
return {
  {
    "neovim/nvim-lspconfig",
    lazy = false,
    dependencies = {
      "mason.nvim",
      "williamboman/mason-lspconfig.nvim",
      "hrsh7th/cmp-nvim-lsp",
    },
    servers = nil,
  },

  {
    "williamboman/mason.nvim",
    cmd = "Mason",
    keys = {
      { "<leader>cm", "<cmd>Mason<cr>", desc = "Mason" },
    },
  },

  {
    "antosha417/nvim-lsp-file-operations",
    event = "LspAttach",
    dependencies = {
      { "nvim-lua/plenary.nvim" },
      { "nvim-tree/nvim-tree.lua" },
    },
    config = function()
      require("lsp-file-operations").setup()
    end
  },
}

================
File: lua/plugins/lualine.lua
================
return {
  "nvim-lualine/lualine.nvim",
  -- enabled = false,
  event = "VeryLazy",
  init = function()
    vim.g.lualine_laststatus = vim.o.laststatus
    if vim.fn.argc(-1) > 0 then
      -- set an empty statusline till lualine loads
      vim.o.statusline = " "
    else
      -- hide the statusline on the starter page
      vim.o.laststatus = 0
    end
  end,
  opts = function()
    -- PERF: we don't need this lualine require madness 🤷
    local lualine_require = require("lualine_require")
    lualine_require.require = require

    -- local icons = LazyVim.config.icons

    vim.o.laststatus = vim.g.lualine_laststatus

    local opts = {
      options = {
        theme = "auto",
        globalstatus = vim.o.laststatus == 3,
        disabled_filetypes = { statusline = { "dashboard", "alpha", "ministarter", "snacks_dashboard" } },
      },
      sections = {
        lualine_a = { "mode" },
        lualine_b = { "branch" },

        -- lualine_c = {
        --   LazyVim.lualine.root_dir(),
        --   {
        --     "diagnostics",
        --     symbols = {
        --       error = icons.diagnostics.Error,
        --       warn = icons.diagnostics.Warn,
        --       info = icons.diagnostics.Info,
        --       hint = icons.diagnostics.Hint,
        --     },
        --   },
        --   { "filetype", icon_only = true, separator = "", padding = { left = 1, right = 0 } },
        --   { LazyVim.lualine.pretty_path() },
        -- },
        lualine_x = {
          {
            function()
              local recording_register = vim.fn.reg_recording()
              if recording_register ~= "" then
                return "Recording @" .. recording_register
              end
              return ""
            end,
            color = { fg = "red" }, -- Customize color as needed
          },
          -- Snacks.profiler.status(),
          -- stylua: ignore
          -- {
          --   function() return require("noice").api.status.command.get() end,
          --   cond = function() return package.loaded["noice"] and require("noice").api.status.command.has() end,
          --   color = function() return { fg = Snacks.util.color("Statement") } end,
          -- },
          -- -- stylua: ignore
          -- {
          --   function() return require("noice").api.status.mode.get() end,
          --   cond = function() return package.loaded["noice"] and require("noice").api.status.mode.has() end,
          --   color = function() return { fg = Snacks.util.color("Constant") } end,
          -- },
          -- -- stylua: ignore
          -- {
          --   function() return "  " .. require("dap").status() end,
          --   cond = function() return package.loaded["dap"] and require("dap").status() ~= "" end,
          --   color = function() return { fg = Snacks.util.color("Debug") } end,
          -- },
          -- -- stylua: ignore
          -- {
          --   require("lazy.status").updates,
          --   cond = require("lazy.status").has_updates,
          --   color = function() return { fg = Snacks.util.color("Special") } end,
          -- },
          {
            "diff",
            -- symbols = {
            --   added = icons.git.added,
            --   modified = icons.git.modified,
            --   removed = icons.git.removed,
            -- },
            source = function()
              local gitsigns = vim.b.gitsigns_status_dict
              if gitsigns then
                return {
                  added = gitsigns.added,
                  modified = gitsigns.changed,
                  removed = gitsigns.removed,
                }
              end
            end,
          },
        },
        lualine_y = {
          { "progress", separator = " ",                  padding = { left = 1, right = 0 } },
          { "location", padding = { left = 0, right = 1 } },
        },
        lualine_z = {
          function()
            return " " .. os.date("%R")
          end,
        },
      },
      extensions = { "neo-tree", "lazy", "fzf" },
    }

    -- do not add trouble symbols if aerial is enabled
    -- And allow it to be overriden for some buffer types (see autocmds)
    if vim.g.trouble_lualine then
      local trouble = require("trouble")
      local symbols = trouble.statusline({
        mode = "symbols",
        groups = {},
        title = false,
        filter = { range = true },
        format = "{kind_icon}{symbol.name:Normal}",
        hl_group = "lualine_c_normal",
      })
      table.insert(opts.sections.lualine_c, {
        symbols and symbols.get,
        cond = function()
          return vim.b.trouble_lualine ~= false and symbols.has()
        end,
      })
    end

    return opts
  end,
}

================
File: lua/plugins/markdown-preview.lua
================
return {
  {
    "iamcco/markdown-preview.nvim",
    build = "cd app && npm install",
    setup = function()
      vim.g.mkdp_filetypes = { "markdown" }
    end,
    ft = { "markdown" },
  },
}

================
File: lua/plugins/mini.lua
================
return {
  {
    "echasnovski/mini.align",
    lazy = false,
    version = "*",
    opts = {},
  },
  {
    "echasnovski/mini.ai",
    lazy = false,
    version = "*",
    config = function()
      require("mini.ai").setup()
    end,
  },

  {
    -- various neovim plugins project
    "echasnovski/mini.nvim",
    version = "*",
    config = function()
      -- local starter = require 'mini.starter'
      -- Management
      require("mini.files").setup({

        -- mappings = {
        --   -- Here 'L' will also close explorer after opening file.
        --   -- Switch to `go_in` if you want to not close explorer.
        --   go_in = '',
        --   go_in_plus = '<Right>,l',
        --   go_out = '<Left>',
        --   go_out_plus = '',
        --   -- Will be overriden by manual `<BS>`, which seems wasteful
        --   reset = '',
        --   -- Overrides built-in `?` for backward search
        --   show_help = '?',
        -- },
      })
      vim.keymap.set(
        "n",
        "<leader>e",
        "<cmd>lua MiniFiles.open(vim.api.nvim_buf_get_name(0))<cr>",
        { desc = "Open minifiles at buffer location" }
      )
      vim.keymap.set(
        "n",
        "<leader>E",
        "<cmd>lua MiniFiles.open()<cr>",
        { desc = "Open minifiles at cwd" }
      )
      local go_in_plus = function()
        for _ = 1, vim.v.count1 do
          MiniFiles.go_in({ close_on_file = true })
        end
      end

      vim.api.nvim_create_autocmd("User", {
        pattern = "MiniFilesBufferCreate",
        callback = function(args)
          local map_buf = function(lhs, rhs)
            vim.keymap.set("n", lhs, rhs, { buffer = args.data.buf_id })
          end

          map_buf("<CR>", go_in_plus)
          map_buf("<Right>", go_in_plus)

          map_buf("<BS>", MiniFiles.go_out)
          map_buf("<Left>", MiniFiles.go_out)

          map_buf("<Esc>", MiniFiles.close)

          -- Add extra mappings from *MiniFiles-examples*
        end,
      })
      -- require('mini.tabline').setup() -- Using bufferline instead

      -- local sdir = "$NVIM_APPNAME/sessions"
      -- require("mini.sessions").setup({
      -- 	autowrite = true,
      -- 	directory = sdir,
      -- 	vim.api.nvim_create_user_command("MKS", function(args)
      -- 		local vimCmd = "mksession " .. sdir
      -- 		-- if (args['fargs'][0]) then
      -- 		--   vimCmd = vimCmd .. ' ' .. args['fargs'][0]
      -- 		-- end
      -- 		if args["args"] then
      -- 			vimCmd = vimCmd .. "/" .. args["args"] .. ".vim"
      -- 		end
      -- 		vim.cmd(vimCmd)
      -- 		-- vim.cmd "echo 'ok'"
      -- 	end, { desc = "Save session to global folder", nargs = "*" }),
      -- })
      --
      -- Editing
      -- require("mini.jump").setup({
      -- 	mappings = {
      -- 		forward = "f",
      -- 		backward = "F",
      -- 		forward_till = "t",
      -- 		backward_till = "T",
      -- 		repeat_jump = "",
      -- 	},
      --
      -- 	-- Delay values (in ms) for different functionalities. Set any of them to
      -- 	-- a very big number (like 10^7) to virtually disable.
      -- 	delay = {
      -- 		-- Delay between jump and highlighting all possible jumps
      -- 		highlight = 250,
      --
      -- 		-- Delay between jump and automatic stop if idle (no jump is done)
      -- 		idle_stop = 10000000,
      -- 	},
      -- })

      require("mini.move").setup()
      vim.keymap.set("x", "<M-Up>", '<cmd>lua MiniMove.move_selection("up")<cr>', { desc = "MiniMove selection" })
      vim.keymap.set(
        "x",
        "<M-Down>",
        '<cmd>lua MiniMove.move_selection("down")<cr>',
        { desc = "MiniMove selection" }
      )
      vim.keymap.set(
        "x",
        "<M-Left>",
        '<cmd>lua MiniMove.move_selection("left")<cr>',
        { desc = "MiniMove selection" }
      )
      vim.keymap.set(
        "x",
        "<M-Right>",
        '<cmd>lua MiniMove.move_selection("right")<cr>',
        { desc = "MiniMove selection" }
      )
      vim.keymap.set("n", "<M-Up>", '<cmd>lua MiniMove.move_line("up")<cr>', { desc = "MiniMove line" })
      vim.keymap.set("n", "<M-Down>", '<cmd>lua MiniMove.move_line("down")<cr>', { desc = "MiniMove line" })
      vim.keymap.set("n", "<M-Left>", '<cmd>lua MiniMove.move_line("left")<cr>', { desc = "MiniMove line" })
      vim.keymap.set("n", "<M-Right>", '<cmd>lua MiniMove.move_line("right")<cr>', { desc = "MiniMove line" })
      require("mini.splitjoin").setup() -- use gS to split/join arguments
      require("mini.surround").setup(
        {
          mappings = {
            add = "gsa",            -- Add surrounding in Normal and Visual modes
            delete = "gsd",         -- Delete surrounding
            find = "gsf",           -- Find surrounding (to the right)
            find_left = "gsF",      -- Find surrounding (to the left)
            highlight = "gsh",      -- Highlight surrounding
            replace = "gsr",        -- Replace surrounding. Type gsr <existing surround> <new surround> to replace current surrouinding instead of [N]ext, [L]ast surrounding
            update_n_lines = "gsn", -- Update `n_lines`
          },
        }

      )
      require("mini.misc").setup({
        require("mini.misc").setup_restore_cursor(),
      })
      require("mini.indentscope").setup({
        -- Draw options
        draw = {
          -- Delay (in ms) between event and start of drawing scope indicator
          delay = 0,

          -- Animation rule for scope's first drawing. A function which, given
          -- next and total step numbers, returns wait time (in ms). See
          -- |MiniIndentscope.gen_animation| for builtin options. To disable
          -- animation, use `require('mini.indentscope').gen_animation.none()`.
          animation = require("mini.indentscope").gen_animation.none(), --<function: implements constant 20ms between steps>,

          -- Symbol priority. Increase to display on top of more symbols.
          priority = 2,
        },

        -- Module mappings. Use `''` (empty string) to disable one.
        mappings = {
          -- Textobjects
          object_scope = "ii",
          object_scope_with_border = "ai",

          -- Motions (jump to respective border line; if not present - body line)
          goto_top = "[i",
          goto_bottom = "]i",
        },

        -- Options which control scope computation
        options = {
          -- Type of scope's border: which line(s) with smaller indent to
          -- categorize as border. Can be one of: 'both', 'top', 'bottom', 'none'.
          border = "both",

          -- Whether to use cursor column when computing reference indent.
          -- Useful to see incremental scopes with horizontal cursor movements.
          indent_at_cursor = false,

          -- Whether to first check input line to be a border of adjacent scope.
          -- Use it if you want to place cursor on function header to get scope of
          -- its body.
          try_as_border = false,
        },

        -- Which character to use for drawing scope indicator
        symbol = "╎",
      })
      -- UI
      local animate = require('mini.animate')
      require("mini.animate").setup({

        scroll = {
          -- Whether to enable this animation
          enable = false,

          -- Timing of animation (how steps will progress in time)
          -- timing = animate.gen_timing.cubic(), --<function: implements linear total 250ms animation duration>,

          -- Subscroll generator based on total scroll
          -- subscroll = --<function: implements equal scroll with at most 60 steps>,
        },
        cursor = {
          -- Whether to enable this animation
          enable = true,

          -- Timing of animation (how steps will progress in time)
          timing = animate.gen_timing.cubic(
          {
              easing = "out",
              duration = 400,
              unit = "total"

            }
          )
          -- Path generator for visualized cursor movement
          -- path = --<function: implements shortest line path>,
        },
      })
      -- require('mini.cursorword').setup()
      --   require('mini.starter').setup {
      --     evaluate_single = true,
      --     items = {
      --       starter.sections.sessions(20, true),
      --       -- starter.sections.builtin_actions(),
      --       starter.sections.recent_files(10, false),
      --       starter.sections.recent_files(10, true),
      --       starter.sections.telescope(),
      --       -- Use this if you set up 'mini.sessions'
      --     },
      --     content_hooks = {
      --       starter.gen_hook.adding_bullet ' • ',
      --       starter.gen_hook.indexing('all', { 'Builtin actions' }),
      --       starter.gen_hook.aligning('center', 'center'),
      --     },
      --
      --     header = [[
      --
      --
      -- ███╗   ██╗███████╗ ██████╗  ██╗   ██╗██╗███╗   ███╗
      -- ████╗  ██║██╔════╝██╔═══██╗ ██║   ██║██║████╗ ████║
      -- ██╔██╗ ██║█████╗  ██║   ██║ ██║   ██║██║██╔████╔██║
      -- ██║╚██╗██║██╔══╝  ██║   ██║ ╚██╗ ██╔╝██║██║╚██╔╝██║
      -- ██║ ╚████║███████╗╚██████╔╝  ╚████╔╝ ██║██║ ╚═╝ ██║
      -- ╚═╝  ╚═══╝╚══════╝ ╚═════╝    ╚═══╝  ╚═╝╚═╝     ╚═╝
      --
      --
      --      ]],
      --   }
    end,
  },
}

================
File: lua/plugins/navic.lua
================
return {
  {
    "SmiteshP/nvim-navic",
    event = { "CursorMoved", "BufWinEnter", "BufFilePost" },
    config = function()
      vim.api.nvim_set_hl(0, "NavicText", { link = "Winbar" })
      vim.api.nvim_set_hl(0, "NavicSeparator", { link = "Winbar" })

      require('nvim-navic').setup({
        lsp = {
          auto_attach = true,
          preference = nil,
        },
        highlight = true,
        separator = " " .. EcoVim.icons.caretRight .. " ",
        depth_limit = 0,
        depth_limit_indicator = "..",
        safe_output = true
      })

      require('internal.winbar')
    end,
    dependencies = "neovim/nvim-lspconfig",
  },
}

================
File: lua/plugins/neogit.lua
================
return {
  "NeogitOrg/neogit",
  dependencies = {
    "nvim-lua/plenary.nvim",         -- required
    "sindrets/diffview.nvim",        -- optional - Diff integration

    -- Only one of these is needed.
    "nvim-telescope/telescope.nvim", -- optional
    -- "ibhagwan/fzf-lua",              -- optional
    -- "echasnovski/mini.pick",         -- optional
  },
  config = true,
      keys = {
        {"<Leader>ggg", "<cmd>Neogit<CR>", desc = "neoGit"},
        {"<Leader>ggc", "<cmd>Neogit commit<CR>", desc = "commit"},
        {"<Leader>ggP", "<cmd>Neogit push<CR>", desc = "Push"},
        {"<Leader>ggp", "<cmd>Neogit pull<CR>", desc = "Pull"},
      }
}

================
File: lua/plugins/notify.lua
================
return {
  {
    "rcarriga/nvim-notify",
     -- enabled = false,
    config = function()
      local notify = require("notify")
      notify.setup({
        background_colour = "#000000",
        timeout = 10,
      })

			vim.keymap.set("n", "<leader>nd", notify.dismiss, { desc = "Notify Dismiss" })
    end,
    init = function()
      local banned_messages = {
        "No information available",
        "LSP[tsserver] Inlay Hints request failed. Requires TypeScript 4.4+.",
        "LSP[tsserver] Inlay Hints request failed. File not opened in the editor.",
      }
      vim.notify = function(msg, ...)
        for _, banned in ipairs(banned_messages) do
          if msg == banned then
            return
          end
        end
        return require("notify")(msg, ...)
      end
    end,
  },
}

================
File: lua/plugins/numb.lua
================
return {
  {
    "nacro90/numb.nvim",
    lazy = false,
    opts = {}
  }
}

================
File: lua/plugins/nvim-ufo.lua
================
return {
  {
    "kevinhwang91/nvim-ufo",
    dependencies = "kevinhwang91/promise-async",
    config = function()
      vim.keymap.set("n", "zR", require("ufo").openAllFolds)
      vim.keymap.set("n", "zM", require("ufo").closeAllFolds)
      vim.keymap.set("n", "zr", require("ufo").openFoldsExceptKinds)
    end,
  },
}

================
File: lua/plugins/nvim-web-devicons.lua
================
return {
  {
    "nvim-tree/nvim-web-devicons",
    config = function()
      require("nvim-web-devicons").setup({ default = true })
    end,
  },
}

================
File: lua/plugins/oil.lua
================
return {
  {
    'stevearc/oil.nvim',
    ---@module 'oil'
    ---@type oil.SetupOpts
    opts = {},
    -- Optional dependencies
    dependencies = { { "echasnovski/mini.icons", opts = {} } },
    -- dependencies = { "nvim-tree/nvim-web-devicons" }, -- use if prefer nvim-web-devicons
    config = function()
      require("oil").setup({
        -- Oil will take over directory buffers (e.g. `vim .` or `:e src/`)
        -- Set to false if you want some other plugin (e.g. netrw) to open when you edit directories.
        default_file_explorer = false,
        -- Id is automatically added at the beginning, and name at the end
        -- See :help oil-columns
        columns = {
          "icon",
          -- "permissions",
          -- "size",
          -- "mtime",
        },
        -- Buffer-local options to use for oil buffers
        buf_options = {
          buflisted = false,
          bufhidden = "hide",
        },
        -- Window-local options to use for oil buffers
        win_options = {
          wrap = false,
          signcolumn = "no",
          cursorcolumn = false,
          foldcolumn = "0",
          spell = false,
          list = false,
          conceallevel = 3,
          concealcursor = "nvic",
        },
        -- Send deleted files to the trash instead of permanently deleting them (:help oil-trash)
        delete_to_trash = true,
        -- Skip the confirmation popup for simple operations (:help oil.skip_confirm_for_simple_edits)
        skip_confirm_for_simple_edits = false,
        -- Selecting a new/moved/renamed file or directory will prompt you to save changes first
        -- (:help prompt_save_on_select_new_entry)
        prompt_save_on_select_new_entry = true,
        -- Oil will automatically delete hidden buffers after this delay
        -- You can set the delay to false to disable cleanup entirely
        -- Note that the cleanup process only starts when none of the oil buffers are currently displayed
        cleanup_delay_ms = 2000,
        lsp_file_methods = {
          -- Enable or disable LSP file operations
          enabled = true,
          -- Time to wait for LSP file operations to complete before skipping
          timeout_ms = 1000,
          -- Set to true to autosave buffers that are updated with LSP willRenameFiles
          -- Set to "unmodified" to only save unmodified buffers
          autosave_changes = false,
        },
        -- Constrain the cursor to the editable parts of the oil buffer
        -- Set to `false` to disable, or "name" to keep it on the file names
        constrain_cursor = "editable",
        -- Set to true to watch the filesystem for changes and reload oil
        watch_for_changes = false,
        -- Keymaps in oil buffer. Can be any value that `vim.keymap.set` accepts OR a table of keymap
        -- options with a `callback` (e.g. { callback = function() ... end, desc = "", mode = "n" })
        -- Additionally, if it is a string that matches "actions.<name>",
        -- it will use the mapping at require("oil.actions").<name>
        -- Set to `false` to remove a keymap
        -- See :help oil-actions for a list of all available actions
        keymaps = {
          ["g?"] = "actions.show_help",
          ["<CR>"] = "actions.select",
          ["<C-s>"] = { "actions.select", opts = { vertical = true }, desc = "Open the entry in a vertical split" },
          ["<C-h>"] = { "actions.select", opts = { horizontal = true }, desc = "Open the entry in a horizontal split" },
          ["<C-t>"] = { "actions.select", opts = { tab = true }, desc = "Open the entry in new tab" },
          ["<C-p>"] = "actions.preview",
          ["<C-c>"] = "actions.close",
          ["<C-l>"] = "actions.refresh",
          ["-"] = "actions.parent",
          ["_"] = "actions.open_cwd",
          ["`"] = "actions.cd",
          ["~"] = { "actions.cd", opts = { scope = "tab" }, desc = ":tcd to the current oil directory", mode = "n" },
          ["gs"] = "actions.change_sort",
          ["gx"] = "actions.open_external",
          ["g."] = "actions.toggle_hidden",
          ["g\\"] = "actions.toggle_trash",
        },
        -- Set to false to disable all of the above keymaps
        use_default_keymaps = true,
        view_options = {
          -- Show files and directories that start with "."
          show_hidden = true,
          -- This function defines what is considered a "hidden" file
          is_hidden_file = function(name, bufnr)
            return vim.startswith(name, ".")
          end,
          -- This function defines what will never be shown, even when `show_hidden` is set
          is_always_hidden = function(name, bufnr)
            return false
          end,
          -- Sort file names in a more intuitive order for humans. Is less performant,
          -- so you may want to set to false if you work with large directories.
          natural_order = true,
          -- Sort file and directory names case insensitive
          case_insensitive = false,
          sort = {
            -- sort order can be "asc" or "desc"
            -- see :help oil-columns to see which columns are sortable
            { "type", "asc" },
            { "name", "asc" },
          },
        },
        -- Extra arguments to pass to SCP when moving/copying files over SSH
        extra_scp_args = {},
        -- EXPERIMENTAL support for performing file operations with git
        git = {
          -- Return true to automatically git add/mv/rm files
          add = function(path)
            return false
          end,
          mv = function(src_path, dest_path)
            return false
          end,
          rm = function(path)
            return false
          end,
        },
        -- Configuration for the floating window in oil.open_float
        float = {
          -- Padding around the floating window
          padding = 2,
          max_width = 0,
          max_height = 0,
          border = "rounded",
          win_options = {
            winblend = 0,
          },
          -- optionally override the oil buffers window title with custom function: fun(winid: integer): string
          get_win_title = nil,
          -- preview_split: Split direction: "auto", "left", "right", "above", "below".
          preview_split = "auto",
          -- This is the config that will be passed to nvim_open_win.
          -- Change values here to customize the layout
          override = function(conf)
            return conf
          end,
        },
        -- Configuration for the actions floating preview window
        preview = {
          -- Width dimensions can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
          -- min_width and max_width can be a single value or a list of mixed integer/float types.
          -- max_width = {100, 0.8} means "the lesser of 100 columns or 80% of total"
          max_width = 0.9,
          -- min_width = {40, 0.4} means "the greater of 40 columns or 40% of total"
          min_width = { 40, 0.4 },
          -- optionally define an integer/float for the exact width of the preview window
          width = nil,
          -- Height dimensions can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
          -- min_height and max_height can be a single value or a list of mixed integer/float types.
          -- max_height = {80, 0.9} means "the lesser of 80 columns or 90% of total"
          max_height = 0.9,
          -- min_height = {5, 0.1} means "the greater of 5 columns or 10% of total"
          min_height = { 5, 0.1 },
          -- optionally define an integer/float for the exact height of the preview window
          height = nil,
          border = "rounded",
          win_options = {
            winblend = 0,
          },
          -- Whether the preview window is automatically updated when the cursor is moved
          update_on_cursor_moved = true,
        },
        -- Configuration for the floating progress window
        progress = {
          max_width = 0.9,
          min_width = { 40, 0.4 },
          width = nil,
          max_height = { 10, 0.9 },
          min_height = { 5, 0.1 },
          height = nil,
          border = "rounded",
          minimized_border = "none",
          win_options = {
            winblend = 0,
          },
        },
        -- Configuration for the floating SSH window
        ssh = {
          border = "rounded",
        },
        -- Configuration for the floating keymaps help window
        keymaps_help = {
          border = "rounded",
        },
      })
    end
  }
}

================
File: lua/plugins/qmk.lua
================
return {
  'codethread/qmk.nvim',
  ft = { "c" },
  config = function()
    ---@type qmk.UserConfig
    local conf = {
      name = 'LAYOUT_ansi_82',
      layout = {
        'x x x x x x x x x x x x x x _ x',
        'x x x x x x x x x x x x x x _ x',
        'x x x x x x x x x x x x x x _ x',
        'x x x x x x x x x x x x xx^ _ x',
        '^xx x x x x x x x x x x xx^ x _',
        'x x x xxxxxx^xxxxxx x x x x x x',
      }
    }
     local corne = {
      name = 'LAYOUT_split_3x6_3',
     layout = { -- create a visual representation of your final layout
        "x x x x x x _ _ _ _ x x x x x x", -- including keys that span multple rows (with alignment left, center or right)
        "x x x x x x _ _ _ _ x x x x x x", -- including keys that span multple rows (with alignment left, center or right)
        "x x x x x x _ _ _ _ x x x x x x", -- including keys that span multple rows (with alignment left, center or right)
        "_ _ _ _ x x x _ _ x x x _ _ _ _",
      },
    }
    require('qmk').setup(conf)
    require('qmk').setup(corne)
  end
}

================
File: lua/plugins/refactoring.lua
================
return {
  {
    "ThePrimeagen/refactoring.nvim",
    dependencies = {
      "nvim-lua/plenary.nvim",
      "nvim-treesitter/nvim-treesitter",
    },
    cmd = "Refactor",
    keys = {
      { "<leader>re", ":Refactor extract ",              mode = "x",          desc = "Extract function" },
      { "<leader>rf", ":Refactor extract_to_file ",      mode = "x",          desc = "Extract function to file" },
      { "<leader>rv", ":Refactor extract_var ",          mode = "x",          desc = "Extract variable" },
      { "<leader>ri", ":Refactor inline_var",            mode = { "x", "n" }, desc = "Inline variable" },
      { "<leader>rI", ":Refactor inline_func",           mode = "n",          desc = "Inline function" },
      { "<leader>rb", ":Refactor extract_block",         mode = "n",          desc = "Extract block" },
      { "<leader>rf", ":Refactor extract_block_to_file", mode = "n",          desc = "Extract block to file" },
    },
    config = true
  },
}

================
File: lua/plugins/scissors.lua
================
return {
  {
    "chrisgrieser/nvim-scissors",
    event = "BufEnter",
    dependencies = "nvim-telescope/telescope.nvim", -- optional
    opts = {
      snippetDir = vim.fn.stdpath("config") .. "/snippets",
    },
    keys = {
      "<Leader>asa",
      "<Leader>ase",
    },
    config = function()
      local present, wk = pcall(require, "which-key")
      if not present then
        return
      end

      wk.add({
        { "<leader>as",  group = "Snippets",                                 nowait = false,           remap = false },
        { "<leader>asa", '<cmd>lua require("scissors").addNewSnippet()<CR>', desc = "Add new snippet", nowait = false, remap = false },
        { "<leader>ase", '<cmd>lua require("scissors").editSnippet()<CR>',   desc = "Edit snippet",    nowait = false, remap = false },
      })

      wk.add({
        { "<leader>as",  group = "Snippets",                                 mode = "x",                              nowait = false, remap = false },
        { "<leader>asa", '<cmd>lua require("scissors").addNewSnippet()<CR>', desc = "Add new snippet from selection", mode = "x",     nowait = false, remap = false },
      })
    end
  }
}

================
File: lua/plugins/session-manager.lua
================
local path_present, Path = pcall(require, "plenary.path")
if not path_present then
  return
end

return {
  {
    "Shatur/neovim-session-manager",
    enabled=false,
    lazy = false,
    config = function()
      local config_group = vim.api.nvim_create_augroup('SessionManagerGroup', {})

      require('session_manager').setup {
        sessions_dir = Path:new(vim.fn.stdpath('data'), 'sessions'),             -- The directory where the session files will be saved.
        path_replacer = '__',                                                    -- The character to which the path separator will be replaced for session files.
        colon_replacer = '++',                                                   -- The character to which the colon symbol will be replaced for session files.
        autoload_mode = require('session_manager.config').AutoloadMode.Disabled, -- Define what to do when Neovim is started without arguments. Possible values: Disabled, CurrentDir, LastSession
        autosave_last_session = true,                                            -- Automatically save last session on exit and on session switch.
        autosave_ignore_not_normal = true,                                       -- Plugin will not save a session when no buffers are opened, or all of them aren't writable or listed.
        autosave_ignore_filetypes = {                                            -- All buffers of these file types will be closed before the session is saved.
          'gitcommit',
          'gitrebase',
        },
        autosave_only_in_session = true, -- Always autosaves session. If true, only autosaves after a session is active.
        max_path_length = 80,            -- Shorten the display path if length exceeds this threshold. Use 0 if don't want to shorten the path at all.
      }

      vim.api.nvim_create_autocmd({ 'User' }, {
        pattern = "SessionLoadPost",
        group = config_group,
        callback = function()
          -- require('nvim-tree.api').tree.toggle(false, true)
          require('notify')('Session loaded!', 'info', { title = 'Session Manager' })
        end,
      })

      vim.api.nvim_create_autocmd({ 'User' }, {
        pattern = "SessionSavePost",
        group = config_group,
        callback = function()
          require('notify')('Session saved!', 'info', { title = 'Session Manager', bufid = 0 })
          -- require('nvim-tree.api').tree.toggle(false, true)
        end,
      })
    end,
    keys = {
      { "<leader>psl", "<cmd>SessionManager load_session<CR>",         desc = "load session" },
      { "<leader>psL", "<cmd>SessionManager load_last_session<CR>",    desc = "load last session" },
      { "<leader>pss", "<cmd>SessionManager save_current_session<CR>", desc = "save session" },
      { "<leader>psm", "<cmd>SessionManager available_commands<CR>",   desc = "available commands" },
    }
  },
}

================
File: lua/plugins/smart-splits.lua
================
return {
  {
    "mrjones2014/smart-splits.nvim",
    lazy = false,
    config = function()
      require("smart-splits").setup({

      default_amount = 7,
        swap = {
          -- this will create the mapping like
          -- <leader><C-h>
          -- <leader><C-j>
          -- <leader><C-k>
          -- <leader><C-l>
          mod = '<C>',
          prefix = '<leader>',
        },
      })
      -- resizing splits
      -- these keymaps will also accept a range,
      -- for example `10<A-h>` will `resize_left` by `(10 * config.default_amount)`
      local smartsplits = require('smart-splits')
      
      vim.keymap.set('n', '<M-S-Left>', smartsplits.resize_left, {desc = "Resize pane <-left"})
      vim.keymap.set('n', '<M-S-Right>', smartsplits.resize_right, {desc = "Resize pane ->right"})
      vim.keymap.set('n', '<M-S-Up>', smartsplits.resize_up, {desc = "Resize pane to up"})
      vim.keymap.set('n', '<M-S-Down>', smartsplits.resize_down, {desc = "Resize pane down"})
      -- moving between splits
      vim.keymap.set('n', '<C-w><left>', smartsplits.move_cursor_left) -- These can more from left to right even when outbound
      vim.keymap.set('n', '<C-w><down>', smartsplits.move_cursor_down)
      vim.keymap.set('n', '<C-w><up>', smartsplits.move_cursor_up)
      vim.keymap.set('n', '<C-w><right>', smartsplits.move_cursor_right)
      vim.keymap.set('n', '<C-\\>', smartsplits.move_cursor_previous)
      -- swapping buffers between windows
      vim.keymap.set('n', '<leader><C-h>', require('smart-splits').swap_buf_left)
      vim.keymap.set('n', '<leader><C-j>', require('smart-splits').swap_buf_down)
      vim.keymap.set('n', '<leader><C-k>', require('smart-splits').swap_buf_up)
      vim.keymap.set('n', '<leader><C-l>', require('smart-splits').swap_buf_right)
    end
  },
}

================
File: lua/plugins/snacks.lua
================
Snacks = Snacks

return {
  {
    "folke/snacks.nvim",
    priority = 1000,
    lazy = false,
    opts = {
      bigfile      = { enabled = false },
      dashboard    = { enabled = false },
      indent       = { enabled = false },
      input        = { enabled = false },
      notifier     = { enabled = false },
      quickfile    = { enabled = false },
      scroll       = { enabled = false },
      statuscolumn = { enabled = false },
      words        = { enabled = false },
    },
    keys = {
      -- { "<leader>gll",  function() Snacks.lazygit() end,          desc = "Lazygit" },
      -- { "<leader>gla", function() Snacks.lazygit.log() end,      desc = "Lazygit Log (cwd)" },
      -- { "<leader>glc", function() Snacks.lazygit.log_file() end, desc = "Lazygit Current File History" },
      -- {
        -- "<leader>z",
        -- function()
        --   Snacks.zen({
        --     win = {
        --       width = 200,
        --     },
        --   })
        -- end,
        -- desc = "Zen Mode"
      -- },
      -- { "<leader>Z", function() Snacks.zen.zoom() end, desc = "Zoom Mode" },
    },
  }
}

================
File: lua/plugins/spectre.lua
================
return {
  {
    "nvim-pack/nvim-spectre",
    lazy = true,
    keys = {
      {
        "<Leader>rp",
        "<cmd>lua require('spectre').open_visual({select_word=true})<CR>",
        desc = "Refactor Project with spectre Search and replace",
      },
      {
        "<Leader>rp",
        "<cmd>lua require('spectre').open_visual()<CR>",
        mode = "v",
        desc = "Refactor Project with spectre Search and replace",
      }
    }
  },
}

================
File: lua/plugins/spider.lua
================
return {
  {
    "chrisgrieser/nvim-spider",
    lazy = true,
    keys = { "w", "e", "b", "ge" },
    config = function()
      vim.keymap.set({ "n", "o", "x" }, "W", "w", { desc = "Normal w" })
      vim.keymap.set({ "n", "o", "x" }, "<M-w>", "<cmd>lua require('spider').motion('w')<CR>", { desc = "Spider-w" })
      vim.keymap.set({ "n", "o", "x" }, "<M-e>", "<cmd>lua require('spider').motion('e')<CR>", { desc = "Spider-e" })
      vim.keymap.set({ "n", "o", "x" }, "<M-b>", "<cmd>lua require('spider').motion('b')<CR>", { desc = "Spider-b" })
      vim.keymap.set(
        { "n", "o", "x" },
        "ge",
        "<cmd>lua require('spider').motion('ge')<CR>",
        { desc = "Spider-ge" }
      )
    end,
  },
}

================
File: lua/plugins/stay-in-place.lua
================
return {
  {
    "gbprod/stay-in-place.nvim",
    lazy = false,
    config = true, -- run require("stay-in-place").setup()
  },
}

================
File: lua/plugins/tabout.lua
================
return {
  {
    'abecodes/tabout.nvim',
    enabled = false,
    lazy = false,
    config = function()
      require('tabout').setup {
        tabkey = '<Tab>',             -- key to trigger tabout, set to an empty string to disable
        backwards_tabkey = '<S-Tab>', -- key to trigger backwards tabout, set to an empty string to disable
        act_as_tab = true,            -- shift content if tab out is not possible
        act_as_shift_tab = false,     -- reverse shift content if tab out is not possible (if your keyboard/terminal supports <S-Tab>)
        default_tab = '<C-t>',        -- shift default action (only at the beginning of a line, otherwise <TAB> is used)
        default_shift_tab = '<C-d>',  -- reverse shift default action,
        enable_backwards = true,      -- well ...
        completion = false,           -- if the tabkey is used in a completion pum
        tabouts = {
          { open = "'", close = "'" },
          { open = '"', close = '"' },
          { open = '`', close = '`' },
          { open = '(', close = ')' },
          { open = '[', close = ']' },
          { open = '{', close = '}' }
        },
        ignore_beginning = true, --[[ if the cursor is at the beginning of a filled element it will rather tab out than shift the content ]]
        exclude = {} -- tabout will ignore these filetypes
      }
    end,
    dependencies = { -- These are optional
      "nvim-treesitter/nvim-treesitter",
      "L3MON4D3/LuaSnip",
      "hrsh7th/nvim-cmp"
    },
    opt = true,              -- Set this to true if the plugin is optional
    event = 'InsertCharPre', -- Set the event to 'InsertCharPre' for better compatibility
    priority = 1000,
  }
}

================
File: lua/plugins/telescope.lua
================
local icons = EcoVim.icons

local git_icons = {
  added = icons.gitAdd,
  changed = icons.gitChange,
  copied = ">",
  deleted = icons.gitRemove,
  renamed = "➡",
  unmerged = "‡",
  untracked = "?",
}

function vim.getVisualSelection()
  local current_clipboard_content = vim.fn.getreg('"')

  vim.cmd('noau normal! "vy"')
  local text = vim.fn.getreg('v')
  vim.fn.setreg('v', {})

  vim.fn.setreg('"', current_clipboard_content)

  text = string.gsub(text, "\n", "")
  if #text > 0 then
    return text
  else
    return ''
  end
end

return {
  {
    "nvim-telescope/telescope.nvim",
    config = function()
      require("telescope").load_extension("fzf")
      require("telescope").load_extension("repo")
      require("telescope").load_extension("git_worktree")
      local actions = require("telescope.actions")

      require("telescope").setup({
        defaults = {
          border = true,
          hl_result_eol = true,
          multi_icon = "",
          vimgrep_arguments = {
            "rg",
            "--color=never",
            "--no-heading",
            "--with-filename",
            "--line-number",
            "--column",
            "--smart-case",
          },
          sorting_strategy = "ascending",
          layout_config = {
            horizontal = {
              preview_cutoff = 120,
            },
            prompt_position = "top",
          },
          file_sorter = require("telescope.sorters").get_fzy_sorter,
          prompt_prefix = "  ",
          color_devicons = true,
          git_icons = git_icons,
          -- sorting_strategy = "ascending",
          file_previewer = require("telescope.previewers").vim_buffer_cat.new,
          grep_previewer = require("telescope.previewers").vim_buffer_vimgrep.new,
          qflist_previewer = require("telescope.previewers").vim_buffer_qflist.new,
          mappings = {
            i = {
              ["<C-x>"] = false,
              ["<C-j>"] = actions.move_selection_next,
              ["<C-k>"] = actions.move_selection_previous,
              ["<C-q>"] = actions.smart_send_to_qflist + actions.open_qflist,
              ["<C-s>"] = actions.cycle_previewers_next,
              ["<C-a>"] = actions.cycle_previewers_prev,
              -- ["<C-h>"] = "which_key",
              ["<ESC>"] = actions.close,
              ["<C-d>"] = require("telescope.actions").delete_buffer,
            },
            n = {
              ["<C-s>"] = actions.cycle_previewers_next,
              ["<C-a>"] = actions.cycle_previewers_prev,
            },
          },
        },
        extensions = {
          fzf = {
            override_generic_sorter = false,
            override_file_sorter = true,
            case_mode = "smart_case",
          },
        },
      })


      vim.keymap.set("n", "<leader>ns", "<CMD>Telescope notify<CR>", { desc = "Search Notify" })
      local builtin = require("telescope.builtin")
      vim.keymap.set("n", "<leader>sh", builtin.help_tags, { desc = "Search Help" })
      vim.keymap.set("n", "<leader>sk", builtin.keymaps, { desc = "Search Keymaps" })
      vim.keymap.set("n", "<leader>st", builtin.builtin, { desc = "Search Telescope" })
      vim.keymap.set("n", "<leader>sq", builtin.quickfix, { desc = "Search Quickfix" })
      vim.keymap.set("n", "<leader>ssa", builtin.lsp_document_symbols, { desc = "Search Symbols All" })
      vim.keymap.set("n", "<leader>ssr", builtin.lsp_references, { desc = "Search Symbols References" })
      vim.keymap.set("n", "<leader>sss", function()
        builtin.lsp_document_symbols({ symbols = { "method", "function", "string" } })
      end, { desc = "Search Symbols Select functions and methods" })

      vim.keymap.set("n", "<leader>ssv", function()
        builtin.lsp_document_symbols({ symbols = { "constant", "variable" } })
      end, { desc = "Search Symbols Variable" })
      vim.keymap.set("n", "<leader>ssc", function()
        builtin.lsp_document_symbols({ symbols = { "class" } })
      end, { desc = "Search Symbols Class" })
      vim.keymap.set("n", "<leader>ssp", function()
        builtin.lsp_document_symbols({ symbols = { "property" } })
      end, { desc = "Search Symbols Property" })
      vim.keymap.set("n", "<leader>sw", builtin.grep_string, { desc = "Search current Word" })


      vim.keymap.set("v", "<leader>sv", function()
        local text = vim.getVisualSelection()
        builtin.current_buffer_fuzzy_find({ default_text = text })
        -- local selected_text = vim.fn.getreg('"'):gsub("[%-%.%+%*%?%^%$%(%)%[%]%{%}%|%\\]", "\\%1"):gsub("\n", "")
        -- require('telescope.builtin').current_buffer_fuzzy_find({ default_text = selected_text })
      end, { desc = "Search current Selection in Buffer" })
      vim.keymap.set("n", "<leader>sd", builtin.diagnostics, { desc = "Search Diagnostics" })
      vim.keymap.set("n", "<leader>sr", builtin.resume, { desc = "Search Resume" })

      vim.keymap.set("n", "<leader><leader>", function()
        builtin.buffers({ sort_lastused = true, sort_mru = true })
      end, { desc = "  Find existing buffers" })

      -- Slightly advanced example of overriding default behavior and theme
      vim.keymap.set("n", "<leader>/", function()
        -- You can pass additional configuration to Telescope to change the theme, layout, etc.
        builtin.current_buffer_fuzzy_find(require("telescope.themes").get_dropdown({
          winblend = 10,
          previewer = false,
        }))
      end, { desc = "/ Fuzzily search in current buffer" })

      vim.keymap.set("n", "<leader>ff", function()
        builtin.find_files({ no_ignore = false })
      end, { desc = "Search Files" })
      vim.keymap.set("n", "<leader>Ff", function()
        builtin.find_files({ cwd = "~" })
      end, { desc = "Search Files" })
      vim.keymap.set("n", "<leader>f.", function()
        builtin.find_files({ hidden = true })
      end, { desc = "Find . files (including hidden)" })
      vim.keymap.set("n", "<leader>f+", function()
        builtin.find_files({ hidden = true, no_ignore = true })
      end, { desc = "Find . files (including hidden and git ignore)" })
      vim.keymap.set("n", "<leader>F.", function()
        builtin.find_files({ cwd = "~", hidden = true })
      end, { desc = "Find . files (including hidden)" })
      -- It's also possible to pass additional configuration options.
      --  See `:help telescope.builtin.live_grep()` for information about particular keys
      vim.keymap.set("n", "<leader>fg", function()
        builtin.live_grep({
          hidden = true,
          additional_args = function()
            return { "--hidden" }
          end
        })
      end, { desc = "Find by Grep in project files" })
      vim.keymap.set("n", "<leader>Fg", function()
        builtin.live_grep({
          cwd = "~",
        })
      end, { desc = "Find by Grep" })
      vim.keymap.set("n", "<leader>FG", function()
        builtin.live_grep({
          cwd = "~",
          hidden = true, -- Not working in live_grep
        })
      end, { desc = "Find by Grep including hidden files" })
      vim.keymap.set("n", "<leader>fG", function()
        builtin.live_grep({
          grep_open_files = true,
          prompt_title = "Live Grep in Open Files including hidden files",
          hidden = true, -- Not working in live_grep
        })
      end, { desc = "Find by grep in open files" })
      vim.keymap.set("n", "<leader>Fr", builtin.oldfiles, { desc = 'Find Recent Files ("." for repeat)' })

      -- Shortcut for searching your Neovim configuration files
      vim.keymap.set("n", "<leader>Fn", function()
        builtin.find_files({ cwd = vim.fn.stdpath("config") })
      end, { desc = "Find Neovim files" })
    end,
    dependencies = {
      { "nvim-lua/popup.nvim" },
      { "nvim-lua/plenary.nvim" },
      { "nvim-telescope/telescope-fzf-native.nvim", build = "make" },
      { "cljoly/telescope-repo.nvim" },
    },
    cmd = "Telescope",
    keys = {
      -- { "<C-p>", "<CMD>lua require('plugins.telescope.pickers').project_files()<CR>" },
      -- { "<S-p>", "<CMD>()<CR>" },
      -- {
      -- 	"<Leader>pf",
      -- 	"<CMD>lua require('plugins.telescope.pickers').project_files({ default_text = vim.fn.expand('<cword>'), initial_mode = 'normal' })<CR>",
      -- },
      -- { "<Leader>pw", "<CMD>lua require('telescope.builtin').grep_string({ initial_mode = 'normal' })<CR>" },
      -- {
      -- 	"<Leader>sb",
      -- 	"<CMD>lua require('plugins.telescope.pickers').buffer_search()<CR>",
      -- 	{ desc = "Buffer Search" },
      -- },
    },
  },
}

================
File: lua/plugins/testing.lua
================
return {
  {
    "andythigpen/nvim-coverage",
    dependencies = "nvim-lua/plenary.nvim",
    cmd = {
      "Coverage",
      "CoverageSummary",
      "CoverageLoad",
      "CoverageShow",
      "CoverageHide",
      "CoverageToggle",
      "CoverageClear",
    },
    config = function()
      require("coverage").setup()
    end,
  },

  {
    "nvim-neotest/neotest",
    dependencies = {
      "nvim-neotest/nvim-nio",
      "nvim-lua/plenary.nvim",
      "nvim-treesitter/nvim-treesitter",
      "antoinemadec/FixCursorHold.nvim",
      "nvim-neotest/neotest-jest",
    },
    config = function()
      require('neotest').setup {
        adapters = {
          require("neotest-jest")({
            jestCommand = "npm test --",
            env = { CI = true },
            cwd = function(path)
              return vim.fn.getcwd()
            end,
          }),
        },
        diagnostic = {
          enabled = false
        },
        floating = {
          border = EcoVim.ui.float.border or "rounded",
          max_height = 0.6,
          max_width = 0.6
        },
        highlights = {
          adapter_name = "NeotestAdapterName",
          border = "NeotestBorder",
          dir = "NeotestDir",
          expand_marker = "NeotestExpandMarker",
          failed = "NeotestFailed",
          file = "NeotestFile",
          focused = "NeotestFocused",
          indent = "NeotestIndent",
          namespace = "NeotestNamespace",
          passed = "NeotestPassed",
          running = "NeotestRunning",
          skipped = "NeotestSkipped",
          test = "NeotestTest"
        },
        icons = {
          child_indent = "│",
          child_prefix = "├",
          collapsed = "─",
          expanded = "╮",
          failed = "✖",
          final_child_indent = " ",
          final_child_prefix = "╰",
          non_collapsible = "─",
          passed = "✔",
          running = "",
          skipped = "ﰸ",
          unknown = "?"
        },
        output = {
          enabled = true,
          open_on_run = true,
        },
        run = {
          enabled = true
        },
        status = {
          enabled = true
        },
        strategies = {
          integrated = {
            height = 40,
            width = 120
          }
        },
        summary = {
          enabled = true,
          expand_errors = true,
          follow = true,
          mappings = {
            attach = "a",
            expand = { "<CR>", "<2-LeftMouse>" },
            expand_all = "e",
            jumpto = "i",
            output = "o",
            run = "r",
            short = "O",
            stop = "u"
          }
        }
      }
    end
  }
}

================
File: lua/plugins/text-case.lua
================
return {
  {
    "johmsalas/text-case.nvim",
    dependencies = { "nvim-telescope/telescope.nvim" },
    -- Author's Note: If default keymappings fail to register (possible config issue in my local setup),
    -- verify lazy loading functionality. On failure, disable lazy load and report issue
    -- lazy = false,
    config = function()
      require("textcase").setup(
        {
          -- Set `default_keymappings_enabled` to false if you don't want automatic keymappings to be registered.
          default_keymappings_enabled = true,
          -- `prefix` is only considered if `default_keymappings_enabled` is true. It configures the prefix
          -- of the keymappings, e.g. `guu ` executes the `current_word` method with `to_upper_case`
          -- and `guou` executes the `operator` method with `to_upper_case`.
          prefix = "gu",
          -- If `substitude_command_name` is not nil, an additional command with the passed in name
          -- will be created that does the same thing as "Subs" does.
          substitude_command_name = nil,
          -- By default, all methods are enabled. If you set this option with some methods omitted,
          -- these methods will not be registered in the default keymappings. The methods will still
          -- be accessible when calling the exact lua function e.g.:
          -- "<CMD>lua require('textcase').current_word('to_snake_case')<CR>"
          enabled_methods = {
            "to_upper_case",
            "to_lower_case",
            "to_camel_case",
            "to_snake_case",
            -- "to_dash_case",
            "to_title_dash_case",
            "to_constant_case",
            "to_dot_case",
            "to_phrase_case",
            "to_pascal_case",
            "to_title_case",
            "to_path_case",
            "to_upper_phrase_case",
            "to_lower_phrase_case",
          },
        }
      )
      require("telescope").load_extension("textcase")
      vim.api.nvim_set_keymap('n', 'gu.', '<cmd>TextCaseOpenTelescope<CR>', { desc = "Text case telescope" })
      vim.api.nvim_set_keymap('v', 'gu.', "<cmd>TextCaseOpenTelescope<CR>", { desc = "Text case telescope" })
    end,
    cmd = { "TextCaseOpenTelescope", "Subs" },
    keys = { "gu" }
  },
}

================
File: lua/plugins/todo-comments.lua
================
return {
  {
    "folke/todo-comments.nvim",
    lazy = false,
    event = "BufEnter",
    opts = {
      signs = true,      -- show icons in the signs column
      sign_priority = 8, -- sign priority
      -- keywords recognized as todo comments
      keywords = {
        FIX = {
          alt = { "FIXME", "BUG", "FIXIT", "ISSUE" }, -- a set of other keywords that all map to this FIX keywords
        },
        WARN = { alt = { "WARNING" } },
        PERF = { alt = { "OPTIM", "PERFORMANCE", "OPTIMIZE" } },
      },
      highlight = {
        before = "",                     -- "fg" or "bg" or empty
        keyword = "wide",                -- "fg", "bg", "wide" or empty. (wide is the same as bg, but will also highlight surrounding characters)
        after = "fg",                    -- "fg" or "bg" or empty
        pattern = [[.*<(KEYWORDS)\s*:]], -- pattern or table of patterns, used for highlightng (vim regex)
        comments_only = true,            -- uses treesitter to match keywords in comments only
        max_line_len = 400,              -- ignore lines longer than this
        exclude = {},                    -- list of file types to exclude highlighting
      },
    },
    keys = {
      { "n", "]t", function() require("todo-comments").jump_next() end, { desc = "Next todo comment" } },
      { "n", "[t", function() require("todo-comments").jump_prev() end, { desc = "Previous todo comment" } }
    }
  }
}

================
File: lua/plugins/toggleterm.lua
================
return {
  {
    "akinsho/toggleterm.nvim",
    version = "*",
    config = function()
      function _G.set_terminal_keymaps()
        local opts = { noremap = true }
        vim.api.nvim_buf_set_keymap(0, 't', '<esc>', [[<C-\><C-n>]], opts)
        vim.api.nvim_buf_set_keymap(0, 't', '<C-h>', [[<C-\><C-n><C-W>h]], opts)
        vim.api.nvim_buf_set_keymap(0, 't', '<C-j>', [[<C-\><C-n><C-W>j]], opts)
        vim.api.nvim_buf_set_keymap(0, 't', '<C-k>', [[<C-\><C-n><C-W>k]], opts)
        vim.api.nvim_buf_set_keymap(0, 't', '<C-l>', [[<C-\><C-n><C-W>l]], opts)
      end

      vim.cmd('autocmd! TermOpen term://*toggleterm#* lua set_terminal_keymaps()')

      require('toggleterm').setup({
        -- size can be a number or function which is passed the current terminal
        size = function(term)
          if term.direction == "horizontal" then
            return 15
          elseif term.direction == "vertical" then
            return vim.o.columns * 0.4
          end
        end,
        open_mapping = [[<F12>]],
        ---@diagnostic disable-next-line: unused-local
        on_open = function(term)
        end,
        ---@diagnostic disable-next-line: unused-local
        on_close = function(term)
        end,
        highlights = {
          -- highlights which map to a highlight group name and a table of it's values
          -- NOTE: this is only a subset of values, any group placed here will be set for the terminal window split
          Normal = {
            link = 'Normal'
          },
          NormalFloat = {
            link = 'Normal'
          },
          FloatBorder = {
            -- guifg = <VALUE-HERE>,
            -- guibg = <VALUE-HERE>,
            link = 'FloatBorder'
          },
        },
        shade_filetypes = {},
        shade_terminals = false,
        shading_factor = 1,       -- the degree by which to darken to terminal colour, default: 1 for dark backgrounds, 3 for light
        start_in_insert = true,
        insert_mappings = true,   -- whether or not the open mapping applies in insert mode
        persist_size = true,
        direction = 'horizontal', -- | 'horizontal' | 'window' | 'float',
        close_on_exit = true,     -- close the terminal window when the process exits
        shell = vim.o.shell,      -- change the default shell
        -- This field is only relevant if direction is set to 'float'
        float_opts = {
          -- The border key is *almost* the same as 'nvim_win_open'
          -- see :h nvim_win_open for details on borders however
          -- the 'curved' border is a custom border type
          -- not natively supported but implemented in this plugin.
          border = 'curved', -- single/double/shadow/curved
          width = math.floor(0.7 * vim.fn.winwidth(0)),
          height = math.floor(0.8 * vim.fn.winheight(0)),
          winblend = 4,
        },
        winbar = {
          enabled = true,
        },
      })
    end,
    keys = {
      { "<F12>" }, -- use 2<F12> to toggle terminal 2 and so on
      { "<Leader>wf", "<cmd>ToggleTerm direction=float<CR>", desc = "terminal float" }
    }
  }
}

================
File: lua/plugins/treesitter.lua
================
return {
  {
    "nvim-treesitter/nvim-treesitter",
    event = "BufReadPre",
    config = function()
      require("nvim-treesitter.configs").setup({
        ensure_installed = {
          "tsx",
          "typescript",
          "javascript",
          "html",
          "css",
          "vue",
          "astro",
          "svelte",
          "gitcommit",
          "graphql",
          "json",
          "json5",
          "lua",
          "markdown",
          "prisma",
          "vim",
        "powershell",
        },                              -- one of "all", or a list of languages
        sync_install = false,           -- install languages synchronously (only applied to `ensure_installed`)
        ignore_install = { "haskell" }, -- list of parsers to ignore installing
        highlight = {
          enable = true,
          -- disable = { "c", "rust" },  -- list of language that will be disabled
          -- additional_vim_regex_highlighting = false,
        },

        incremental_selection = {
          enable = false,
          keymaps = {
            init_selection = "<leader>gnn",
            node_incremental = "<leader>gnr",
            scope_incremental = "<leader>gne",
            node_decremental = "<leader>gnt",
          },
        },

        indent = {
          enable = true,
        },

        textobjects = {
          move = {
            enable = true,
            set_jumps = true, -- whether to set jumps in the jumplist
            goto_next_start = {
              ["]]"] = "@jsx.element",
              ["]f"] = "@function.outer",
              ["]m"] = "@class.outer",
            },
            goto_next_end = {
              ["]F"] = "@function.outer",
              ["]M"] = "@class.outer",
            },
            goto_previous_start = {
              ["[["] = "@jsx.element",
              ["[f"] = "@function.outer",
              ["[m"] = "@class.outer",
            },
            goto_previous_end = {
              ["[F"] = "@function.outer",
              ["[M"] = "@class.outer",
            },
          },
          select = {
            enable = true,

            -- Automatically jump forward to textobj, similar to targets.vim
            lookahead = true,

            keymaps = {
              -- You can use the capture groups defined in textobjects.scm
              ["af"] = "@function.outer",
              ["if"] = "@function.inner",
              ["ac"] = "@class.outer",
              ["ic"] = "@class.inner",
            },
          },
          swap = {
            enable = true,
            swap_next = {
              ["~"] = "@parameter.inner",
            },
          },
        },

        textsubjects = {
          enable = true,
          prev_selection = "<BS>",
          keymaps = {
            ["<CR>"] = "textsubjects-smart", -- works in visual mode
          },
        },
      })
      local ts_repeat_move = require("nvim-treesitter.textobjects.repeatable_move")

      -- Repeat movement with ; and ,
      -- ensure ; goes forward and , goes backward regardless of the last direction
      vim.keymap.set({ "n", "x", "o" }, ";", ts_repeat_move.repeat_last_move_next)
      vim.keymap.set({ "n", "x", "o" }, ",", ts_repeat_move.repeat_last_move_previous)

      -- Language, filetype extension attach
      vim.filetype.add({ extension = {webc = 'webc'} })
      vim.treesitter.language.register('html', 'webc')
    end,
    dependencies = {
      "hiphish/rainbow-delimiters.nvim",
      "JoosepAlviste/nvim-ts-context-commentstring",
      "nvim-treesitter/nvim-treesitter-textobjects",
      "RRethy/nvim-treesitter-textsubjects",
    },
  },

  {
    "windwp/nvim-ts-autotag",
    event = "BufReadPre",
    config = function()
      require("nvim-ts-autotag").setup({
        opts = {
          enable_close = true,         -- Auto close tags
          enable_rename = true,         -- Auto rename pairs of tags
          enable_close_on_slash = true, -- Auto close on trailing </
        },
        -- Also override individual filetype configs, these take priority.
        -- Empty by default, useful if one of the "opts" global settings
        -- doesn't work well in a specific filetype
        --[[ per_filetype = {
            ["html"] = {
              enable_close = false
            }
          } ]]
      })
    end,
  },
}

================
File: lua/plugins/treesj.lua
================
return {
  {
    "Wansmer/treesj",
    enabled = false, -- Using mini splitjoin
    lazy = true,
    cmd = { "TSJToggle", "TSJSplit", "TSJJoin" },
    keys = {
      { "gJ", "<cmd>TSJToggle<CR>", desc = "Toggle Split/Join" },
    },
    opts = {
      use_default_keymaps = false
    },
  },
}

================
File: lua/plugins/trouble.lua
================
return {
  {
    "folke/trouble.nvim",
    cmd = { "Trouble" },
    opts = {}
  }
}

================
File: lua/plugins/which-key.lua
================
return {
  {
    "folke/which-key.nvim",
    event = "VeryLazy",
    lazy = true,
    config = function()
      require("plugins.which-key.setup")
    end,
  },
}

================
File: lua/plugins/yanky.lua
================
return {
  {
    'gbprod/yanky.nvim',
    -- enabled = false,
    dependencies = {
      { 'kkharji/sqlite.lua' },
    },
    opts = {
      -- ring = { storage = 'sqlite' },
    },
    keys = {
      {
        '<leader>pp',
        function()
          require('telescope').extensions.yank_history.yank_history {}
        end,
        desc = 'Open Yank History',
      },
      { 'y',     '<Plug>(YankyYank)',                      mode = { 'n', 'x' },                                desc = 'Yank text' },
      { 'p',     '<Plug>(YankyPutAfter)',                  mode = { 'n', 'x' },                                desc = 'Put yanked text after cursor' },
      { 'P',     '<Plug>(YankyPutBefore)',                 mode = { 'n', 'x' },                                desc = 'Put yanked text before cursor' },
      { '<M-p>',     '<Plug>(YankyPutAfterCharwise)',                 mode = { 'n', 'x' },                                desc = 'Put yanked text right after cursor charwise' },
      { '<M-P>',     '<Plug>(YankyPutBeforeCharwise)',                 mode = { 'n', 'x' },                                desc = 'Put yanked text right before cursor charwise' },
      { 'gp',    '<Plug>(YankyGPutAfter)',                 mode = { 'n', 'x' },                                desc = 'Put yanked text after selection' },
      { 'gP',    '<Plug>(YankyGPutBefore)',                mode = { 'n', 'x' },                                desc = 'Put yanked text before selection' },
      { '<c-p>', '<Plug>(YankyPreviousEntry)',             desc = 'Select previous entry through yank history' },
      { '<c-n>', '<Plug>(YankyNextEntry)',                 desc = 'Select next entry through yank history' },
      { ']p',    '<Plug>(YankyPutIndentAfterLinewise)',    desc = 'Put indented after cursor (linewise)' },
      { '[p',    '<Plug>(YankyPutIndentBeforeLinewise)',   desc = 'Put indented before cursor (linewise)' },
      { ']P',    '<Plug>(YankyPutIndentAfterLinewise)',    desc = 'Put indented after cursor (linewise)' },
      { '[P',    '<Plug>(YankyPutIndentBeforeLinewise)',   desc = 'Put indented before cursor (linewise)' },
      { '>p',    '<Plug>(YankyPutIndentAfterShiftRight)',  desc = 'Put and indent right' },
      { '<p',    '<Plug>(YankyPutIndentAfterShiftLeft)',   desc = 'Put and indent left' },
      { '>P',    '<Plug>(YankyPutIndentBeforeShiftRight)', desc = 'Put before and indent right' },
      { '<P',    '<Plug>(YankyPutIndentBeforeShiftLeft)',  desc = 'Put before and indent left' },
      { '=p',    '<Plug>(YankyPutAfterFilter)',            desc = 'Put after applying a filter' },
      { '=P',    '<Plug>(YankyPutBeforeFilter)',           desc = 'Put before applying a filter' },
    },
    highlight = {
      on_put = true,
      on_yank = true,
      timer = 1500,
    },
    config = function()
      require("yanky").setup(
        {
          ring = {
            history_length = 100,
            storage = "shada",
            storage_path = vim.fn.stdpath("data") .. "/databases/yanky.db", -- Only for sqlite storage
            sync_with_numbered_registers = true,
            cancel_event = "update",
            ignore_registers = { "_" },
            update_register_on_cycle = true,
          }
        })
    end
  },
}

================
File: lua/user/create-page.lua
================
local M = {}

-- Function to find project root (where src/content/page exists)
local function find_project_root()
  local current = vim.fn.getcwd()
  local page_path = current .. "/src/content/posts" -- FIXME: Make this configurable from cwd

  if vim.fn.isdirectory(page_path) == 1 then
    return page_path
  end
  return nil
end

-- Function to get all subdirectories in the page directory
local function get_page_directories()
  local page_root = find_project_root()
  if not page_root then
    return {}
  end

  local dirs = {}
  local handle = vim.loop.fs_scandir(page_root)
  if handle then
    while true do
      local name, type = vim.loop.fs_scandir_next(handle)
      if not name then break end
      if type == 'directory' then
        table.insert(dirs, page_root .. '/' .. name)
      end
    end
  end

  -- Add page root itself as an option
  table.insert(dirs, page_root)
  return dirs
end

-- Function to create new page entry
function M.create_page_entry()
  local dirs = get_page_directories()
  if #dirs == 0 then
    vim.notify("No valid page directory found", vim.log.levels.ERROR)
    return
  end

  -- Use telescope for directory selection
  require('telescope.pickers').new({}, {
    prompt_title = 'Select Directory for page Entry',
    finder = require('telescope.finders').new_table({
      results = dirs,
      entry_maker = function(entry)
        return {
          value = entry,
          display = entry:gsub(vim.fn.getcwd() .. "/", ""),
          ordinal = entry,
        }
      end,
    }),
    sorter = require('telescope.sorters').get_generic_fuzzy_sorter(),
    attach_mappings = function(prompt_bufnr, map)
      local actions = require('telescope.actions')
      actions.select_default:replace(function()
        actions.close(prompt_bufnr)
        local selection = require('telescope.actions.state').get_selected_entry()

        vim.cmd('startinsert') -- FIXME: Should make prompt go in insert mode
        -- Prompt for title

        vim.ui.input({ prompt = "Enter blog post title: " }, function(title)
          if not title or title == "" then
            vim.notify("Blog post creation cancelled", vim.log.levels.WARN)
            return
          end

          -- Prompt for categories
          -- vim.ui.input({ prompt = "Enter categories (comma separated): ", default = "community" }, function(categories)
          --   if not categories then categories = "community" end

          -- Prompt for tags
          -- vim.ui.input({ prompt = "Enter tags (comma separated): ", default = "technology,community,homestead" }, function(tags)
          --   if not tags then tags = "technology,community,homestead" end

          -- Prompt for author
          vim.ui.input({ prompt = "Enter author name: ", default = "Jonathan" }, function(author)
            if not author then author = "Jonathan" end

            -- Create page entry using the Node.js script
            local cmd = string.format('node %s/create-page.js "%s" "%s" "%s"',
              vim.fn.getcwd(),
              selection.value,
              title,
              -- categories,
              -- tags,
              author)

            local output = vim.fn.system(cmd)

            if vim.v.shell_error == 0 then
              vim.notify("Blog post created successfully", vim.log.levels.INFO)

              -- Extract file path from output
              local file_path = output:match("Files created: ([^,]+)")
              if file_path then
                vim.cmd('edit ' .. file_path)
              else
                -- Fallback to a guessed path based on title
                local slug = title:lower():gsub(" ", "-"):gsub("[^%w-]", "")
                local guessed_path = selection.value .. "/" .. slug .. "/" .. slug .. "-en.md"
                vim.cmd('edit ' .. guessed_path)
              end
            else
              vim.notify("Failed to create page entry: " .. output, vim.log.levels.ERROR)
            end
          end)
        end)
      end)
      --   end)
      -- end)
      return true
    end,
  }):find()
end

-- Command to create a new page entry
vim.api.nvim_create_user_command('PageNew', M.create_page_entry, {})

vim.keymap.set('n', '<leader>pn', M.create_page_entry, {
  desc = "Create new blog post",
  silent = true
})

function M.setup(opts)
  opts = opts or {}
  local keymap = opts.keymap or '<leader>pn' -- default keymap

  vim.keymap.set('n', keymap, M.create_page_entry, {
    desc = "Create new blog post",
    silent = true
  })
end

return M

================
File: lua/utils/_ufo.lua
================
local M = {}

-- ╭──────────────────────────────────────────────────────────╮
-- │ Custom handler function                                  │
-- ╰──────────────────────────────────────────────────────────╯
M.handler = function(virtText, lnum, endLnum, width, truncate)
  local newVirtText = {}
  local suffix = (' 󰁂 %d '):format(endLnum - lnum)
  local sufWidth = vim.fn.strdisplaywidth(suffix)
  local targetWidth = width - sufWidth
  local curWidth = 0

  for _, chunk in ipairs(virtText) do
    local chunkText = chunk[1]
    local chunkWidth = vim.fn.strdisplaywidth(chunkText)
    if targetWidth > curWidth + chunkWidth then
      table.insert(newVirtText, chunk)
    else
      chunkText = truncate(chunkText, targetWidth - curWidth)
      local hlGroup = chunk[2]
      table.insert(newVirtText, { chunkText, hlGroup })
      chunkWidth = vim.fn.strdisplaywidth(chunkText)
      -- str width returned from truncate() may less than 2nd argument, need padding
      if curWidth + chunkWidth < targetWidth then
        suffix = suffix .. (' '):rep(targetWidth - curWidth - chunkWidth)
      end
      break
    end
    curWidth = curWidth + chunkWidth
  end

  table.insert(newVirtText, { suffix, 'MoreMsg' })

  return newVirtText
end

return M

================
File: lua/utils/functions.lua
================
local utils = require("utils")

local async_present, async = pcall(require, "plenary.async")

-- Exported functions
local M = {}

M.first_ecovim_run = function()
	local is_first_run = utils.file_exists("/tmp/first-ecovim-run")

	if is_first_run then
		async.run(function()
			require("notify")(
				"Welcome to Ecovim! Hope you'll have a nice experience!",
				"info",
				{ title = "Ecovim", timeout = 5000 }
			)
			require("notify")(
				"Please install treesitter servers manually by :TSInstall command.",
				"info",
				{ title = "Installation", timeout = 10000 }
			)
		end)
		local suc = os.remove("/tmp/first-ecovim-run")
		if not suc then
			print("Error: Couldn't remove /tmp/first-ecovim-run!")
		end
	end
end

M.first_ecovim_run()

local present, win = pcall(require, "lspconfig.ui.windows")
if not present then
	return
end

local _default_opts = win.default_opts
win.default_opts = function(options)
	local opts = _default_opts(options)
	opts.border = EcoVim.ui.float.border
	return opts
end

-- https://github.com/lunarmodules/Penlight/blob/master/lua/pl/utils.lua
-- An iterator over all non-integer keys (inverse of `ipairs`).
-- This uses `pairs` under the hood, so any value that is iterable using `pairs`
-- will work with this function.
M.kpairs = function(t)
	local index
	return function()
		local value
		while true do
			index, value = next(t, index)
			if type(index) ~= "number" or math.floor(index) ~= index then
				break
			end
		end
		return index, value
	end
end

-- Executes a user-supplied "reducer" callback function on each element of the table indexed with a numeric key, in order, passing in the return value from the calculation on the preceding element
M.ireduce = function(tbl, func, acc)
	for i, v in ipairs(tbl) do
		acc = func(acc, v, i)
	end
	return acc
end

-- Executes a user-supplied "reducer" callback function on each key element of the table indexed with a string key, in order, passing in the return value from the calculation on the preceding element
M.kreduce = function(tbl, func, acc)
	for i, v in pairs(tbl) do
		if type(i) == "string" then
			acc = func(acc, v, i)
		end
	end
	return acc
end

-- Executes a user-supplied "reducer" callback function on each element of the table, in order, passing in the return value from the calculation on the preceding element
M.reduce = function(tbl, func, acc)
	for i, v in pairs(tbl) do
		acc = func(acc, v, i)
	end
	return acc
end

-- Returns the index of the first element in the array that satisfies the provided testing function
M.find_index = function(tbl, func)
	for index, item in ipairs(tbl) do
		if func(item, index) then
			return index
		end
	end

	return nil
end

M.isome = function(tbl, func)
	for index, item in ipairs(tbl) do
		if func(item, index) then
			return true
		end
	end

	return false
end

-- Returns the first element in the array that satisfies the provided testing function
M.ifind = function(tbl, func)
	for index, item in ipairs(tbl) do
		if func(item, index) then
			return item
		end
	end

	return nil
end

M.find_last_index = function(tbl, func)
	for index = #tbl, 1, -1 do
		if func(tbl[index], index) then
			return index
		end
	end
end

M.slice = function(tbl, startIndex, endIndex)
	local sliced = {}
	endIndex = endIndex or #tbl

	for index = startIndex, endIndex do
		table.insert(sliced, tbl[index])
	end

	return sliced
end

M.concat = function(...)
	local concatenated = {}

	for _, tbl in ipairs({ ... }) do
		for _, value in ipairs(tbl) do
			table.insert(concatenated, value)
		end
	end

	return concatenated
end

-- Creates a new table populated with the results of calling a provided functions on every numeric indexed element in the calling table
M.imap = function(tbl, func)
	return M.ireduce(tbl, function(new_tbl, value, index)
		table.insert(new_tbl, func(value, index))
		return new_tbl
	end, {})
end

M.ieach = function(tbl, func)
	for index, element in ipairs(tbl) do
		func(element, index)
	end
end

-- Returns an array of a given table's string-keyed property names.
M.keys = function(tbl)
	local keys = {}
	for key, _ in M.kpairs(tbl) do
		table.insert(keys, key)
	end
	return keys
end

-- Returns an array of a given table's numbered-keyed property names.
M.indexes = function(tbl)
	local indexes = {}
	for key, _ in ipairs(tbl) do
		table.insert(indexes, key)
	end
	return indexes
end

-- Creates a new function that, when called, has its arguments preceded by any provided ones
M.bind = function(func, ...)
	local boundArgs = { ... }

	return function(...)
		return func(unpack(boundArgs), ...)
	end
end

M.ifilter = function(tbl, func)
	return vim.tbl_filter(func, tbl)
end

M.switch = function(param, t)
	local case = t[param]
	if case then
		return case()
	end
	local defaultFn = t["default"]
	return defaultFn and defaultFn() or nil
end

M.trim = function(str)
	return (str:gsub("^%s*(.-)%s*$", "%1"))
end

M.ignore = function() end

M.always = function(value)
	return function()
		return value
	end
end

return M

================
File: lua/utils/git.lua
================
local utils = require('utils')

local M = {}

local function process_abbrev_head(gitdir, head_str, path)
  if not gitdir then
    return head_str
  end

  if head_str == "HEAD" then
    return vim.fn.trim(M.run_git_cmd("cd " .. path .. " && git --no-pager rev-parse --short HEAD"))
  end

  return head_str
end

function M.run_git_cmd(cmd)
  local cmd_result = vim.fn.system(cmd)
  if cmd_result == nil or utils.starts_with(cmd_result, "fatal:") then
    return nil
  end

  return cmd_result
end

function M.get_git_repo()
  local gsd = vim.b.gitsigns_status_dict
  if gsd and gsd.root and #gsd.root > 0 then
    return gsd.root
  end

  local git_root, _ = M.get_repo_info()
  return git_root
end

function M.get_current_branch_name()
  local gsd = vim.b.gitsigns_status_dict
  if gsd and gsd.head and #gsd.head > 0 then
    return gsd.head
  end

  local _, abbrev_head = M.get_repo_info()
  return abbrev_head
end

function M.get_repo_info()
  local cwd = vim.fn.expand "%:p:h"
  local data = vim.fn.trim(
    M.run_git_cmd("cd " .. cwd .. " && git --no-pager rev-parse --show-toplevel --absolute-git-dir --abbrev-ref HEAD")
  )
  local results = utils.split(data, "\n")

  local git_root = results[1]
  local abbrev_head = process_abbrev_head(results[2], results[3], cwd)

  return git_root, abbrev_head
end

return M

================
File: lua/utils/globals.lua
================
P = function(v)
  print(vim.print(v))
  return v
end

RELOAD = function(...)
  return require("plenary.reload").reload_module(...)
end

R = function(name)
  RELOAD(name)
  return require(name)
end

GIT_CWD = function()
  return vim.fn.systemlist("git rev-parse --show-toplevel")[1] .. "/"
end

================
File: lua/utils/icons.lua
================
local icons = {
  abc                 = "  ",
  array               = "  ",
  arrowReturn         = "  ",
  bigCircle           = "  ",
  bigUnfilledCircle   = "  ",
  bomb                = "  ",
  bookMark            = "  ",
  boolean             = "  ",
  box                 = " 󰅫 ",
  buffer              = "  ",
  bug                 = "  ",
  calculator          = "  ",
  calendar            = "  ",
  caretRight          = "",
  checkSquare         = "  ",
  copilot             = "",
  codeium             = "",
  exit                = " 󰗼 ",
  chevronRight        = "",
  circle              = "  ",
  class               = "  ",
  close               = "  ",
  code                = "  ",
  cog                 = "  ",
  color               = "  ",
  comment             = "  ",
  constant            = "  ",
  constructor         = "  ",
  container           = "  ",
  console             = " 󰞷 ",
  consoleDebug        = "  ",
  cubeTree            = "  ",
  dashboard           = "  ",
  database            = "  ",
  enum                = "  ",
  enumMember          = "  ",
  error               = "  ",
  errorOutline        = "  ",
  errorSlash          = " ﰸ ",
  event               = "  ",
  field               = "  ",
  file                = "  ",
  fileBg              = "  ",
  fileCopy            = "  ",
  fileCutCorner       = "  ",
  fileNoBg            = "  ",
  fileNoLines         = "  ",
  fileNoLinesBg       = "  ",
  fileRecent          = "  ",
  fire                = "  ",
  folder              = "  ",
  folderNoBg          = "  ",
  folderOpen          = "  ",
  folderOpen2         = " 󰉖 ",
  folderOpenNoBg      = "  ",
  forbidden           = " 󰍛 ",
  func                = "  ",
  gear                = "  ",
  gears               = "  ",
  git                 = "  ",
  gitAdd              = "  ",
  gitChange           = " 󰏬 ",
  gitRemove           = "  ",
  hexCutOut           = "  ",
  history             = "  ",
  hook                = " ﯠ ",
  info                = "  ",
  infoOutline         = "  ",
  interface           = "  ",
  key                 = "  ",
  keyword             = "  ",
  light               = "  ",
  lightbulb           = "  ",
  lightbulbOutline    = "  ",
  list                = "  ",
  lock                = "  ",
  m                   = " m ",
  method              = "  ",
  module              = "  ",
  newFile             = "  ",
  note                = " 󰎚 ",
  number              = "  ",
  numbers             = "  ",
  object              = "  ",
  operator            = "  ",
  package             = " 󰏓 ",
  packageUp           = " 󰏕 ",
  packageDown         = " 󰏔 ",
  paint               = "  ",
  paragraph           = " 󰉢 ",
  pencil              = "  ",
  pie                 = "  ",
  pin                 = " 󰐃 ",
  project             = "  ",
  property            = "  ",
  questionCircle      = "  ",
  reference           = "  ",
  ribbon              = " 󰑠 ",
  robot               = " 󰚩 ",
  scissors            = "  ",
  scope               = "  ",
  search              = "  ",
  settings            = "  ",
  signIn              = "  ",
  snippet             = "  ",
  sort                = "  ",
  spell               = " 暈",
  squirrel            = "  ",
  stack               = "  ",
  string              = "  ",
  struct              = "  ",
  table               = "  ",
  tag                 = "  ",
  telescope           = "  ",
  terminal            = "  ",
  text                = "  ",
  threeDots           = " 󰇘 ",
  threeDotsBoxed      = "  ",
  timer               = "  ",
  trash               = "  ",
  tree                = "  ",
  treeDiagram         = " 󰙅 ",
  typeParameter       = "  ",
  unit                = "  ",
  up_hexagon          = " 󰋘 ",
  value               = "  ",
  variable            = "  ",
  warningCircle       = "  ",
  vim                 = "  ",
  warningTriangle     = "  ",
  warningTriangleNoBg = "  ",
  watch               = "  ",
  word                = "  ",
  wrench              = "  ",
}

return icons

================
File: lua/utils/init.lua
================
local M = {}
local fn = vim.fn

M.file_exists = function(path)
  local f = io.open(path, "r")
  if f ~= nil then io.close(f) return true else return false end
end

M.get_relative_fname = function()
  local fname = vim.fn.expand('%:p')
  return fname:gsub(vim.fn.getcwd() .. '/', '')
end

M.get_relative_gitpath = function()
  local fpath = vim.fn.expand('%:h')
  local fname = vim.fn.expand('%:t')
  local gitpath = vim.fn.systemlist('git rev-parse --show-toplevel')[1]
  local relative_gitpath = fpath:gsub(gitpath, '') .. '/' .. fname

  return relative_gitpath
end

M.sleep = function(n)
  os.execute("sleep " .. tonumber(n))
end

M.toggle_quicklist = function()
  if fn.empty(fn.filter(fn.getwininfo(), 'v:val.quickfix')) == 1 then
    vim.cmd('copen')
  else
    vim.cmd('cclose')
  end
end

M.starts_with = function(str, start)
  return str:sub(1, #start) == start
end

M.end_with = function(str, ending)
  return ending == "" or str:sub(- #ending) == ending
end

M.split = function(s, delimiter)
  local result = {}
  for match in (s .. delimiter):gmatch("(.-)" .. delimiter) do
    table.insert(result, match)
  end

  return result
end

M.handle_job_data = function(data)
  if not data then
    return nil
  end
  if data[#data] == "" then
    table.remove(data, #data)
  end
  if #data < 1 then
    return nil
  end
  return data
end

M.log = function(message, title)
  require('notify')(message, "info", { title = title or "Info" })
end

M.warnlog = function(message, title)
  require('notify')(message, "warn", { title = title or "Warning" })
end

M.errorlog = function(message, title)
  require('notify')(message, "error", { title = title or "Error" })
end

M.jobstart = function(cmd, on_finish)
  local has_error = false
  local lines = {}

  local function on_event(_, data, event)
    if event == "stdout" then
      data = M.handle_job_data(data)
      if not data then
        return
      end

      for i = 1, #data do
        table.insert(lines, data[i])
      end
    elseif event == "stderr" then
      data = M.handle_job_data(data)
      if not data then
        return
      end

      has_error = true
      local error_message = ""
      for _, line in ipairs(data) do
        error_message = error_message .. line
      end
      M.log("Error during running a job: " .. error_message)
    elseif event == "exit" then
      if not has_error then
        on_finish(lines)
      end
    end
  end

  vim.fn.jobstart(cmd, {
    on_stderr = on_event,
    on_stdout = on_event,
    on_exit = on_event,
    stdout_buffered = true,
    stderr_buffered = true,
  })
end

M.remove_whitespaces = function(string)
  return string:gsub("%s+", "")
end

M.add_whitespaces = function(number)
  return string.rep(" ", number)
end

M.closeOtherBuffers = function()
  for _, e in ipairs(require("bufferline").get_elements().elements) do
    vim.schedule(function()
      if e.id == vim.api.nvim_get_current_buf() then
        return
      elseif pcall(require, 'mini.bufremove') then
        require('mini.bufremove').delete(e.id, false)
      else
        vim.cmd("bd " .. e.id)
      end
    end)
  end
end

M.is_plugin_loaded = function(plugin_name)
  local lazy_status_ok, lazy = pcall(require, "lazy")
  if not lazy_status_ok then
    return
  end

  local plugin = lazy.plugins[plugin_name]
  return plugin and plugin.loaded
end

return M

================
File: lua/.luarc.json
================
{
  "$schema": "https://raw.githubusercontent.com/sumneko/vscode-lua/master/setting/schema.json",
  "Lua.diagnostics.globals": ["vim", "bit", "require"]
}

================
File: snippets/lua.json
================
{"test":{"body":["keys= {","  \"<Leader>asa\",","  \"<Leader>ase\",","},"],"prefix":"test"}}

================
File: snippets/package.json
================
{"name":"my-snippets","contributes":{"snippets":[{"language":["lua"],"path":".\/lua.json"}]},"description":"This package.json has been generated by nvim-scissors."}

================
File: syntax/qf.vim
================
if exists('b:current_syntax')
    finish
endif

syn match qfFileName /^[^│]*/ nextgroup=qfSeparatorLeft
syn match qfSeparatorLeft /│/ contained nextgroup=qfLineNr
syn match qfLineNr /[^│]*/ contained nextgroup=qfSeparatorRight
syn match qfSeparatorRight '│' contained nextgroup=qfError,qfWarning,qfInfo,qfNote
syn match qfError / E .*$/ contained
syn match qfWarning / W .*$/ contained
syn match qfInfo / I .*$/ contained
syn match qfNote / [NH] .*$/ contained

hi def link qfFileName Directory
hi def link qfSeparatorLeft Delimiter
hi def link qfSeparatorRight Delimiter
hi def link qfLineNr LineNr
hi def link qfError DiagnosticError
hi def link qfWarning DiagnosticWarn
hi def link qfInfo DiagnosticInfo
hi def link qfNote DiagnosticHint

let b:current_syntax = 'qf'

================
File: CHANGELOG.md
================
# Changelog

All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.

## [4.0.0](https://github.com/ecosse3/nvim/compare/v3.9.0...v4.0.0) (2024-09-06)


### ⚠ BREAKING CHANGES

#### This version contains breaking changes in the way how files are structured and how plugins are loaded. The `lua/config/plugins.lua` file with all plugins is deprecated and each plugin is managed separately via file inside `plugins` directory.

* **lsp:** integrate vtsls for TypeScript language support
* **plugins:** new external blame setup
* **plugins:** add new ultimate-autopairs configuration
* **plugins:** setup for package-info.nvim
* **plugins:** printer setup
* **plugins:** refactoring plugin configuration
* **plugins:** scissors plugin configuration
* **plugins:** session manager configuration and key mappings
* **plugins:** setup for Alpha.nvim dashboard plugin
* **plugins:** spectre plugin with refactor key mappings
* **plugins:** spider.lua plugin configuration
* **plugins:** add stay-in-place plugin configuration
* **plugins:** remove custom telescope pickers and git functions
* **plugins:** new configuration for todo-comments plugin
* **plugins:** new NvimTree key bindings and configuration
* **plugins:** add treesj plugin configuration
* **plugins:** update trouble plugin configuration
* **plugins:** Zen Mode setup with custom configurations
* **plugins:** deprecate plugins.lua file and manage plugins by separate file inside plugins directory

### Features

* add buffer search picker to Telescope plugin ([a99b13d](https://github.com/ecosse3/nvim/commit/a99b13d54768dc0fcda5caf543e6b3acd998cf41))
* add initial implementation of codesnap.nvim plugin ([d8ad99e](https://github.com/ecosse3/nvim/commit/d8ad99e0caaad983ee89d4f14032fcaa37ea632d))
* **autocmds:** attach jest commands to *spec.ts/tsx files ([89709b6](https://github.com/ecosse3/nvim/commit/89709b6c531258d63b883f04d6f90fcd1f836dda))
* include markdown as a recognized file type for rendering ([c3cfd04](https://github.com/ecosse3/nvim/commit/c3cfd042848577f287f069e03a9856e9438f60cc))
* **lsp:** integrate vtsls for TypeScript language support ([e48d4da](https://github.com/ecosse3/nvim/commit/e48d4da6346e5d07d37afa983fdce447e704096a))
* **neovide:** add Neovide specific configurations and keymaps ([fa69013](https://github.com/ecosse3/nvim/commit/fa690138a0510083ad2c0db5fa28ae4cf9e7c0f0))
* **neovide:** adjust transparency settings for Neovide compatibility ([f683a3a](https://github.com/ecosse3/nvim/commit/f683a3a9f828a015e0682b09ad1265dec6346874))
* **plugins:** add fidget.nvim plugin for enhanced UI feedback ([b44584c](https://github.com/ecosse3/nvim/commit/b44584c3cd7d38e405eaf9e1929e01d69227b91e))
* **plugins:** add markdown-preview plugin configuration ([c57a840](https://github.com/ecosse3/nvim/commit/c57a840081f0de179b4c9df673062fd6267a7142))
* **plugins:** add marks.nvim plugin with BufEnter event trigger ([5883e87](https://github.com/ecosse3/nvim/commit/5883e872f2c78ab3f87727dd73986f8cca10bed6))
* **plugins:** add new smart-splits plugin configuration ([9835bbf](https://github.com/ecosse3/nvim/commit/9835bbfc3804f17d4456d981d37acb9f6f1e72ca))
* **plugins:** add new tabout.lua plugin ([bc26910](https://github.com/ecosse3/nvim/commit/bc2691016f4e00e5407c95222df7bf3b48e2c8c5))
* **plugins:** add new ultimate-autopairs configuration ([619c25d](https://github.com/ecosse3/nvim/commit/619c25dae3b2ddb338878c5c7c4f5cdd1a292791))
* **plugins:** add nvim-bqf ([7f1e1d3](https://github.com/ecosse3/nvim/commit/7f1e1d3b14035a2f3e89c090b4c669ad613d0e94))
* **plugins:** add text-case plugin for text manipulation ([1be6651](https://github.com/ecosse3/nvim/commit/1be665100d99c039761bf70e5440e7fb5e1b37f4))
* **plugins:** add treesitter configuration for auto closing tags ([0a69a4f](https://github.com/ecosse3/nvim/commit/0a69a4f21a9853149fa38131b290627a230aca27))
* **plugins:** add ufo utils handler and update config handler ([6a3bc6e](https://github.com/ecosse3/nvim/commit/6a3bc6e62368218f16dacdc9c0e9e9de3196d75d))
* **plugins:** add vim-table-mode plugin for markdown files ([bb53b1a](https://github.com/ecosse3/nvim/commit/bb53b1a24ebd081ce17d2d06add8f2772946a64f))
* **plugins:** create base plugins initialization file with general plugins & subdirectories config ([5753e43](https://github.com/ecosse3/nvim/commit/5753e438f94f4b41a86a50e0c8db63ccc9dd4128))
* **plugins:** integrate echasnovski mini.align and mini.ai plugins ([729cbac](https://github.com/ecosse3/nvim/commit/729cbacde58e5f23a4d51c181cc86d3e9a2cbcfb))
* **plugins:** integrate new markdown rendering plugin with dependencies ([9a1f758](https://github.com/ecosse3/nvim/commit/9a1f758ffd5a51d859c987de0229a3f0db5b28b4))
* **plugins:** new external blame setup ([10bcb31](https://github.com/ecosse3/nvim/commit/10bcb310a3a5a44367f882ee4c7c359c5317f8e2))
* **plugins:** remove custom documentcolors and replace colorizer with nvim-highlight-colors plugin ([5d411e3](https://github.com/ecosse3/nvim/commit/5d411e3d77b903598d429067cb79842caf48165d))
* **plugins:** replace null-ls with conform & nvim-lint ([8c60d74](https://github.com/ecosse3/nvim/commit/8c60d74244cce10a6f7b0c234de51f633f2154b8))
* **plugins:** setup codeium and copilot AI integrations ([ab63e37](https://github.com/ecosse3/nvim/commit/ab63e37dc0a71089c68856b1c1bd28f79eb0a933))
* **plugins:** update copilot chat to canary version ([c2a2b6f](https://github.com/ecosse3/nvim/commit/c2a2b6f0d56eea22e2d0796d14766bbee3a4c9eb))
* **plugins:** update noice config ([91d25cf](https://github.com/ecosse3/nvim/commit/91d25cf143b410632c303c2c78ec703c0e34c513))
* **plugins:** update nvim notify plugin ([892650e](https://github.com/ecosse3/nvim/commit/892650e311ca18a1ae8578b4a99a9796f9108253))
* **queries:** extend jsx element for typescriptreact queries ([e8ba48e](https://github.com/ecosse3/nvim/commit/e8ba48efc2899f43ef5538130dfe24d77af671aa))
* **utils:** add is_plugin_loaded function for lazy loading plugins ([072aa2d](https://github.com/ecosse3/nvim/commit/072aa2dde6cfd8c14a0896cb3335307861979be7))
* **utils:** add utility functions for table manipulation ([615a01c](https://github.com/ecosse3/nvim/commit/615a01c5af00b88d90a8b8dcf51186f2ab0be21e))


### Bug Fixes

* **colorscheme:** correct 'none' values in highlight definitions ([b364497](https://github.com/ecosse3/nvim/commit/b364497bb7de0105b0eee036f4c55d5ee14f0a5e))
* **functions:** format on save ([830e804](https://github.com/ecosse3/nvim/commit/830e804b95a558929a97e638c4c7f7ae4bf6e0cf))
* **which-key:** wk.add function to registering keymaps in which-key ([5632309](https://github.com/ecosse3/nvim/commit/56323097ba3c6e1487939aa063e4ae8479bbe0b7))


### Refactors

* **colorscheme:** configure 'FiraCode Nerd Font' and 'tokyonight-night' colorscheme ([4ac3eb4](https://github.com/ecosse3/nvim/commit/4ac3eb4658d0e506ada56b9f05c5c56c6f3d1f58))
* consolidate and simplify which-key mappings ([1e0974e](https://github.com/ecosse3/nvim/commit/1e0974e2ed6b2814d5fef58be154d7369601fea8))
* **dap:** reorganize DAP setup for modular configuration ([e795b60](https://github.com/ecosse3/nvim/commit/e795b6092eb893127e9ccd2c10782d627ce62820))
* **keymappings:** change local leader map from ; to , (comma) ([c9d6ab2](https://github.com/ecosse3/nvim/commit/c9d6ab2c21b491a37a0a0bd5e01e402cd9ec7d03))
* **lsp:** enable inlay hints & virtual text by default ([8e43c71](https://github.com/ecosse3/nvim/commit/8e43c71a782254b12cf0cd24c7fae53ea00380c5))
* **lsp:** lsp plugins ([dbaa3b6](https://github.com/ecosse3/nvim/commit/dbaa3b662d656b643dba52fb20521901b235a434))
* **plugins:** add flash.nvim with lazy loading in separate file ([3be5836](https://github.com/ecosse3/nvim/commit/3be5836a1e4758032987bca31e29ca6a917ae7c0))
* **plugins:** add keymaps and setup for toggleterm plugin ([e1d374f](https://github.com/ecosse3/nvim/commit/e1d374fd099eebf939aa2dda9503e60236cd1133))
* **plugins:** add setup.lua for which-key plugin ([e60a2fd](https://github.com/ecosse3/nvim/commit/e60a2fdd04f8d98b639601a3721361a352e25ede))
* **plugins:** add stay-in-place plugin configuration ([ffd8df6](https://github.com/ecosse3/nvim/commit/ffd8df6a159d9e47989774320e3fd53b45320f31))
* **plugins:** add treesj plugin configuration ([30c4731](https://github.com/ecosse3/nvim/commit/30c4731602b5b3757be1aefe1b5aea4b35d97194))
* **plugins:** change barbar to bufferline ([450891d](https://github.com/ecosse3/nvim/commit/450891d5727055ef054a4e723ff1b08633d79058))
* **plugins:** clean up unused cinnamon plugin setup ([0c33c86](https://github.com/ecosse3/nvim/commit/0c33c8696ee109cbd5149c2a29cb0c52250ebe27))
* **plugins:** deprecate plugins.lua file and manage plugins by separate file inside plugins directory ([d28830a](https://github.com/ecosse3/nvim/commit/d28830a356e4992d9ef0d2db448b8d0ac4b7cdbc))
* **plugins:** general testing plugins file ([380264a](https://github.com/ecosse3/nvim/commit/380264a2f7bef3ef80540ff4682af47f37b48495))
* **plugins:** move git plugins configuration to a single file ([65b843c](https://github.com/ecosse3/nvim/commit/65b843c935ff2be1496340714d6ddd63e3c61318))
* **plugins:** move multicursor functionality with smoka7/multicursors.nvim plugin ([2cc4567](https://github.com/ecosse3/nvim/commit/2cc4567c697570b0602c7a79e4ba14ceb0c9a0d7))
* **plugins:** navic & winbar ([7dff7f3](https://github.com/ecosse3/nvim/commit/7dff7f329445a216405e0a63a02ccb616dda9077))
* **plugins:** new configuration for todo-comments plugin ([8469d63](https://github.com/ecosse3/nvim/commit/8469d631afd79d203e44df6c51162e4bc4870225))
* **plugins:** new NvimTree key bindings and configuration ([9aea1c8](https://github.com/ecosse3/nvim/commit/9aea1c8fe507abcb0b2b4a1f2d378cb3d8a45cdd))
* **plugins:** printer setup ([48c7e22](https://github.com/ecosse3/nvim/commit/48c7e22cbe6325065cc51ce6841b73e44e220d73))
* **plugins:** refactoring plugin configuration ([1aae97f](https://github.com/ecosse3/nvim/commit/1aae97f8c88bbd7900edcf18cd49fb354abc980e))
* **plugins:** remove custom telescope pickers and git functions ([7cff815](https://github.com/ecosse3/nvim/commit/7cff8159a68f25cac9da664ce3579b06b1a692ce))
* **plugins:** remove gps plugin configuration ([c57d794](https://github.com/ecosse3/nvim/commit/c57d794aa8292cc73b68f0f4546972254140c006))
* **plugins:** require numb.nvim in separate file ([ed3bd2f](https://github.com/ecosse3/nvim/commit/ed3bd2ffee35e6e2c6fae3d4fc74520d17ed937b))
* **plugins:** require nvim-web-devicons in separate file ([1503e34](https://github.com/ecosse3/nvim/commit/1503e34baa3a730afaa021a4e183118e820da74f))
* **plugins:** restructure and enhance indentation plugin configuration ([44350b0](https://github.com/ecosse3/nvim/commit/44350b0740910c1d0d2b034d74a38aef262fa332))
* **plugins:** scissors plugin configuration ([c6817b6](https://github.com/ecosse3/nvim/commit/c6817b6f169bdcaaded80866f21f83ffb4da75d3))
* **plugins:** session manager configuration and key mappings ([88dc9d7](https://github.com/ecosse3/nvim/commit/88dc9d7ceae75ddc77691edf98e307f905c950aa))
* **plugins:** setup for Alpha.nvim dashboard plugin ([a731f11](https://github.com/ecosse3/nvim/commit/a731f113978624eb5b0512819944df39e1f34b3d))
* **plugins:** setup for package-info.nvim ([dbf2d29](https://github.com/ecosse3/nvim/commit/dbf2d2924d3702510da401dc5e041b55fcf1a976))
* **plugins:** simplify trouble.nvim configuration ([d898ef8](https://github.com/ecosse3/nvim/commit/d898ef80e3d8758ebda6438da870a0f06d56685e))
* **plugins:** spectre plugin with refactor key mappings ([5d7ab3e](https://github.com/ecosse3/nvim/commit/5d7ab3e358e02702ff54e131408692c4ed53be01))
* **plugins:** spider.lua plugin configuration ([8e84f5f](https://github.com/ecosse3/nvim/commit/8e84f5fe73738217e46dc1b3ce3b5b79978ccfab))
* **plugins:** streamline cmp and luasnip configuration ([b246919](https://github.com/ecosse3/nvim/commit/b2469199dd27bf0e25a26913e7bad3e4f818ac1a))
* **plugins:** update trouble plugin configuration ([d0a44d3](https://github.com/ecosse3/nvim/commit/d0a44d3411a447f24d1d1003d235f7af4f1868b0))
* **plugins:** Zen Mode setup with custom configurations ([d4d7e0b](https://github.com/ecosse3/nvim/commit/d4d7e0bb1dd52e1bc3e3ec32b71038ed85597062))

## [3.9.0](https://github.com/ecosse3/nvim/compare/v3.8.0...v3.9.0) (2024-02-25)


### ⚠ BREAKING CHANGES

* **lsp:** move lsp configs inside config directory

### Features

* **cmp:** boost copilot priority ([6da4b80](https://github.com/ecosse3/nvim/commit/6da4b80aa53c693ea20a19d9c40058db4ce91167))
* **config:** disable ChatGPT by default ([d58d5d2](https://github.com/ecosse3/nvim/commit/d58d5d2957c2fbf50105a0f6548666611922afb4))
* **dap:** improve config ([a97a93b](https://github.com/ecosse3/nvim/commit/a97a93b3d82fa8c0637704f4287a644fb45d2a86))
* **formatting:** add conform.nvim & nvim-lint for linting & formatting ([325074d](https://github.com/ecosse3/nvim/commit/325074deba13795d4c2947064158a179a0105fd2))
* **keymappings:** add quickfix list keymap to <leader>q ([610f504](https://github.com/ecosse3/nvim/commit/610f50453f250138863a7aacb84d6c8a71d2b114))
* **keymappings:** change save session management keymap to <leader>pS ([7b14813](https://github.com/ecosse3/nvim/commit/7b1481399da926465163feb94cc14d88e45bab9f))
* **keymappings:** support textsubjects prev selection with <BS> ([ae67b8d](https://github.com/ecosse3/nvim/commit/ae67b8da455bc3170bf57cde40bc25dfff12d034))
* **keymappings:** use own format function for <leader>cf ([4b5e751](https://github.com/ecosse3/nvim/commit/4b5e7519c92fabdf76b0a9ec47f139d27c7b1b3d))
* **lazy:** remove "tohtml" default plugin ([508a44d](https://github.com/ecosse3/nvim/commit/508a44d11910de4d69345798b5b97fb4c158a914))
* **lsp:** automatically enable all LSPs installed by mason ([84e9837](https://github.com/ecosse3/nvim/commit/84e983756bb51bf64486512bccfe8c879aedfb02))
* **options:** set localleader to ; instead of , (comma) ([125312b](https://github.com/ecosse3/nvim/commit/125312b591028ed7997b17fe21ce01204c5db871))
* **plugins:** add codesnap instead of carbon.sh ([f918d1a](https://github.com/ecosse3/nvim/commit/f918d1a7d8e731f830e00e2029e6e1277a5e00ea))
* **plugins:** add copilot chat ([6274b67](https://github.com/ecosse3/nvim/commit/6274b678957868013a8b422eb4891099bd83ea6d))
* **plugins:** add marks.nvim ([5c8092c](https://github.com/ecosse3/nvim/commit/5c8092c0921788bd58d9d60e142d85a5496157c2))
* **plugins:** add new textcase plugin with Subs command for smart substitute ([09022a3](https://github.com/ecosse3/nvim/commit/09022a331001312595aeacb7eddc4f2c70a3d3e9))
* **plugins:** add nvim-bqf ([aaf3d4b](https://github.com/ecosse3/nvim/commit/aaf3d4bcc953bc17e67fe4ebfeb6e0fecad6935b))
* **plugins:** add nvim-scissors plugin for snippet management ([0e970d9](https://github.com/ecosse3/nvim/commit/0e970d95b71a279dd50f5b26d5fee9012ff3316f))
* **plugins:** add refactoring.nvim ([04b9144](https://github.com/ecosse3/nvim/commit/04b91440bb8d98c5d3b3795bf09b594d60b9ef95))
* **plugins:** add remote flash keybinding ([fe5f67c](https://github.com/ecosse3/nvim/commit/fe5f67ce20199c6cffeec56d342e3d47523a27ac))
* **plugins:** shorten directory path output in printer plugin to match git cwd ([5a96b1a](https://github.com/ecosse3/nvim/commit/5a96b1af0f4ddc55a8528baf921989645f024175))
* **plugins:** simplify alpha keymappings ([0610a4e](https://github.com/ecosse3/nvim/commit/0610a4ed4fa03305661e526b322a8f14787d6d56))
* **plugins:** update button keybindings for Alpha plugin ([91e3618](https://github.com/ecosse3/nvim/commit/91e36181dbd7b082d2fbb5adaa9a561206db9360))


### Bug Fixes

* **cmp:** don't return from cmp config when one of plugins is not correctly loaded ([07629b5](https://github.com/ecosse3/nvim/commit/07629b5b730012ef180149158d8bc07cf6881104)), closes [#165](https://github.com/ecosse3/nvim/issues/165)
* **comment:** require ts_context_commentstring after opting our of jsx branch ([a0750d5](https://github.com/ecosse3/nvim/commit/a0750d5717c189206b19639e4c05eac1d5a4b91a))
* **config:** disable wezterm zen intergration by default ([b6bac9c](https://github.com/ecosse3/nvim/commit/b6bac9cd9ef45f7bd0f59083d185d92b7c80b6b6))
* **keymappings:** moving forward in jumplist via <C-i> ([ae1c279](https://github.com/ecosse3/nvim/commit/ae1c279ec35625bfc3266e51755a6504d86726d0))
* **lsp:** directly go to definition instead opening glance if found only one ([dfd83f2](https://github.com/ecosse3/nvim/commit/dfd83f2cb8387ffe15d216c15c99beebae66888d))
* **lsp:** require path to lsp.function in toggle auto format ([fd03dd0](https://github.com/ecosse3/nvim/commit/fd03dd0f4411f09c47167a1eaf629438407c7a8c))
* **lsp:** update signs config to new neovim spec ([d2872d8](https://github.com/ecosse3/nvim/commit/d2872d8ee59ae97e041fcef296a7199ed2b1275f))
* **plugins:** correctly disable indent blanklint in zen mode ([4bd17f6](https://github.com/ecosse3/nvim/commit/4bd17f6be8b8d6b6857f55dbad5181943c24d4c8))
* **plugins:** fix indent-blankline.nvim setup options ([85e8940](https://github.com/ecosse3/nvim/commit/85e8940fa2d3d9603ccf203883a383910724242c))
* **plugins:** remove 'shade' since it breaks ([10c1e6d](https://github.com/ecosse3/nvim/commit/10c1e6deb9969efbeadd15b38e28359ad579d599))
* **typescript:** correctly enable inlay hints lsp for typescript ([ec42ddc](https://github.com/ecosse3/nvim/commit/ec42ddc19c3230b0e71d9f5a8b6a2239b8e5bf5e))


### Refactors

* **functions:** extract format function which uses lsp format or eslint ([2db797a](https://github.com/ecosse3/nvim/commit/2db797a8f425e0d65a6f29b82012040b7cf5c477))
* **lsp:** move lsp configs inside config directory ([ab6879a](https://github.com/ecosse3/nvim/commit/ab6879a322cbe9f56817e19c834acd068096df7b))
* **plugins:** add luasnip as cmp dependency ([db7e367](https://github.com/ecosse3/nvim/commit/db7e3674fe60f93d5f0a0b14ed55fd54a0b09ca8))

## [3.8.0](https://github.com/ecosse3/nvim/compare/v3.7.1...v3.8.0) (2023-09-29)


### Features

* **cmp:** prioritize copilot & limit options in cmp ([9988c26](https://github.com/ecosse3/nvim/commit/9988c26b6e5938284406a8be770b096e8e52fb12))
* **debugger:** update dap config to use VSCode JS Adapter ([30d4dff](https://github.com/ecosse3/nvim/commit/30d4dff7a6479a770b2e8814d14a4421ad9a729e))
* **functions:** auto format on save by ESLint if possible ([d9edbcc](https://github.com/ecosse3/nvim/commit/d9edbccc924ddb0111ce20322422648cd3db12f3))
* improve todo comments bg adding foreground highlight for all text ([73d8fc2](https://github.com/ecosse3/nvim/commit/73d8fc259fd83c09c125cefe3b565a8945dcf873))
* **keymappings:** remap git conflict mappings for intuitive usage ([9d3206d](https://github.com/ecosse3/nvim/commit/9d3206ddae23f668653033e4653838615fe285ee))
* **keymappings:** remap telescope git status to <Leader>gs and diffview git status to <Leader>gS ([9683427](https://github.com/ecosse3/nvim/commit/9683427ec5d04e9abcecca4a55db4426cfca6131))
* **lsp:** add tailwind css intellisense support for cn() ([e8d2425](https://github.com/ecosse3/nvim/commit/e8d2425f7ccc26d46c81e890194230bbdf0ef788))
* **lsp:** use mason path for tsserver ([4ea1701](https://github.com/ecosse3/nvim/commit/4ea1701c2c44aadff248fb2330a04738281405da))
* **plugins:** add cmp-git plugin ([5c9ecb0](https://github.com/ecosse3/nvim/commit/5c9ecb0159c57aba8b44cf444f8099c6be337f16))
* **plugins:** add octo.nvim plugin for Pull Requests management ([e97089c](https://github.com/ecosse3/nvim/commit/e97089c8ff2280ec9bcef1ad9e7faa5d7d9df0d3))
* **plugins:** add refactoring.nvim plugin ([5e76f92](https://github.com/ecosse3/nvim/commit/5e76f92393548c953057f4e9b756ef22e9723975))
* **plugins:** add tailwind-sorter.nvim plugin (TailwindSort command) ([740df25](https://github.com/ecosse3/nvim/commit/740df25614dc96b38ea2b1ef9e38640951627449))
* **plugins:** add tw-values.nvim plugin (keymap: <Leader>cv) ([25be62b](https://github.com/ecosse3/nvim/commit/25be62bd0bbf1e3a167f1225b3429248ee2e9a5d))
* **plugins:** limit flash.nvim keys ([c83958e](https://github.com/ecosse3/nvim/commit/c83958eb15c3f3614ecddfc53f83abe4b08731f8))
* **plugins:** update indent-blankline config ([a276c11](https://github.com/ecosse3/nvim/commit/a276c11fad521bbe479759d4a2f42363f51310d9))
* **plugins:** use native lsp styles for hover instead of noice.nvim ([4ffe8c9](https://github.com/ecosse3/nvim/commit/4ffe8c99af3f4d98eb96c82943ea09b8f85daeda))
* **telescope:** add typescript only shortcut to multi-rg (S-p) ([05cefcd](https://github.com/ecosse3/nvim/commit/05cefcd144313015e8b458e6d96af48e3fc395e4))
* **telescope:** match special characters in telescope grep (S-p mapping) without escape symbols ([7b8f1a3](https://github.com/ecosse3/nvim/commit/7b8f1a330c5815da2d29ecae491672a78d218ad1))
* **ui:** add border to multicursors.nvim popup ([270b620](https://github.com/ecosse3/nvim/commit/270b620433b5c0aff84afad8bb92dfd8925515cb))
* **ui:** scale down lazygit window to 0.9 scaling factor ([e80e0f7](https://github.com/ecosse3/nvim/commit/e80e0f7f233ff1c01e790f559563fa87977d6137))
* **utils:** add GIT_CWD global fn ([addd27c](https://github.com/ecosse3/nvim/commit/addd27cf2ede4a6b0698a85c58d1bd908fe309d6))


### Bug Fixes

* **plugins:** remove deprecated hide_root_folder from nvim-tree config ([4d915e5](https://github.com/ecosse3/nvim/commit/4d915e539e8a2eb7349db28af0434c618ab7c9f7))
* **plugins:** remove unnecessary FixCursorHold.nvim plugin ([7c53061](https://github.com/ecosse3/nvim/commit/7c53061b9b1f3290257fa9ed609ce83196b91cc9)), closes [#12587](https://github.com/ecosse3/nvim/issues/12587)

### [3.7.1](https://github.com/ecosse3/nvim/compare/v3.7.0...v3.7.1) (2023-09-09)


### Bug Fixes

* **icons:** update box & buffer nerd icons ([00ed206](https://github.com/ecosse3/nvim/commit/00ed206ba975312d5b01c6f8e767990ae886125f))
* **icons:** update expandtab nerd icons in statusline ([b00c3ef](https://github.com/ecosse3/nvim/commit/b00c3ef2d8407cd29f22afe894033bd826291eba))
* **icons:** update paragraph & lsp icon in cmp ([5e41d99](https://github.com/ecosse3/nvim/commit/5e41d9977ace290e7b1a629494fbdbff477964c7))
* **lazy:** set concurrency to 5 so it fixes issue with github timeout ([e963507](https://github.com/ecosse3/nvim/commit/e96350751a2722bea45787ea527bdb1bd787cf25))
* **plugins:** add max_item_count back for buffer in cmp ([60c7d7d](https://github.com/ecosse3/nvim/commit/60c7d7d03eec0f85153d03e5d082346453b4ca12))
* **plugins:** fix commenting in Comment.nvim plugin ([b288dee](https://github.com/ecosse3/nvim/commit/b288dee3fd892efa28f5ae3cacf7e426deb0e44d))
* **plugins:** fix lazy spec for nvim-lsp-file-operations ([60ee27d](https://github.com/ecosse3/nvim/commit/60ee27df09f9a2090f1b4bc6e19d5c2961392f08)), closes [#161](https://github.com/ecosse3/nvim/issues/161)
* **plugins:** nvim-surround loading ([711731c](https://github.com/ecosse3/nvim/commit/711731c5a9309210711b290e2f4bced8afa58f6b))
* **plugins:** proper sorting of copilot & max view entries set to 100 for performance ([e03fe28](https://github.com/ecosse3/nvim/commit/e03fe28415b09230c0807b3da14dfdd09ee946d4))
* **plugins:** remove legacy view.mappings from nvim-tree ([d2656d3](https://github.com/ecosse3/nvim/commit/d2656d3865792de17e73575f162b758157fc5d64))

## [3.7.0](https://github.com/ecosse3/nvim/compare/v3.6.0...v3.7.0) (2023-08-02)


### Features

* **keymappings:** add visual keymap for multicursor plugin ([2f2ffcf](https://github.com/ecosse3/nvim/commit/2f2ffcf4daab586b4009eae90db354f383885a14))
* **keymappings:** move spectre keymaps to plugin itself ([60c8b9f](https://github.com/ecosse3/nvim/commit/60c8b9ff15e92744aa5b166f037d88d94b76e1fb))
* **keymappings:** move which-key bufferline keymaps to plugin itself ([97e48d5](https://github.com/ecosse3/nvim/commit/97e48d52d986b81acbe6b3e1834b491a589f9ab6))
* **keymappings:** move which-key comment-box keymaps to plugin itself ([03cca90](https://github.com/ecosse3/nvim/commit/03cca903eb6e2efc814522a113d72d053142570e))
* **keymappings:** move which-key git-conflict keymaps to plugin itself ([dd2d2a7](https://github.com/ecosse3/nvim/commit/dd2d2a792165f4e21adda7844066d282e8d8de1d))
* **keymappings:** move which-key gitsigns keymaps to plugin itself ([a46ba66](https://github.com/ecosse3/nvim/commit/a46ba66b4b593b49be93decdc20f3e50cc34c041))
* **keymappings:** move which-key lazygit keymaps to plugin itself ([eeabba7](https://github.com/ecosse3/nvim/commit/eeabba795ed973a6c6619d4c3e08a5130e534305))
* **keymappings:** move which-key session manager keymaps to plugin itself ([78f0240](https://github.com/ecosse3/nvim/commit/78f0240979b074cdc02d96c057dff7d3ec7a3a2b))
* **keymappings:** move which-key toggleterm keymaps to plugin itself ([5ac11bb](https://github.com/ecosse3/nvim/commit/5ac11bbe5ef797d2161cc848b35abaf84f64228f))
* **plugins:** add min_chars opt to tailwind-fold plugin ([45741ab](https://github.com/ecosse3/nvim/commit/45741abfe0edb2a14541322ee052dfea97958a93))
* **plugins:** change vim-visual-multi to multicursors.nvim ([1c34619](https://github.com/ecosse3/nvim/commit/1c346198117edab78e31892920068023c82a58d9))
* **plugins:** enable diffview & move which-key keymaps to plugin itself ([8f71912](https://github.com/ecosse3/nvim/commit/8f71912ae95740b9cc0063eb12a47fdeaf2118d3))


### Bug Fixes

* **blame:** remove t_Co option which fixes highlighting in Git Blame window ([12b011b](https://github.com/ecosse3/nvim/commit/12b011b02871550c335a7e5949570abcb5ee325c))
* **icons:** change deprecated nerd icons to new ones ([0e29a84](https://github.com/ecosse3/nvim/commit/0e29a84251a99e7688401acff0796e470a38d95d))
* **icons:** fix alpha icons & provide new ones ([78c2704](https://github.com/ecosse3/nvim/commit/78c27041ab9e65bed07341343807da00d3a9561f))
* **icons:** fix arrow bottom left icon of nvim-ufo ([dc6facc](https://github.com/ecosse3/nvim/commit/dc6faccf50a2c83c66d382925824725534e2a237))
* **icons:** fix more icons ([15f44a9](https://github.com/ecosse3/nvim/commit/15f44a9e9ea3a703a5e3bbd530dd496afd45b0cc))
* **keymappings:** remove duplicated keymaps of comment-box ([5ac2e50](https://github.com/ecosse3/nvim/commit/5ac2e505acdbb4233ad2a7aeab0f896faebf4fdb))
* **plugins:** fix loading of vim-rooter ([efc344d](https://github.com/ecosse3/nvim/commit/efc344dbf50fb78faed7583f3102b0572c57d8c8))
* **plugins:** remove deprecated anchor option from dressing ([8e3011b](https://github.com/ecosse3/nvim/commit/8e3011bf3df77b2012cd64f2ef1d31e37fb7d01b))

## [3.6.0](https://github.com/ecosse3/nvim/compare/v3.5.2...v3.6.0) (2023-07-10)


### Features

* **cmp:** add support for TailwindCSS colors previews in autocompletion ([b37c297](https://github.com/ecosse3/nvim/commit/b37c297d955a4f37e013834d29d2f90f53afe121))
* **lsp:** do NOT lazy load lspconfig ([e838416](https://github.com/ecosse3/nvim/commit/e838416e42906c60b936d71c3be07f2970ff8c7a))
* **lsp:** switch typescript.nvim and tsserver LSP to typescript-tools plugin ([41164b6](https://github.com/ecosse3/nvim/commit/41164b67e4f69c5fb2f8df26cabfff45cfdd6d6a))
* **plugins:** add mini.ai plugin ([d025184](https://github.com/ecosse3/nvim/commit/d02518452ea54cdeee5ebbc3308ae957259f8b6b))
* **plugins:** add nvim-lsp-file-operations plugin ([dfea8a3](https://github.com/ecosse3/nvim/commit/dfea8a31aa0825ce01f2c32c5c7995fd6a8637f3))
* **plugins:** add support for WezTerm & Alacritty in Zen plugin ([6754f7f](https://github.com/ecosse3/nvim/commit/6754f7f251cc118bc8112d51f1ac9e9d2aa6cad7))
* **plugins:** add tailwind-fold.nvim plugin which automatically folds tailwind classes ([06fd8e3](https://github.com/ecosse3/nvim/commit/06fd8e38671569a8b07cfe95959e3daa7ae76c64))
* **plugins:** change deprecated nvim-ts-rainbow to rainbow-delimiters.nvim ([0cadfda](https://github.com/ecosse3/nvim/commit/0cadfda882c76fa1a16cbe0489fbda59cea79e15))
* **plugins:** deprecate null-ls ([689bb6e](https://github.com/ecosse3/nvim/commit/689bb6e20e53cef57f0dce4f8ce8b2400e9bb0e1))
* **plugins:** keep main branch of typescript-tools ([704320d](https://github.com/ecosse3/nvim/commit/704320d91be48f223e60526275e8e072b5de45c3))
* **plugins:** remove duplicated opts from TSC.nvim ([8b564a1](https://github.com/ecosse3/nvim/commit/8b564a1e42f84e89b69c841a3a5f15ebcc4392a5))
* **plugins:** remove inlay-hints plugin since it's natively available in nvim 0.10 ([573589c](https://github.com/ecosse3/nvim/commit/573589c15b6d5bd305a746fbb50cd9cb5f9b5dc0))
* **plugins:** replace lightspeed.nvim with folke/flash.nvim ([8e42262](https://github.com/ecosse3/nvim/commit/8e4226209df1b9cd39f7bafac1e78427df7884e4))


### Bug Fixes

* **lsp:** resolve error getting lsp code for diagnostics ([4848699](https://github.com/ecosse3/nvim/commit/48486999fd8a9c76871e6e6ee03a1022b97edc61))
* minor typo in README.md ([#150](https://github.com/ecosse3/nvim/issues/150)) ([432bae9](https://github.com/ecosse3/nvim/commit/432bae905641597ec214dc03e171662729148088))
* **plugins:** change loading event of gitsigns.nvim to BufRead so it doesn't throw an error ([b586ff6](https://github.com/ecosse3/nvim/commit/b586ff6600d1492bae3616237baeb0387dfdcbcf))
* **plugins:** keep fixed width of 40 in nvim-tree ([cfdb764](https://github.com/ecosse3/nvim/commit/cfdb764368866b9ecf40b3ca20a1a03a6c1dc602))
* **plugins:** remove improt-cost.nvim plugin since it breaks ([8d27308](https://github.com/ecosse3/nvim/commit/8d27308cc4c04ac7262043e30093395f7c170ad1))
* **which-key:** change LSP mappings to new one from typescript-tools ([503f10f](https://github.com/ecosse3/nvim/commit/503f10f6910d8b90072d23402865a55f023e66f1))

### [3.5.2](https://github.com/ecosse3/nvim/compare/v3.5.1...v3.5.2) (2023-05-27)


### Bug Fixes

* **cmp:** fix cmp when copilot is disabled ([7cbedc8](https://github.com/ecosse3/nvim/commit/7cbedc8b6e54a6650b0e3c99e1219469692d6257)), closes [#143](https://github.com/ecosse3/nvim/issues/143)
* **cmp:** properly skip copilot comparators if copilot is disabled in EcoVim settings ([4ee606a](https://github.com/ecosse3/nvim/commit/4ee606a16b3b3844852f431557977b4d9625de25))
* **git:** use new utils method to close other buffers with worktree ([63e17b9](https://github.com/ecosse3/nvim/commit/63e17b9c5e672605bb76603a8d44184fd9d4fba7))
* **plugins:** install dap_repl treesitter parser only if not installed ([2c40c0e](https://github.com/ecosse3/nvim/commit/2c40c0e04939c31ade840ce0da9ad88222aeb7e6)), closes [#145](https://github.com/ecosse3/nvim/issues/145)

### [3.5.1](https://github.com/ecosse3/nvim/compare/v3.5.0...v3.5.1) (2023-05-24)


### Bug Fixes

* **treesitter:** ensure that "vim" parser is installed ([6ca2ca3](https://github.com/ecosse3/nvim/commit/6ca2ca36b598eb4081d0c17eb8fae821fbf6b853)), closes [#142](https://github.com/ecosse3/nvim/issues/142)
* **which-key:** close other buffers ([#138](https://github.com/ecosse3/nvim/issues/138)) ([ba94cf6](https://github.com/ecosse3/nvim/commit/ba94cf68f5c13df2af4e93a7e1b299b22dfb47c0))

## [3.5.0](https://github.com/ecosse3/nvim/compare/v3.4.0...v3.5.0) (2023-05-17)


### Features

* **dap:** add nvim-dap-vscode-js new adapter ([69a8a59](https://github.com/ecosse3/nvim/commit/69a8a59c1dd6e18eaa8d8b32db272bc6fff965b6))
* **plugins:** add nvim-dap-repl-highlights with treesitter plugin ([4816b16](https://github.com/ecosse3/nvim/commit/4816b168a3a9f4d7632afde98a041f34c38bfdbf))
* **plugins:** switch barbar.nvim to bufferline.nvim ([6ecd9f4](https://github.com/ecosse3/nvim/commit/6ecd9f40b19f82beffd308bdc33681326b77b356))
* **ui:** add rounded float border to LspInfo ([2bcd96e](https://github.com/ecosse3/nvim/commit/2bcd96e7980f8c0d4ab2d5dc8eb279b2c9ebcd8e))
* **ui:** link LspInfoBorder to FloatBoder in tokyonight.nvim ([60e737c](https://github.com/ecosse3/nvim/commit/60e737c8cbfdbe18bc78253dc2f50f837817bdbe))


### Bug Fixes

* **colorscheme:** almost correct barbar highlights ([00645d6](https://github.com/ecosse3/nvim/commit/00645d642bba00d7caff8f66b0dcf858f5eb86b7))
* **keymaps:** support range formating with visual selection ([24bef17](https://github.com/ecosse3/nvim/commit/24bef176230ac6779c5d1b5427f50d33d14a9b44))

## [3.4.0](https://github.com/ecosse3/nvim/compare/v3.3.0...v3.4.0) (2023-04-28)


### Features

* **plugins:** add list of base languages to ensure_installed in treesitter ([b0c58b1](https://github.com/ecosse3/nvim/commit/b0c58b1cd77b9a4f51affb29ee75dd50361dfa40)), closes [#135](https://github.com/ecosse3/nvim/issues/135)


### Bug Fixes

* **plugins:** resize of nvim-tree works with "File Explorer" title ([94c4fed](https://github.com/ecosse3/nvim/commit/94c4fed05d7e4d753bd8dc71ef7ea89cfe70b490))
* **winbar:** return filename if parent dir doesn't exist ([6b53c18](https://github.com/ecosse3/nvim/commit/6b53c18b54a0709c8c294d8748ee604eb301a135)), closes [#134](https://github.com/ecosse3/nvim/issues/134)

## [3.3.0](https://github.com/ecosse3/nvim/compare/v3.2.0...v3.3.0) (2023-04-25)


### Features

* **cmp:** prioritize copilot cmp comparators & lint ([afe1f07](https://github.com/ecosse3/nvim/commit/afe1f079f6bd20ef4947fe5fe53d5d7236359ebd))
* **dap:** add new keymaps to focus specific dap window & disable shade by default ([e3710c1](https://github.com/ecosse3/nvim/commit/e3710c1b0cf401a6a3e9acdcee063feb4a903749))
* **lsp:** enable codespell for markdown & text files ([0e2e426](https://github.com/ecosse3/nvim/commit/0e2e42622a77c8ba364f3239d179f4b7e9d0c382))
* **lsp:** improve vuels lsp config ([e64b642](https://github.com/ecosse3/nvim/commit/e64b642b35ae3e9756c686f144c043ae142be13c))
* **options:** set cmdheight to 0 by default (can be changed personally) ([241691f](https://github.com/ecosse3/nvim/commit/241691fec47e867cc75cb7a6c10b76c04a317cc0))
* **plugins:** add 'jump_by_subwords' option to EcoVim config with nvim-spider plugin && enable noice by default ([b23c9ae](https://github.com/ecosse3/nvim/commit/b23c9ae1e78278a11b0c935cd6aab1a7a1853eff))
* **plugins:** add glance.nvim plugin for great definitions/references LSP UI ([6fda79d](https://github.com/ecosse3/nvim/commit/6fda79d19f4bde6ea09d73ecb1dccd5039481063))
* **plugins:** add tsc.nvim ([fb762fe](https://github.com/ecosse3/nvim/commit/fb762fe9338c4c4c2802cf434f3d6cc662ec51d2))
* **plugins:** add tsc.nvim mapping to which-key & remove chatgpt config file ([10e68ae](https://github.com/ecosse3/nvim/commit/10e68aedd9cc3ccdeeea51134e1fcb070951c2c2))
* **plugins:** replace ChatGPT.nvim with NeoAI.nvim ([772af39](https://github.com/ecosse3/nvim/commit/772af39bcc5d09ce729635554311d558c9f1edd5))
* **plugins:** update nvim-tree & make "File Explorer" title always align in the middle even when resized ([9494b6f](https://github.com/ecosse3/nvim/commit/9494b6fb54620424dcc0ab75e7f23c3dbadeb01d))
* **winbar:** move winbar autocmds to winbar itself & add titles for DAP windows ([aa4b3fa](https://github.com/ecosse3/nvim/commit/aa4b3faa312e5195f323325226fe989f5b1e48c2))
* **zen:** disable signcolumn on zen mode & lint ([07954cf](https://github.com/ecosse3/nvim/commit/07954cf3f4817acd3fbf86f6896d8541f801d54c))


### Bug Fixes

* **colorscheme:** change color of BufferInactiveIndex in tab bar (barbar.nvim) ([1f7a415](https://github.com/ecosse3/nvim/commit/1f7a4150026df2b9f39766ff49b38d3611ef787f))
* return nvim-notify notification record from vim.notify ([#133](https://github.com/ecosse3/nvim/issues/133)) ([f35c525](https://github.com/ecosse3/nvim/commit/f35c525f865d1fada6e7f92c86c51884913f98f8))
* **telescope:** weird issue in insert mode in telescope ([ee6d428](https://github.com/ecosse3/nvim/commit/ee6d4287b58b84e480059a34aba96d628d15dc21))
* **utils:** change deprecated pretty_print to print ([a4a2cf4](https://github.com/ecosse3/nvim/commit/a4a2cf42b67fde07451dfd5cce364bc23ca962cc))

## [3.2.0](https://github.com/ecosse3/nvim/compare/v3.1.1...v3.2.0) (2023-04-04)


### Features

* **ai:** add codeium AI plugin & configure copilot ([df0bf24](https://github.com/ecosse3/nvim/commit/df0bf24ff2ab3828f2de5897c3399db3870ea5e7))
* **ai:** make ChatGPT disabled by default and configurable via EcoVim config ([b172d8b](https://github.com/ecosse3/nvim/commit/b172d8b9dd21f14794266b9255ea9d96d79b1ecd))
* **colorscheme:** remove italic from comments ([7db438e](https://github.com/ecosse3/nvim/commit/7db438e68053567320d02f8594dcfd25c5e3a165))
* **lsp:** enable TypeScript codeactions for null-ls by default ([7f15721](https://github.com/ecosse3/nvim/commit/7f157212bce8aa2ec00234cfa886f7fe9c7c6b52))
* **plugins:** add experimental noice UI plugin disabled by default toggable via EcoVim config ([3445910](https://github.com/ecosse3/nvim/commit/3445910177a3dac8d81bfe43ff99bd77a81b271c))
* **plugins:** use nvim-navic instead of nvim-gps which is deprecated ([d43d281](https://github.com/ecosse3/nvim/commit/d43d281675ff63f38fa7cb04adc50c3516238884))
* **plugins:** use treejs instead of splitjoin & configure mappings ([f930dd2](https://github.com/ecosse3/nvim/commit/f930dd23bf6635e1ecedd007e240fcc01d44d6dd))
* **tabnine:** disable by default & make configurable via EcoVim config ([3124357](https://github.com/ecosse3/nvim/commit/3124357b26ddd3dd4fda04b1423a5feb6ab75488))


### Bug Fixes

* **ai:** fix copilot config ([c1314c8](https://github.com/ecosse3/nvim/commit/c1314c8e998d23babe04fae30666a9b45831b636))
* **cmp:** fix cmp completely for AI & provide new kind sources ([55b7a62](https://github.com/ecosse3/nvim/commit/55b7a6209fca66fc68c3651d23ce742f4c4954bd))
* **lsp:** silent unnecessary messages while using tsserver & tailwing via hover handlers ([055be17](https://github.com/ecosse3/nvim/commit/055be17d9a9e049ba84996dfcf8635721f6785c7))
* **plugins:** fix zen mode after removing hlargs ([55db522](https://github.com/ecosse3/nvim/commit/55db5224c2762e2482076a1ab1098e49754d3149))
* **plugins:** keep barbar 1.0 version until fixed ([42b95c1](https://github.com/ecosse3/nvim/commit/42b95c13fba4000e50faa712e449421c2a88d972))
* **plugins:** remove cinnamon plugin ([dbdcbeb](https://github.com/ecosse3/nvim/commit/dbdcbebf2dd5f8b707f2d21009b44f6a86c6b73e))
* **plugins:** temporarily disable diffview.nvim since it's broken ([a470f5b](https://github.com/ecosse3/nvim/commit/a470f5bf802955dc65d4971d4ed2cb303c1138f7))
* **plugins:** trigger nvim-tree via cmds ([cfd75fd](https://github.com/ecosse3/nvim/commit/cfd75fda8a0445d68092ecaf2bd2b765dda4fa42))

### [3.1.1](https://github.com/ecosse3/nvim/compare/v3.1.0...v3.1.1) (2023-03-17)


### Bug Fixes

* **cmp:** increase priority of LSP since buffer was breaking sorting ([4c0eee8](https://github.com/ecosse3/nvim/commit/4c0eee8146fc6d013e47ee1df3c13f13c945a7e5))
* **plugins:** leep default keymaps of ChatGPT cause new versions breaks custom ones ([fe83f5d](https://github.com/ecosse3/nvim/commit/fe83f5df46c71721daab3e8802436d9192adfe58))
* **plugins:** map "s" key to lightspeed.nvim plugin so it works correctly ([7a7b4d6](https://github.com/ecosse3/nvim/commit/7a7b4d66bfcbe303b85a9685bfe53902a355955e))
* **plugins:** use new api of nvim-tree in session-manager ([61a20f7](https://github.com/ecosse3/nvim/commit/61a20f788f70a9d2d8b14fd690ea5aa9fec46c6f))

## [3.1.0](https://github.com/ecosse3/nvim/compare/v3.0.3...v3.1.0) (2023-03-13)


### Features

* **cmp:** limit lsp autocompletion types specifically for TypeScript & JavaScript ([87432e5](https://github.com/ecosse3/nvim/commit/87432e5cbe193a19a8936531669c83c4396752b2))
* **config:** disable hlargs.nvim since semantic tokens support is added to tokyonight colorscheme ([30ec1bc](https://github.com/ecosse3/nvim/commit/30ec1bcdcd6414268a3e5ea56032271adea85895))
* **lsp:** add cva classRegex & style tailwindcss config ([1936f30](https://github.com/ecosse3/nvim/commit/1936f30dda6787d530fdf500f529b6b055de40b2))
* **lsp:** add includeCompletionsForModuleExports suggest option to tsserver settings ([a930ba0](https://github.com/ecosse3/nvim/commit/a930ba08b93b3a5d6f154a74cde4426be6c6cd17))
* **plugins:** add autocmd to notify when conflict is detected in git file ([e98989d](https://github.com/ecosse3/nvim/commit/e98989d2b068c48c333878bd9f51004b7acdc4ca))
* **plugins:** add chat-gpt.lua config ([5360709](https://github.com/ecosse3/nvim/commit/536070990ab61e0667a1ae7f9d6859d108456c85))
* **plugins:** add import-cost plugin ([2944316](https://github.com/ecosse3/nvim/commit/2944316130929fa9e237e651d7703923f95da11f))
* **plugins:** add inlay hints banned notify message ([7a7168b](https://github.com/ecosse3/nvim/commit/7a7168ba4986bbcafae17270939c8be54063bbc7))
* **plugins:** add mason-null-ls and configure it ([8983c47](https://github.com/ecosse3/nvim/commit/8983c4740ecd75da5a623f6d7d2709a8db2babbc))
* **plugins:** add nvim-coverage plugin and load on Coverage command ([d5cc8f8](https://github.com/ecosse3/nvim/commit/d5cc8f89ae4e7e048080f7ef8eea82070f1a2582))
* **plugins:** make printer.nvim load lazily ([6e38313](https://github.com/ecosse3/nvim/commit/6e383137978298562f97e1f06f4ad3330f05b7f9))
* **plugins:** replace AndrewRedev/splitjoin.vim plugin with Wansmer/treesj which uses treesitter and lua ([92e8857](https://github.com/ecosse3/nvim/commit/92e885773bd2ba0081918b620df3a8566a48aa73))
* **plugins:** temporarily disable cinnamon.nvim plugin ([e998225](https://github.com/ecosse3/nvim/commit/e998225054b67d8150f05a7fbfebdabe30d76371))


### Bug Fixes

* **config:** remove old api from colorscheme config ([9f23046](https://github.com/ecosse3/nvim/commit/9f23046974f15a9a285332b91e2b4b9f3f65bb22))
* **plugins:** change nvim tree api keymap in lazy.vim plugins keys ([5f83da6](https://github.com/ecosse3/nvim/commit/5f83da60a31eb519ad42693569dba6d956e00877))
* **plugins:** do not lazy load diffview.nvim ([b737e2e](https://github.com/ecosse3/nvim/commit/b737e2ebed9532d93bb12f7ed492f4b957c7761a))
* **plugins:** do not lazy load git-conflict.nvim plugin ([ce3a809](https://github.com/ecosse3/nvim/commit/ce3a809f124706ff5b5b5124311bb880742d0430))
* **plugins:** fix nvim-tree config ([fa4a9be](https://github.com/ecosse3/nvim/commit/fa4a9be456fa6e861544de0ba87bd927219866b7))
* **plugins:** fix zen config ([2872089](https://github.com/ecosse3/nvim/commit/2872089fea330ff95bcd77c524b460eb984141c2))
* **plugins:** remove lazyredraw option ([b35768a](https://github.com/ecosse3/nvim/commit/b35768a2f8e6f1c35f227dffa5be597e5598ddff))

### [3.0.3](https://github.com/ecosse3/nvim/compare/v3.0.2...v3.0.3) (2023-02-14)


### Bug Fixes

* **lsp:** add "Inlay Hints request failed" to banned messages ([9e9a3a4](https://github.com/ecosse3/nvim/commit/9e9a3a482f88f3159c1be8b785ed43f46f1d1ce3))
* **plugins:** correctly load printer.nvim ([065a9a3](https://github.com/ecosse3/nvim/commit/065a9a3951be3430dca3413bffdba16f0fae2b86))
* **plugins:** lazy load ZenMode on command ([964aa3d](https://github.com/ecosse3/nvim/commit/964aa3d4bd518d291a3fb50930c1e3d6f39ac793))
* replace sumneko_lua (deprecated) with lua_ls ([c133fd7](https://github.com/ecosse3/nvim/commit/c133fd7e76d62bdf3b40d1ebca60e20bc7a4d19c))

### [3.0.2](https://github.com/ecosse3/nvim/compare/v3.0.1...v3.0.2) (2023-01-29)


### Bug Fixes

* **plugins:** fix keymaps for dap ([0ac5cd4](https://github.com/ecosse3/nvim/commit/0ac5cd4761ca72c51edbf0d2e6e2692f493fc802))
* **plugins:** lazy load dap via keys ([131bbbc](https://github.com/ecosse3/nvim/commit/131bbbcdf26a9373216ddc27faba412f777d7b57))
* **plugins:** lazy load git-worktree via keys ([dea1b42](https://github.com/ecosse3/nvim/commit/dea1b42e195e803540ff152eb3392c7c329b19e0))
* **plugins:** lazy load template-string ([16d3688](https://github.com/ecosse3/nvim/commit/16d3688aabfb54a2bde2fdc544409bea140d743f))
* **plugins:** lazy load vim-visual-multi ([157fe44](https://github.com/ecosse3/nvim/commit/157fe4425d45c9f4712e8247646defe1906ca99c))
* **ui:** fix issue with spamming "No information avialable" via vim.notify ([d4fd970](https://github.com/ecosse3/nvim/commit/d4fd970d8b0970d46bcb54e9c88c4074292d35d6)), closes [#121](https://github.com/ecosse3/nvim/issues/121)


### Refactors

* **plugins:** kyazdani42 -> nvim-tree ([c7c199f](https://github.com/ecosse3/nvim/commit/c7c199fd967469d8edf9c062e370a757fe51d4bb))

### [3.0.1](https://github.com/ecosse3/nvim/compare/v3.0.0...v3.0.1) (2023-01-27)


### Bug Fixes

* **plugins:** use inlay-hints config to change highlight group ([3d87878](https://github.com/ecosse3/nvim/commit/3d878788768b3e899ecc7d628f8f0c4e39f0f7ff))

## [3.0.0](https://github.com/ecosse3/nvim/compare/v2.4.2...v3.0.0) (2023-01-27)


### ⚠ BREAKING CHANGES

* change packer.nvim to lazy.nvim

### Features

* add lazy-lock.json ([24e9070](https://github.com/ecosse3/nvim/commit/24e90708cffdf947fb5fa9a45072c189da6a5cac))
* change packer.nvim to lazy.nvim ([0b2a659](https://github.com/ecosse3/nvim/commit/0b2a659bdccb7dc35933a2814e5bb817fe9b885c))
* **config:** add luarc.json ([626571c](https://github.com/ecosse3/nvim/commit/626571c710e01b9372f6d78f32fc6e908b14cf41))
* disable diagnostics with git conflict in file ([2a28a97](https://github.com/ecosse3/nvim/commit/2a28a9714945a0ee224ddd6850ac2643047347f4))
* **install:** update installation script for lazy.nvim ([ba20bb0](https://github.com/ecosse3/nvim/commit/ba20bb089ed401683cfbcbb4d3a76e6e31de04f4))
* **keymappings:** add keymaps for Lazy management ([19ab421](https://github.com/ecosse3/nvim/commit/19ab4215ab3666bfd993d70d52a9caa5f9eef802))
* **plugins:** add Copilot.nvim & refactor cmp formatting ([51f0ebc](https://github.com/ecosse3/nvim/commit/51f0ebc4ea9b235e733b95b4f1b08ba37797c02b))
* **plugins:** add inlay-hints default config ([c75d448](https://github.com/ecosse3/nvim/commit/c75d448bce8669f1bcabc7c27b747cf18896d967))
* **plugins:** add notifiations to session manager ([3b60f90](https://github.com/ecosse3/nvim/commit/3b60f9025dd376cbffed4b785b24fe4a513c005d))
* **plugins:** add printer plugin with gp keymap ([dbbd3ec](https://github.com/ecosse3/nvim/commit/dbbd3ecbcdc04512deaaae9bed5ef419e3ed76aa))
* **plugins:** center view after scrolling with <C-u> and <C-d> ([4ee1c5c](https://github.com/ecosse3/nvim/commit/4ee1c5cf51e260e6d64398a453a626104e33bfd1))
* **plugins:** shade windows on terminal open ([52b1d41](https://github.com/ecosse3/nvim/commit/52b1d41cef8d2ab38728d2bc1ab95bee0c18e135))
* **plugins:** use main branch of inlay-hints & default config ([3d6bace](https://github.com/ecosse3/nvim/commit/3d6bace7b0c2203a7220fc8e5dac0b1e6773f542))


### Bug Fixes

* **autocmds:** icons path ([40fc776](https://github.com/ecosse3/nvim/commit/40fc776437271b77dc77dade597a023a8d80f444))
* **install:** install lazy before running neovim plugin sync in headless mode ([923548e](https://github.com/ecosse3/nvim/commit/923548ea948916b3050c213cade60561edd22caf))
* **keymappings:** correct git blame maps ([e613248](https://github.com/ecosse3/nvim/commit/e6132487ae00fc7c7938f574000752f10506332d))
* **lazy:** reorder plugins ([68aef6b](https://github.com/ecosse3/nvim/commit/68aef6b57c313aebd2165a6ff36d0b532e031b8b))
* **lsp:** deprecated vim.lsp.buf.range_code_action ([43e2907](https://github.com/ecosse3/nvim/commit/43e2907dc1458cdd8460789ac45bc406404ae1ab))
* **lsp:** use ufo config handler only for virtual text ([eb680cb](https://github.com/ecosse3/nvim/commit/eb680cbb0679ad2280d45bbb9d475f6fecbaf217))
* **plugins:** disable unnecessary diagnostics in neotest ([39e7df7](https://github.com/ecosse3/nvim/commit/39e7df7c47e5e47761bc37e048fa7c1ebc612fad))
* **plugins:** do not resize window on open file ([c476be9](https://github.com/ecosse3/nvim/commit/c476be9a7b7ce09d44db8bdbc28b047a4c6b0c1e)), closes [#94](https://github.com/ecosse3/nvim/issues/94)
* **plugins:** enable table mode for markdown by default ([c38e3e8](https://github.com/ecosse3/nvim/commit/c38e3e8c7df2d4c90874c12670b9b8daeb09eb40))
* **plugins:** force date display in alpha to english ([8dd721d](https://github.com/ecosse3/nvim/commit/8dd721d19e9545c053bc18581463840449d15198)), closes [#110](https://github.com/ecosse3/nvim/issues/110)
* **plugins:** icons in gps ([7886514](https://github.com/ecosse3/nvim/commit/7886514c0357d6929fbbfdf70c582ea21dde6378))
* **plugins:** set keymappings in plugin load directly instead of nvim-ufo config file ([e1c08b4](https://github.com/ecosse3/nvim/commit/e1c08b4279f349481ba6251ce5c78c6219103237))
* **plugins:** update gitsigns hl groups ([49ace44](https://github.com/ecosse3/nvim/commit/49ace4419086e4e5450639df92c16eb1434f1311))


### Refactors

* **config:** remove impatient ([eed1c66](https://github.com/ecosse3/nvim/commit/eed1c66c225505ee51ae0246080abaa1e5f539e1))
* **dirs:** config.lua -> EcoVim.lua ([bd16a02](https://github.com/ecosse3/nvim/commit/bd16a02c557c65d23558071fb19b6e418773d3ff))
* **dirs:** move autocmds, colorscheme, keymappings to config dir ([0118159](https://github.com/ecosse3/nvim/commit/0118159b0c81ab93ef9760c94f699f8628f4e8c4))
* **dirs:** move icons & functions to utils dir ([fb44f0b](https://github.com/ecosse3/nvim/commit/fb44f0b2c6f95a8defbe792249ae55ab99e7def0))
* **dirs:** settings.lua -> config/options.lua ([84b79d2](https://github.com/ecosse3/nvim/commit/84b79d21f94ee3a8c020d783459d21bdea9dd828))
* **internal:** remove packer commands ([9413e74](https://github.com/ecosse3/nvim/commit/9413e74d8f9f023d91f711abe0a48e7600cacd7f))

### [2.4.2](https://github.com/ecosse3/nvim/compare/v2.4.1...v2.4.2) (2022-10-20)


### Bug Fixes

* **lsp:** replace update_capabilities with default_capabilities ([f2f2323](https://github.com/ecosse3/nvim/commit/f2f2323a446046e692923cfbf9a6e053fa65a182))
* **lsp:** use lspconfig server names ([36caeed](https://github.com/ecosse3/nvim/commit/36caeed763fe24477b920cc796f8c9e7e60fc21c))

### [2.4.1](https://github.com/ecosse3/nvim/compare/v2.4.0...v2.4.1) (2022-10-06)


### Bug Fixes

* **plugins:** remove filetype.nvim since it's not needed in 0.8 anymore ([d37004f](https://github.com/ecosse3/nvim/commit/d37004f9eb24776996d74509359413310bbb5517))
* **tree:** use bufferline.api to set offset ([2dc1488](https://github.com/ecosse3/nvim/commit/2dc14884594cb237b7d68d3eaafa6c261d3bc684))

## [2.4.0](https://github.com/ecosse3/nvim/compare/v2.3.0...v2.4.0) (2022-09-29)


### Features

* **autocmds:** decrease yank highlight timeout from 200ms to 100ms ([af3a6fb](https://github.com/ecosse3/nvim/commit/af3a6fbf85dc8825de4a123ce73b35748a641453))
* **keybindings:** add [t and ]t mappings for jumping to next/prev todo ([689d83c](https://github.com/ecosse3/nvim/commit/689d83c6c8e3ffb4fa7d5bc000e744f4bf29114f))
* **keymappings:** add gl keymapping to open line diagnostic ([ebb61bb](https://github.com/ecosse3/nvim/commit/ebb61bb21dd21b2d1beaee5fdeb5ee9a57618e2a))
* **lsp:** add emmet ls with deprioritized autocomplete sorting (always at the bottom) ([9dccb4b](https://github.com/ecosse3/nvim/commit/9dccb4b48a8789a6019f6c0533542b61bdfa77b7)), closes [#96](https://github.com/ecosse3/nvim/issues/96)
* **lsp:** more consistent ReactDTS filtering ([#97](https://github.com/ecosse3/nvim/issues/97)) ([b3652ba](https://github.com/ecosse3/nvim/commit/b3652ba52d1a444d3a8481ee8ff2b9cd90e1801f))
* **plugins:** switch vim-easy-align to mini.nvim ([484a84f](https://github.com/ecosse3/nvim/commit/484a84f7add76a572cac72c565c6abc05a8023e7))


### Bug Fixes

* **plugins:** revert todo-comments to folke ([#98](https://github.com/ecosse3/nvim/issues/98)) ([fbd0dcf](https://github.com/ecosse3/nvim/commit/fbd0dcfaaa6baf16cab9d3d412c2dcfed64d9635))
* **plugins:** use lua setup for barbar.nvim bufferline ([4d48147](https://github.com/ecosse3/nvim/commit/4d4814716862d5514c52b42fb466b48e1e18061b))

## [2.3.0](https://github.com/ecosse3/nvim/compare/v2.2.2...v2.3.0) (2022-09-12)


### Features

* **keymappings:** add git conflict keymappings ([2908199](https://github.com/ecosse3/nvim/commit/2908199e36b34f24d5772419f2d120631bc54d20))
* **lsp:** support classnames & clsx in tailwindcss LSP ([4aa4e81](https://github.com/ecosse3/nvim/commit/4aa4e818a599136a5f0358bc2ff18a468daa744a))
* **lsp:** support inlay hints ([d8ac1d8](https://github.com/ecosse3/nvim/commit/d8ac1d8e10d5b69e51237a06e15a345f2b236088))
* **plugins:** support back diffview.nvim ([eb23a34](https://github.com/ecosse3/nvim/commit/eb23a3406de476b52b67a7109ddf9b9fc4368aff))


### Bug Fixes

* **colorscheme:** provide MsgArea fg color ([a4f3698](https://github.com/ecosse3/nvim/commit/a4f3698b1717b2f49b7837bc3d434dc5d6aaa2d2))
* **lsp:** ignore rules linting for Tailwind in CSS/SCSS files ([2373084](https://github.com/ecosse3/nvim/commit/2373084146b697854920b40790264668d3db7266))
* **plugins:** add default jestCommand for neotest-jest to fix running tests ([9679774](https://github.com/ecosse3/nvim/commit/96797741338e78bbf8bca67ce6543176df43016b))
* **plugins:** fix colorizer.nvim config ([2fba6ea](https://github.com/ecosse3/nvim/commit/2fba6eaf8717d6135c71f410cee3cc8ed6c4cbac))
* **plugins:** update barbar to default branch cause wipeout-cmds was deleted ([9bbaac2](https://github.com/ecosse3/nvim/commit/9bbaac262ac8e4618dc8192a3bc07d431ed6c3c1))
* **plugins:** use recommended tag for git-conflict plugin ([16a101e](https://github.com/ecosse3/nvim/commit/16a101e934c1da7e84c357e39fe11a315fca0df9))

### [2.2.2](https://github.com/ecosse3/nvim/compare/v2.2.1...v2.2.2) (2022-09-07)


### Bug Fixes

* **colorscheme:** remove foreground from Nvim Tree Folder Icon after its update ([4655783](https://github.com/ecosse3/nvim/commit/4655783cc029996228d012620c3d0cf79c1630b7))
* **colorscheme:** update tokyonight.nvim theme api ([72ee898](https://github.com/ecosse3/nvim/commit/72ee89800594b9a71305e044d446affc4c5e74a4))

### [2.2.1](https://github.com/ecosse3/nvim/compare/v2.2.0...v2.2.1) (2022-08-28)


### Bug Fixes

* **#91:** correct save current session keymapping ([d896afc](https://github.com/ecosse3/nvim/commit/d896afc1e70f924177585c6244f4401e0b97c671)), closes [#91](https://github.com/ecosse3/nvim/issues/91)

## [2.2.0](https://github.com/ecosse3/nvim/compare/v2.1.1...v2.2.0) (2022-08-22)


### Features

* **colorscheme:** change hlargs highlight color to aka red & remove constant highlight link to boolean ([72ad079](https://github.com/ecosse3/nvim/commit/72ad0793ec7fdeca6d125d0c870194a0120936ce))
* **lsp:** enable formatting in css language server ([b6c4a48](https://github.com/ecosse3/nvim/commit/b6c4a48db5f289a1cf3a5faf9a410b6de00823d2)), closes [#89](https://github.com/ecosse3/nvim/issues/89)
* **plugins:** add visual multi leader key as ; ([f937231](https://github.com/ecosse3/nvim/commit/f9372311b1a600a5121a8be79d44db4a200fc06b))


### Bug Fixes

* **plugins:** add comment box name to which key actions menu ([068c793](https://github.com/ecosse3/nvim/commit/068c79304edc5d95c8b1b22badc05b26a9d092bf))
* **plugins:** fix going to prev/next git hunks by ]c and [c ([ee9b83b](https://github.com/ecosse3/nvim/commit/ee9b83bfb833937002d9ba4fb79509704f833fc6))
* **plugins:** pcall require on ufo & add openFoldsExceptKinds mapping ([d3b1cb5](https://github.com/ecosse3/nvim/commit/d3b1cb57062a752eb00060640efe83f8f634ca31))
* **plugins:** switch to maintained version of todo-comments.nvim ([30d6b03](https://github.com/ecosse3/nvim/commit/30d6b032f4fa3c6c180a6139ebed5e8017b2d8ab))


### Refactors

* **plugins:** move section in alpha config ([466d0ed](https://github.com/ecosse3/nvim/commit/466d0ed07df73d8443cc40c3dbee838f1ad5ec7b))

### [2.1.1](https://github.com/ecosse3/nvim/compare/v2.1.0...v2.1.1) (2022-08-21)


### Bug Fixes

* **ui:** fix flickering cursor by removing winwidth calculations in galaxyline ([307fa3b](https://github.com/ecosse3/nvim/commit/307fa3b40c92340c6badc51c38d66d77c627427b)), closes [#86](https://github.com/ecosse3/nvim/issues/86)

## [2.1.0](https://github.com/ecosse3/nvim/compare/v2.0.1...v2.1.0) (2022-08-15)


### Features

* **colorscheme:** change Constants highlights to link Booleans ([87a0d0b](https://github.com/ecosse3/nvim/commit/87a0d0bfdcf6de429d9c8e3df4db5be51c583e52))
* **lsp:** add prisma lsp ([eaddca7](https://github.com/ecosse3/nvim/commit/eaddca707c0e4e90f9253179299c61aa86f66b7d))
* **lsp:** detach nvim-colorizer from buffer where tailwind is attached so they doesn't conflict ([3782d5b](https://github.com/ecosse3/nvim/commit/3782d5b66d699366e779c37dd46c2702ad38e3e8))
* **plugins:** add internal cursorword plugin ([098db24](https://github.com/ecosse3/nvim/commit/098db2413e40e98727d0ad886b24d51ef9c346f9))
* **plugins:** add template-string.nvim plugin to automatically create tempalate literals from strings if JS variable is used ([b3124f3](https://github.com/ecosse3/nvim/commit/b3124f3745632f4d57d59e7e8a02b5119cf364fb))
* **plugins:** add ufo plugin for pretty and smart folding via LSP ([5ad0a49](https://github.com/ecosse3/nvim/commit/5ad0a4972c6c69b679684bd93d55598481a1ab0e))
* **plugins:** enable extended_mode in treesitter since it's fixed in JSX ([ef8ca21](https://github.com/ecosse3/nvim/commit/ef8ca212cab5b0ee21c4c6218604a244dcbe795f))
* **toggleterm:** use horizontal direction for toggleterm by default & add winbar support ([017e983](https://github.com/ecosse3/nvim/commit/017e9839c900ce48b7d8cf8dcaa6b3556d48c660))


### Bug Fixes

* **dressing:** update dressing config & use builtin backend for code action since nui breaks ([d91b249](https://github.com/ecosse3/nvim/commit/d91b2499755171ca65a221238a2355cd70bebe56))
* **fillchars:** append via vim.opt function ([e846c22](https://github.com/ecosse3/nvim/commit/e846c2200f38c1c349b3bb3255765ee82084ffdb))
* **plugins:** correctly require ufo config ([f7bc533](https://github.com/ecosse3/nvim/commit/f7bc533f37fe7c9419a6aeb43a434cf2c279539f))
* **plugins:** temporarily disable diffview.nvim cause it shows errors :( ([b45af78](https://github.com/ecosse3/nvim/commit/b45af786347ad97b3698729578a3597f78106fc6))
* **plugins:** update lightspeed to only 's' key & correctly require config ([316264b](https://github.com/ecosse3/nvim/commit/316264bbcc7d691401f7e5e0dca541346d21df4f))


### Refactors

* **blame:** change blame directory to internal ([da9b0ab](https://github.com/ecosse3/nvim/commit/da9b0ab5903423823d50d63f2060b24b0a6c71e9))
* **packer:** change packer commands directory to internal ([b051def](https://github.com/ecosse3/nvim/commit/b051defd5c23c2297e5d83aa60272dc8d702e60b))
* **utils:** move globals to utils ([8aba17a](https://github.com/ecosse3/nvim/commit/8aba17a417048e51f55d8b4320b891699799ebb8))
* **winbar:** move to internal & disable in toggleterm ([b7a9ab3](https://github.com/ecosse3/nvim/commit/b7a9ab3ea6eadbf23eecbbdbbb37e4913573875f))

### [2.0.1](https://github.com/ecosse3/nvim/compare/v2.0.0...v2.0.1) (2022-08-01)


### Bug Fixes

* **ui:** disable extended mode of rainbow to correctly highlight JSX via Treesitter ([bc890de](https://github.com/ecosse3/nvim/commit/bc890de8c4d0bb7b8a3831dfaa03c922230ac193))


### Refactors

* **lsp:** change installed lsp names in mason setup ([6c0febe](https://github.com/ecosse3/nvim/commit/6c0febe4cce870d26f184c55c5eb75aa2822e75d))

## [2.0.0](https://github.com/ecosse3/nvim/compare/v1.11.1...v2.0.0) (2022-07-27)


### ⚠ BREAKING CHANGES

* **lsp:** Uninstall lsp-installer servers by :LspUninstallAll
first

### Features

* **lsp:** move from lsp-installer to mason ([4f8f48e](https://github.com/ecosse3/nvim/commit/4f8f48e3545c4cf2025dde5c43eb5dc41e229046)), closes [#80](https://github.com/ecosse3/nvim/issues/80)
* **plugins:** add stay-in-place plugin ([a80aa23](https://github.com/ecosse3/nvim/commit/a80aa2377436b5ed46a0c36db2952d62dbf3b481))
* **plugins:** configure DAP and test with React.js ([de647d7](https://github.com/ecosse3/nvim/commit/de647d780c631feecc6bd3595ff9d7ab8d3a899a))


### Bug Fixes

* **install:** fix removing whole cache dir ([f951a95](https://github.com/ecosse3/nvim/commit/f951a9563783c4df8f70c74ec1d4095804350fae)), closes [#79](https://github.com/ecosse3/nvim/issues/79)

### [1.11.1](https://github.com/ecosse3/nvim/compare/v1.11.0...v1.11.1) (2022-07-17)


### Bug Fixes

* **#75:** fix issues with installation by pcalling which-key ([#76](https://github.com/ecosse3/nvim/issues/76)) ([0b93557](https://github.com/ecosse3/nvim/commit/0b935574c12485ee92264bc2ad11ac7b3acac661)), closes [#75](https://github.com/ecosse3/nvim/issues/75) [#75](https://github.com/ecosse3/nvim/issues/75) [#75](https://github.com/ecosse3/nvim/issues/75)

## [1.11.0](https://github.com/ecosse3/nvim/compare/v1.10.0...v1.11.0) (2022-07-16)


### Features

* **lsp:** create option to toggle inline messages ([69fb322](https://github.com/ecosse3/nvim/commit/69fb3224c958427771e8e578ca42f2aaedf15d88))
* **plugins:** use nvim-surround instead of tpope/vim-surround ([e23cef4](https://github.com/ecosse3/nvim/commit/e23cef4dd9aa082e484ee480eb264bcaa106f091))


### Bug Fixes

* **colorscheme:** use new nvim set_hl api in newest neovim nightly and keep vim.highlight.create in 0.7 ([648981c](https://github.com/ecosse3/nvim/commit/648981c3eff5d6aa591fd9e3924cd338b117c68b))
* **plugins:** do not attach zen in which-key in dashboard ([0a57006](https://github.com/ecosse3/nvim/commit/0a5700668459e4e0fe5922dece24f4a5b0019c59)), closes [#69](https://github.com/ecosse3/nvim/issues/69)
* **plugins:** limit colorizer.lua filetypes ([ed8bec4](https://github.com/ecosse3/nvim/commit/ed8bec4deb71673d067b3a326439a4f6b1522ebe)), closes [#64](https://github.com/ecosse3/nvim/issues/64)
* **settings:** set correct fillchars to not show ^ on newest nightly in statusbar ([d09c743](https://github.com/ecosse3/nvim/commit/d09c743ac16d83cd6f12c771e637fc57b67c7307))

## [1.10.0](https://github.com/ecosse3/nvim/compare/v1.9.1...v1.10.0) (2022-06-21)


### Features

* **git:** use lazygit for all & buffer commits view for default keymaps ([df72edb](https://github.com/ecosse3/nvim/commit/df72edb4b3db268bb94145b9a91f366f857d4541))
* **keymappings:** add mappings for case change in visual mode ([e546e3e](https://github.com/ecosse3/nvim/commit/e546e3ec45e9c1efbb224f843fda7d208521e44c))
* **keymappings:** add spectre lazy keymappings ([a8562b4](https://github.com/ecosse3/nvim/commit/a8562b41cfbb59836879ac3db134a15cfe67a2bd))
* **keymappings:** use cached list of telescope repo for speedup (needs additional config on macOS) ([6a9817b](https://github.com/ecosse3/nvim/commit/6a9817b8b1884176717e6e4bc1c13a84a8c1a47d))
* **plugins:** add git-worktree plugin ([95313ce](https://github.com/ecosse3/nvim/commit/95313cef07e177236520affbe4e53c3a2df9eb6e))
* **plugins:** add lazygit.nvim plugin because it works better with git worktree ([3b46c04](https://github.com/ecosse3/nvim/commit/3b46c042f6ad0a23297b7a66a054923f3064f8c9))
* **plugins:** add neotest and jest support via <Leader>j ([8b0965a](https://github.com/ecosse3/nvim/commit/8b0965a129977d1b8b0d27112cd74182fe7c4d5e))
* **plugins:** add notification after switching worktree ([f49a46e](https://github.com/ecosse3/nvim/commit/f49a46e8b69e6279d0cc1ec4379843c0f2d7b411))
* **plugins:** enable zen by default ([e78129e](https://github.com/ecosse3/nvim/commit/e78129ef78968843be31e9e98d27bd1edc200d28))
* **ui:** add rounded borders by default to LspInstallInfo floating window ([be3ef2d](https://github.com/ecosse3/nvim/commit/be3ef2da6626ebf573606468c1f28b39b4f43623))
* **ui:** dotfiles picker, command history & search history in dropdown ([bc09a24](https://github.com/ecosse3/nvim/commit/bc09a240a3f17b8ee3fce0fa989262b3a4326df3))


### Bug Fixes

* **#62:** update typescript.nvim & remove server capabilities settings for tsserver ([1399d87](https://github.com/ecosse3/nvim/commit/1399d872edd35d89216515ccbe40741eb5ea5f27)), closes [#62](https://github.com/ecosse3/nvim/issues/62)
* add missing comma ([359c58c](https://github.com/ecosse3/nvim/commit/359c58c85b1f4f96c6795d45e08144d486f16c35))
* **blame:** add custom winbar to Git Blame to fix matching between lines issue ([80da821](https://github.com/ecosse3/nvim/commit/80da821f2b6b14d2e4a2427228839fe39564dfd0))
* **colorscheme:** match quicklist border color to float border ([b0643f2](https://github.com/ecosse3/nvim/commit/b0643f23d6feb201a69583d1d4ced2b9e073ac89))
* **keymappings:** conflicting keymaps ([f13cc0b](https://github.com/ecosse3/nvim/commit/f13cc0bf67fb4a0dab98f616294a826344432e3f))
* **lsp:** limit tailwindcss filetypes ([d0d30c5](https://github.com/ecosse3/nvim/commit/d0d30c5fde70c34193a1d47735248b04a674bec3))
* **plugins:** correct refreshing current file & close all buffers on worktree switch ([c4aae38](https://github.com/ecosse3/nvim/commit/c4aae3842f7381c48c1ff492511e08fd9defc357))
* **plugins:** remove cinnamon animation on <C-o> & <C-i> ([2368acc](https://github.com/ecosse3/nvim/commit/2368acc34d447503efaed688f0ce168642e9cc06))
* **plugins:** remove unnecessary todo-comments plugin require ([639c6b9](https://github.com/ecosse3/nvim/commit/639c6b93f635d9d060e09c1e5a61d8483afc3c3d))
* **plugins:** toggleterm highlights & size ([c55c5e1](https://github.com/ecosse3/nvim/commit/c55c5e126fed5cedb4dda2da2f49d65dbe62255d))
* **telescope:** wrap results in workspace diagnostics ([7e20d99](https://github.com/ecosse3/nvim/commit/7e20d99f3317e7aa34c126f36074d4802ec333fd))
* **ui:** fix spacing between vertical pos and size in statusbar by shifting numbers ([23391ef](https://github.com/ecosse3/nvim/commit/23391ef3bfc51e887864be3b1aab11b0335eb761))
* **ui:** vim.ui.select & vim.ui.input error when using nui backend with LSP rename/code actions ([7d081ff](https://github.com/ecosse3/nvim/commit/7d081ff673ebaa1f4f60400898ac8480bd4f347a))


### Refactors

* **plugins:** move all git plugins to git subdirectory inside plugins ([fd86430](https://github.com/ecosse3/nvim/commit/fd86430ccf770737804dd0d0398692a94e581402))

## [1.9.1](https://github.com/ecosse3/nvim/compare/v1.9.0...v1.9.1) (2022-06-05)

### Bug Fixes

* **winbar:** pcall require winbar and check if loaded type is not boolean by first time ([#55](https://github.com/ecosse3/nvim/issues/55)) ([#58](https://github.com/ecosse3/nvim/issues/58)) ([edaca98](https://github.com/ecosse3/nvim/commit/edaca98290bd17707c35be163fe538bf3c9815e2))

## [1.9.0](https://github.com/ecosse3/nvim/compare/v1.8.2...v1.9.0) (2022-06-03)


### ⚠ BREAKING CHANGES

* **colorscheme:** please configure nightfly yourself if you use it

### Features

* **colorscheme:** add Ecovim colors & change telescope title & cursor line color ([31e01c2](https://github.com/ecosse3/nvim/commit/31e01c2897c7070a239b785d0a6fe4efed1531f1))
* **icons:** add exit & fileRecent icon ([7820842](https://github.com/ecosse3/nvim/commit/78208427dd678ddda9c23e421ee24db096a1030f))
* **mappings:** attach zen mapping to which-key if enabled ([aeba8ac](https://github.com/ecosse3/nvim/commit/aeba8ac1cbae54b6548482385ea0ebd7ee2f524e))
* **mappings:** refactor which key & add visual mode mappings ([156ed23](https://github.com/ecosse3/nvim/commit/156ed231c8ba4bf6b6f3581c7bddd6b9d1ba4b94))
* **plugins:** <ESC> to close telescope even in insert mode & <C-q> to smart send to qflist and open it ([585a10a](https://github.com/ecosse3/nvim/commit/585a10a66b978ef88e0a78a722345ca1432eccde))
* **plugins:** add comment box plugin ([184367a](https://github.com/ecosse3/nvim/commit/184367a9eb1297817446890a5fdf62c5bdb18b06))
* **plugins:** improve zen by disabling gitsigns, blanklines, relativenumber & hlards when is active ([cd62efe](https://github.com/ecosse3/nvim/commit/cd62efe2c06d26417dbb5dbc4e3f2f395da58d90))
* **plugins:** new alpha look & custom config ([3f1da4a](https://github.com/ecosse3/nvim/commit/3f1da4aacd6311fffe8617652a210ed7c94db7e7))
* **ui:** rounded borders in which key ([0ac8d2c](https://github.com/ecosse3/nvim/commit/0ac8d2c6b34bd142134537b31914c316c45db100))
* **ui:** use packer.nvim in float bordered window ([4aeb00d](https://github.com/ecosse3/nvim/commit/4aeb00d2e8e82c4c9bbf73c703b0a73929ae992c))


### Bug Fixes

* **barbar:** remove pcall of nvim_web_devicons ([c3412e0](https://github.com/ecosse3/nvim/commit/c3412e0105519b04224dcf18eef9ba69023e2160))
* **cmp:** limit item count for luasnip & buffer ([918ddc4](https://github.com/ecosse3/nvim/commit/918ddc46abbc8d70a705c96b12bad77fd120bb00))
* **lua:** add packer_plugins to globals ([ed470d0](https://github.com/ecosse3/nvim/commit/ed470d06edecde51f7510bd0d0dd425d98494682))
* **plugins:** autosave only in session ([256ba84](https://github.com/ecosse3/nvim/commit/256ba840a0832a6475947d2e94a179d18ef00a17))
* **plugins:** reorder fzf-native ([5473aa2](https://github.com/ecosse3/nvim/commit/5473aa2f37972fa7e4e20d0093ac11da0d65976d))
* **utils:** decrease relative path length ([e919dd9](https://github.com/ecosse3/nvim/commit/e919dd99824ca84559d4fc3c866b20372f6d95ad))
* **which-key:** use the right command to open Alpha ([#53](https://github.com/ecosse3/nvim/issues/53)) ([76fb267](https://github.com/ecosse3/nvim/commit/76fb267f30c419af71365e62e0108c583964eac0))


* **colorscheme:** drop support for nightfly colorscheme ([aa45d38](https://github.com/ecosse3/nvim/commit/aa45d38f501b55bd56722cd9ef2c1891510d6f5b))

### [1.8.2](https://github.com/ecosse3/nvim/compare/v1.8.1...v1.8.2) (2022-06-01)


### Bug Fixes

* **#51:** replace dashboard with alpha.nvim & fix installation script ([#52](https://github.com/ecosse3/nvim/issues/52)) ([847f38d](https://github.com/ecosse3/nvim/commit/847f38dec48c2091948fa0dafdecadf4cc913b97)), closes [#51](https://github.com/ecosse3/nvim/issues/51) [#51](https://github.com/ecosse3/nvim/issues/51) [#51](https://github.com/ecosse3/nvim/issues/51)
* **which-key:** mappings for alpha ([311537c](https://github.com/ecosse3/nvim/commit/311537cd25ed2550524fbc612ba5e594d1128c1b))

### [1.8.1](https://github.com/ecosse3/nvim/compare/v1.8.0...v1.8.1) (2022-05-31)


### Bug Fixes

* **gps:** fix spacing in react hook icons in gps ([cd1a5fd](https://github.com/ecosse3/nvim/commit/cd1a5fd60579f44e854a9ab634228f3c7e5ed9dd))
* **plugins:** set max_jobs to 50 to prevent freezing when syncing plugins ([f032bb3](https://github.com/ecosse3/nvim/commit/f032bb3c29cff97c849a7b1510a51a84bfb2e404))
* **plugins:** update nvim-tree config ([585bc06](https://github.com/ecosse3/nvim/commit/585bc062ab5af81e3ace76220744787404dfac4e))
* **snippets:** check if luasnip is loaded ([f023f4f](https://github.com/ecosse3/nvim/commit/f023f4fad57deb40a65a66786f3e9014bbec6241)), closes [#50](https://github.com/ecosse3/nvim/issues/50)
* **winbar:** enable winbar only for neovim 0.8+ ([6eb9eac](https://github.com/ecosse3/nvim/commit/6eb9eac8605fb7904877e4d9514e3e7887735ae2)), closes [#50](https://github.com/ecosse3/nvim/issues/50)


### Refactors

* **icons:** change ' to " ([2f10dde](https://github.com/ecosse3/nvim/commit/2f10dde13294fc33d6a34f3a715f96f977bea9fe))

## [1.8.0](https://github.com/ecosse3/nvim/compare/v1.7.2...v1.8.0) (2022-05-23)


### Features

* **autocmds:** enable LSP typescript mappings only in ts & tsx files ([1512000](https://github.com/ecosse3/nvim/commit/1512000accb14137403fa84a9bcf6925fe0aaa47))
* **icons:** provide new icons for winbar ([f314a9d](https://github.com/ecosse3/nvim/commit/f314a9d2770b39461d84d6fba37a446dfb286c13))
* **keymappings:** remap H to ^ ([946f137](https://github.com/ecosse3/nvim/commit/946f137de7453a035f273a8068e4ea706e41634a))
* **plugins:** add luasnip jumpable mapping as <C-h> and <C-l> ([308665b](https://github.com/ecosse3/nvim/commit/308665b60537855a3629b28e3a946ca84e67b41c))
* **plugins:** add nvim-bqf ([8993acf](https://github.com/ecosse3/nvim/commit/8993acf8c5fc8af9165eb14a78c77fc842d644e4))
* **plugins:** configure package-info with correct config, status in galaxyline & which-key mappings only in package.json ([5149189](https://github.com/ecosse3/nvim/commit/51491895fd2369acc86f4afcaf53b01d1de13098))
* **snippets:** add react component treesitter snippet as "comp" ([223bac6](https://github.com/ecosse3/nvim/commit/223bac6c2c7e08edb1b6c6fe1b76b45dd3b4155c))
* **ui:** change lsp virtual text rectangle icon to circle and add extra space ([c4515f3](https://github.com/ecosse3/nvim/commit/c4515f394765282e3bc0c4dda3878ff38c3db880))
* **winbar:** use new neovim feature of top winbar with nvim-gps reimplemented & drop from galaxyline ([01fcce9](https://github.com/ecosse3/nvim/commit/01fcce916a5bd64f00504c1f874f6f7e8aa21f61))


### Bug Fixes

* **bufferline:** exclude quickfix list from bufferline ([12a8c91](https://github.com/ecosse3/nvim/commit/12a8c9187160fc14623d60fc9e58f465eea3d77f))
* **bufferline:** fix moving between buffers ([747a2bd](https://github.com/ecosse3/nvim/commit/747a2bd98b8e7a1d6c470949439e30c5a4c32d5e))
* **keymappings:** fix line diagnostics mapping ([13ccc51](https://github.com/ecosse3/nvim/commit/13ccc51cf089b00e0d48c137a916815cfb16d9c6))
* **plugins:** reorder cmp source mapping ([858d0e0](https://github.com/ecosse3/nvim/commit/858d0e040dad072566f6b808340849c2d1b79f24))
* **plugins:** use nvim-colorizer maintaned fork from NvChad & update config ([007273a](https://github.com/ecosse3/nvim/commit/007273ae4556ce521a2670cbdc809cc215a8695d))
* **require:** require impatient by pcall ([16dca98](https://github.com/ecosse3/nvim/commit/16dca9848034c6c339a839c2f381b4fe1926ce09)), closes [#48](https://github.com/ecosse3/nvim/issues/48)
* **require:** safetely require specific plugins ([3b4ca9d](https://github.com/ecosse3/nvim/commit/3b4ca9d12ac286a2345c4fa06f9682f64b8a9262))
* **winbar:** add hl_group to caret ([69253b9](https://github.com/ecosse3/nvim/commit/69253b978d9b1357ae74ab12966fb3b94e199f7d))


### Refactors

* **plugins:** change style of displaying source mapping in cmp ([72d2a74](https://github.com/ecosse3/nvim/commit/72d2a747d4e9a7a5cf4687cbe88146f757e2600f))
* **plugins:** reorder ([9a715ac](https://github.com/ecosse3/nvim/commit/9a715acb06f7b619e9c6f37ef0e7dfd1d2a5da0a))

### [1.7.2](https://github.com/ecosse3/nvim/compare/v1.7.1...v1.7.2) (2022-05-14)


### Bug Fixes

* **lsp:** fix lsp installer loading issues ([d84b928](https://github.com/ecosse3/nvim/commit/d84b9285efa4498d7680cc000a5da42f3e4f287e)), closes [#47](https://github.com/ecosse3/nvim/issues/47)
* **lsp:** set max-width of diagnostic window to 100 to prevent issues on smaller and very large screens ([a67bc25](https://github.com/ecosse3/nvim/commit/a67bc2573da58cd29a6ac7f05c24f6a913809fcf))
* **plugins:** repair markdown-preview installation ([c83e7ce](https://github.com/ecosse3/nvim/commit/c83e7ce09851d33c3ed8e092d6e9a50214300a55))

### [1.7.1](https://github.com/ecosse3/nvim/compare/v1.7.0...v1.7.1) (2022-05-09)


### Bug Fixes

* **lsp:** make ESLint formatting work ([715bf11](https://github.com/ecosse3/nvim/commit/715bf1112f32890377d73a3dba47d1b45d8a530e))


### Refactors

* **plugins:** use nvim_tree events ([c186db7](https://github.com/ecosse3/nvim/commit/c186db74534fe47fb6c1b74bc800b2ee882a354b))

## [1.7.0](https://github.com/ecosse3/nvim/compare/v1.6.0...v1.7.0) (2022-05-08)


### Features

* **lsp:** add icon for no-unused-vars in tsserver lsp ([44bae0f](https://github.com/ecosse3/nvim/commit/44bae0f889fb3a50d2e7f00140086e6cc388dddb))
* **plugins:** add swap function argument functionality mapped to ~ in normal mode ([8239245](https://github.com/ecosse3/nvim/commit/82392456e2a62031e6aa3aeb48e030f33c9f8420))
* **settings:** reduce timeoutlen a bit ([2041982](https://github.com/ecosse3/nvim/commit/20419822d72de636d3000cdce06f24cf075248a1))
* **ui:** add borders to lspconfig ui windows (e.g. :LspInfo) ([b1265df](https://github.com/ecosse3/nvim/commit/b1265dff3fbc3b60a8899c2f374e9fa9ad50255d))
* **ui:** add offset to file explorer (nvim tree) ([f9b6e80](https://github.com/ecosse3/nvim/commit/f9b6e806c51b049938ca614a9e9991aeba81a902))
* **utils:** add new utility func for adding whitespaces & refactor get_relative_gitpath ([3685478](https://github.com/ecosse3/nvim/commit/3685478881c9f92529e52b9472eb41d8c5db4100))
* **which-key:** show markdown preview only for *.md filetypes via autocmd ([2507df7](https://github.com/ecosse3/nvim/commit/2507df76a5f85c10d33f30a792d2072a7e13f9f9))


### Bug Fixes

* **lsp:** make sure to check require of typescript plugin in lsp setup ([dd00198](https://github.com/ecosse3/nvim/commit/dd0019826201c4e613f614d213969475aac36944)), closes [#44](https://github.com/ecosse3/nvim/issues/44)
* **lsp:** move typescript.nvim to pack start instead of opt ([b569c76](https://github.com/ecosse3/nvim/commit/b569c76646a32c322a5f14323d0a2d6bfb66d00a)), closes [#44](https://github.com/ecosse3/nvim/issues/44)
* **pickers:** don't show tests when tsx picker filter is attached to live grep ([522674d](https://github.com/ecosse3/nvim/commit/522674d2ff1637ef1c4d9981109361e41bf43d26))

## [1.6.0](https://github.com/ecosse3/nvim/compare/v1.5.2...v1.6.0) (2022-05-08)


### Features

* **lsp:** add no_console code with icon ([bf497ff](https://github.com/ecosse3/nvim/commit/bf497ff27e2aa08949ea71c8070ec29facacf994))
* **plugins:** completely refactor packer.nvim & add typescript.nvim plugin ([3c58eee](https://github.com/ecosse3/nvim/commit/3c58eee575a02f4c35cf6d31e3edea7fb0184e0b))
* **which-key:** add telescope git_branches mapping ([85a7242](https://github.com/ecosse3/nvim/commit/85a7242809ea5139b2346eab87981e0b02809f85))


### Bug Fixes

* **lsp:** remove nvim-lsp-ts-utils from tsserver setup ([edd2dbd](https://github.com/ecosse3/nvim/commit/edd2dbd16bf76f1a56e57b870beaeba965ffc160))
* **plugins:** enable treesitter indent ([a7b14a6](https://github.com/ecosse3/nvim/commit/a7b14a669f3da919c237794611efe8557b542b4e)), closes [#43](https://github.com/ecosse3/nvim/issues/43)

### [1.5.2](https://github.com/ecosse3/nvim/compare/v1.5.1...v1.5.2) (2022-05-03)


### Bug Fixes

* **colorscheme:** change Boolean highlight color for better matching ([4fc9be4](https://github.com/ecosse3/nvim/commit/4fc9be46af00da13f93d7aade64eeb798282c9db))
* **galaxyline:** show correct relative path in specific git projects ([5c86cb2](https://github.com/ecosse3/nvim/commit/5c86cb25057333cf33dec3abd0f54450dabe7b0c))
* **lua:** update vim api functions of format & lsp server capabilities ([566d14a](https://github.com/ecosse3/nvim/commit/566d14a0a32baa434522c337339596b97a444694))
* **plugins:** enable <C-h> which_key mapping in telescope ([d515afa](https://github.com/ecosse3/nvim/commit/d515afa4074faca0f6c1ab45633c4f06bfcee758))

### [1.5.1](https://github.com/ecosse3/nvim/compare/v1.5.0...v1.5.1) (2022-04-29)


### Bug Fixes

* **keymappings:** change telescope project mappings ([60fc138](https://github.com/ecosse3/nvim/commit/60fc1380cdaa01ce9aaf667b95b3ef9775f71cdb))
* **keymappings:** do not include declaration of variable when looking for its references ([a4fcdd5](https://github.com/ecosse3/nvim/commit/a4fcdd5edde3706c24c5402ab09a5cc8db36f7f6))
* **keymappings:** pass opts to telescope project_files ([10e9a9b](https://github.com/ecosse3/nvim/commit/10e9a9b999d203a4eef96d041653e89a00a25108))
* **lsp:** completely refactor LSP Installer & how to manage lsp config due to lsp-installer changes ([93aad40](https://github.com/ecosse3/nvim/commit/93aad40d37d33af7519f831dace826794b0d132a))
* **lsp:** format on save function fix ([3e37ae9](https://github.com/ecosse3/nvim/commit/3e37ae96d4e9ec22753880905a1b1dea2a1f65db))

## [1.5.0](https://github.com/ecosse3/nvim/compare/v1.4.0...v1.5.0) (2022-04-24)


### Features

* **autocmds:** enable spell checking for certain file types (txt, md, tex) ([274a2d5](https://github.com/ecosse3/nvim/commit/274a2d5194997916c88f04ff5a4dd39a42b6cc1b))
* **autopairs:** use treesitter for auto-pairing ([85ec233](https://github.com/ecosse3/nvim/commit/85ec23395b625301f86d22cfa0d1be0aad9843ac))
* **lsp:** provide toggle format on save custom function and add to which-key ([e327ed8](https://github.com/ecosse3/nvim/commit/e327ed8d9151cf631b7b588e477db3e81156025a))
* **plugins:** add cmp cmdline & add buffer completion options ([597c8fc](https://github.com/ecosse3/nvim/commit/597c8fc10737ca4fc419e60320a2943b64bd9c8f))
* **plugins:** add nvim-spectre with <Leader>pr mapping to refactor ([fc5413d](https://github.com/ecosse3/nvim/commit/fc5413d228734fdd6c7b2ab6153788c3f9b0d3f5))
* **plugins:** add todo comments config and extra keywords ([a84fe78](https://github.com/ecosse3/nvim/commit/a84fe78f72fd78e296f94292d510c0b9b94d9c97))
* **plugins:** change nvim tree git icons & highlight ([8e7140b](https://github.com/ecosse3/nvim/commit/8e7140bed82a53ffd4504d14f07f44bd6dbb45f6))
* **settings:** use two signcolumns ([cfb8297](https://github.com/ecosse3/nvim/commit/cfb8297be0c8c4b24877956190634ef9a8fcaee8))


### Bug Fixes

* **colorscheme:** remove ui.float.highlight from EcoVim config & add manually for nightfly colorscheme ([0ff2843](https://github.com/ecosse3/nvim/commit/0ff28432b819995d7a4c3051c90148c46e82b3a9))
* **lsp:** add additional check of requiring nvim-lsp-installer.servers ([1bb6ceb](https://github.com/ecosse3/nvim/commit/1bb6ceb67c6b8db9b33ad84379d7135f370b4c77))
* **lsp:** make sure that cmp_nvim_lsp is loaded before updating capabilities for html ([cc78446](https://github.com/ecosse3/nvim/commit/cc784460908e9e3725c222f60806ac96e4b807ee))
* **plugins:** make telescope window default width & height ([9dc3051](https://github.com/ecosse3/nvim/commit/9dc30516b8ce689e92f817ffcc9f851c4f792a93))
* **plugins:** set cinnamon mappings manually ([2fa2a0f](https://github.com/ecosse3/nvim/commit/2fa2a0f7e4ceb163c662010d01a13f697c520690))
* **plugins:** use new cmp mapping api & window api ([6678703](https://github.com/ecosse3/nvim/commit/66787030d4e361b82e346a277e592346ba7d503c))
* **plugin:** use main branch instead of master for toggleterm ([c01b0f3](https://github.com/ecosse3/nvim/commit/c01b0f3c0d72506f78b1fa397749480767defa24))

## [1.4.0](https://github.com/ecosse3/nvim/compare/v1.3.0...v1.4.0) (2022-04-18)


### Features

* **cmp:** add config variable to select first item on enter in completion menu (false by default) ([44b0095](https://github.com/ecosse3/nvim/commit/44b00951a1a175cdc33103cc948d6fbc03c44988))
* **cmp:** update completion menu item colors ([2c099ed](https://github.com/ecosse3/nvim/commit/2c099ed06442b4f91e8e4bf374cd6d3303a1eb0f))
* **cmp:** use dev branch, new sorting options & popup decorations ([0220f99](https://github.com/ecosse3/nvim/commit/0220f99ef79d79f817b7039c42cafc955b289574))
* **colorscheme:** set great cmp highlights for tokyonight colorscheme ([349bccb](https://github.com/ecosse3/nvim/commit/349bccb4368261eb6dc1efc671afa0a092120b0e))
* **colorscheme:** use tokyonight as default EcoVim colorscheme ([55ad0e7](https://github.com/ecosse3/nvim/commit/55ad0e755154f7ace1bb318b002207e2227ecfae))
* **lsp:** add native autocmds support ([48fc971](https://github.com/ecosse3/nvim/commit/48fc97115e0f49ba351e66c2b55a1f16fdce0a9b))
* **lsp:** change error sign to filled for better visibility and consistency ([baf96c2](https://github.com/ecosse3/nvim/commit/baf96c2c0f826692c21053229b5e386087928e70))
* **lsp:** disable diagnostic inside node_modules file ([0f0f0d7](https://github.com/ecosse3/nvim/commit/0f0f0d7b814fde3d5d055a5f5000fb7b390416d3))
* **lsp:** use config to load lsp servers ([a079103](https://github.com/ecosse3/nvim/commit/a079103531d13da71077b74195141aec66fbcdc3))
* **plugins:** add cinnamon plugin for smooth scrolling ([e9a9fe5](https://github.com/ecosse3/nvim/commit/e9a9fe5ee314abcdab17fd5211d69e017c1049ef))
* **plugins:** add hlargs plugin ([60291c9](https://github.com/ecosse3/nvim/commit/60291c9aee9d53019f484dcfb11c1e856334b7c5))
* **plugins:** provide changeable patterns for rooter in EcoVim config ([b0c767f](https://github.com/ecosse3/nvim/commit/b0c767f5a4d5c26ea328f744da8740e5915d8c3b))
* **settings:** have a global statusline at the bottom instead of one for each window ([7152d7f](https://github.com/ecosse3/nvim/commit/7152d7fb8c1b50a2ae240e3ed3535576b9e0d698))
* **settings:** set max num of items in completion menu to 10 ([92de6d9](https://github.com/ecosse3/nvim/commit/92de6d98880f717b948ccb6112965c02d13a50a9))
* **telescope:** add multi-rg custom picker and use with default <S-P> mapping ([c48f74f](https://github.com/ecosse3/nvim/commit/c48f74fdb12ff58a37191cabdfd9d6e158d3eba5))
* **which-key:** increase resize value, remove balance windows map & rename code action ([3f4c4ac](https://github.com/ecosse3/nvim/commit/3f4c4ac513b91c496ac3a14ebebe3a1c1e9f6978))


### Bug Fixes

* **cmp:** add winhighlight for window completion menu ([21f1f64](https://github.com/ecosse3/nvim/commit/21f1f6451d0c262f4868079816599fe722d5dd34))
* **cmp:** provide better suggestions based on sources priorities & sorting ([10b55a7](https://github.com/ecosse3/nvim/commit/10b55a730f93163bc35841ab25e5f9c12a080cef))
* **cmp:** remove deprecated native_menu option from setup ([962b9b4](https://github.com/ecosse3/nvim/commit/962b9b4910c76b47d9e63a259020a7d320e6812c))
* **cmp:** use master branch of cmp ([8aed467](https://github.com/ecosse3/nvim/commit/8aed467949765d691a266e979f0f07c1b19c5bc8))
* **colorscheme:** change default red rainbow color of parenthesis to blue ([38a9f77](https://github.com/ecosse3/nvim/commit/38a9f778e9e0dfedb68ce8e33f26bde2dcff369b))
* **config:** wrap LSP servers with a `servers` key ([266a371](https://github.com/ecosse3/nvim/commit/266a3716c43c353402d9bcdaedd6e196d18f904f))
* **install:** do not update treesitter on plugins.lua run ([9006bb6](https://github.com/ecosse3/nvim/commit/9006bb6ddf75359418a27b1935cb7ae5828f2840))
* **lsp:** disable all lsp by default ([a16a9dd](https://github.com/ecosse3/nvim/commit/a16a9dd71f4005e8d5f970efa8ded68e7ab2b34b))
* **plugins:** do not hijack unnamed buffer (ex. dashboard) when opening ([993b344](https://github.com/ecosse3/nvim/commit/993b34412b746cc654c54376d3074fc6ef60c5c5))
* **plugins:** do not map <C-e> for editing in place inside nvim-tree ([6485cf2](https://github.com/ecosse3/nvim/commit/6485cf204f038a093c0c7191b281a8752d65e388))
* **plugins:** do not select first item in cmp menu automatically ([4e834de](https://github.com/ecosse3/nvim/commit/4e834de7b1c87bc82baafa2a86ab50c508cc0e35))
* **plugins:** do not use cached list for telescope repo ([745f52b](https://github.com/ecosse3/nvim/commit/745f52b4cac69112bf0da140ab4f0bbb58ce7cc4))
* **plugins:** remove default and deprecated config from dressing.lua ([035c9b4](https://github.com/ecosse3/nvim/commit/035c9b4e4e70da6651a6017ed9318ccf87edc00e))
* **plugins:** remove mpack rocks require from impatient.nvim ([f70ab85](https://github.com/ecosse3/nvim/commit/f70ab85ad54562cf5d4ded8e626ad0530cf188dd))
* **statusline:** change separator icons for line pos & fix spacing ([c4ffbe1](https://github.com/ecosse3/nvim/commit/c4ffbe1c295a53fd3f0108b11a26f977cd3a60f0))
* **telescope:** update multi-rg aliases ([b638c2c](https://github.com/ecosse3/nvim/commit/b638c2c5a43cbf0b9f1dda93cafcd4e3e0b4ef7b))
* **treesitter:** disable indent what fixes a lot of indentation issues in TSX ([028026c](https://github.com/ecosse3/nvim/commit/028026c226d76bc746a4c883a41a48f39ecfe394))

## [1.3.0](https://github.com/ecosse3/nvim/compare/v1.2.0...v1.3.0) (2022-03-09)


### Features

* **lsp:** add native autocmds support ([48fc971](https://github.com/ecosse3/nvim/commit/48fc97115e0f49ba351e66c2b55a1f16fdce0a9b))
* **lsp:** change error sign to filled for better visibility and consistency ([baf96c2](https://github.com/ecosse3/nvim/commit/baf96c2c0f826692c21053229b5e386087928e70))
* **lsp:** disable diagnostic inside node_modules file ([0f0f0d7](https://github.com/ecosse3/nvim/commit/0f0f0d7b814fde3d5d055a5f5000fb7b390416d3))
* **lsp:** use config to load lsp servers ([a079103](https://github.com/ecosse3/nvim/commit/a079103531d13da71077b74195141aec66fbcdc3))
* **plugins:** provide changeable patterns for rooter in EcoVim config ([b0c767f](https://github.com/ecosse3/nvim/commit/b0c767f5a4d5c26ea328f744da8740e5915d8c3b))


### Bug Fixes

* **config:** wrap LSP servers with a `servers` key ([266a371](https://github.com/ecosse3/nvim/commit/266a3716c43c353402d9bcdaedd6e196d18f904f))
* **install:** do not update treesitter on plugins.lua run ([9006bb6](https://github.com/ecosse3/nvim/commit/9006bb6ddf75359418a27b1935cb7ae5828f2840))
* **lsp:** disable all lsp by default ([a16a9dd](https://github.com/ecosse3/nvim/commit/a16a9dd71f4005e8d5f970efa8ded68e7ab2b34b))
* **plugins:** do not hijack unnamed buffer (ex. dashboard) when opening ([993b344](https://github.com/ecosse3/nvim/commit/993b34412b746cc654c54376d3074fc6ef60c5c5))
* **plugins:** do not map <C-e> for editing in place inside nvim-tree ([6485cf2](https://github.com/ecosse3/nvim/commit/6485cf204f038a093c0c7191b281a8752d65e388))
* **plugins:** remove default and deprecated config from dressing.lua ([035c9b4](https://github.com/ecosse3/nvim/commit/035c9b4e4e70da6651a6017ed9318ccf87edc00e))
* **plugins:** remove mpack rocks require from impatient.nvim ([f70ab85](https://github.com/ecosse3/nvim/commit/f70ab85ad54562cf5d4ded8e626ad0530cf188dd))

### [1.2.1](https://github.com/ecosse3/nvim/compare/v1.2.0...v1.2.1) (2022-02-15)


### Bug Fixes

* **install:** do not update treesitter on plugins.lua run ([8771105](https://github.com/ecosse3/nvim/commit/8771105ef9bc6bd2f9663f10307a56f903a5afe9))
* **plugins:** remove mpack rocks require from impatient.nvim ([4235ad7](https://github.com/ecosse3/nvim/commit/4235ad71c3ff3e32fd6edce062d1ba3f71254eea))

## [1.2.0](https://github.com/ecosse3/nvim/compare/v1.1.1...v1.2.0) (2022-02-10)


### Features

* **blame:** add custom git blame functionality of whole file with commit checking ([9841fe5](https://github.com/ecosse3/nvim/commit/9841fe59a30a04cf7a8d393900702a0e1639d7f7))
* **colorscheme:** clear StatusLine bg for Tokyonight ([60304dc](https://github.com/ecosse3/nvim/commit/60304dc43d64bded57618c77ddb55a041cc1f9dc))
* **keymappings:** add "gb" map for git blame open, q to close inside ([7aa40b4](https://github.com/ecosse3/nvim/commit/7aa40b40aeac314dcd4658350286960e0caac217))
* **keymappings:** add signature help mapping to <C-k> ([e2a5737](https://github.com/ecosse3/nvim/commit/e2a5737ee050db49d3eff565a4baeb4dee4b3125))
* **lsp:** add filetypes opts for Vue and set to vue, javascript by default ([2182853](https://github.com/ecosse3/nvim/commit/2182853773a9a9130e7e704f03cca1b479cd7526))
* **lsp:** add lsp codes & diagnostic source information formats to LSP ([c79e565](https://github.com/ecosse3/nvim/commit/c79e5658d99c84b787d343b9c3909c556fc94ccc))
* **lsp:** refactor vue -> vue2 ([7d573d7](https://github.com/ecosse3/nvim/commit/7d573d7c20af404b971304743b522e23e0c20060))
* **lsp:** use HTML syntax highlighting in template for Vue.js by Treesitter ([4e06266](https://github.com/ecosse3/nvim/commit/4e06266a60f605aa464cd62601b9d44f046548d0))
* **plugins:** add vim-rooter & do not update cwd by nvim-tree ([4a50259](https://github.com/ecosse3/nvim/commit/4a50259082b14b22ee223b65ffe08b894db5a7e6))
* **plugins:** enhancement in autopairs plugin config ([9d98b7c](https://github.com/ecosse3/nvim/commit/9d98b7cbc8e3f76a34ffa069386c43f6bb7a9c9c))
* **tree:** enable update_cwd option in Nvim Tree ([f79d667](https://github.com/ecosse3/nvim/commit/f79d6678ec8c5a775d398f78c3bd474556fa2a7b))
* **utils:** add git functions ([50095ae](https://github.com/ecosse3/nvim/commit/50095ae8c602710325fca32b41e34ff5fd910514))
* **utils:** add globals functions to debug ([5c15c11](https://github.com/ecosse3/nvim/commit/5c15c11bcb62ae04d7d5533b3937a2d30072c62f))
* **utils:** refactor utils to utils/init and add couple new functions ([6a6a341](https://github.com/ecosse3/nvim/commit/6a6a341c2eae276814838124eb30a20aee80eb77))


### Bug Fixes

* **colorscheme:** float colors for Tokyonight theme ([93a6c91](https://github.com/ecosse3/nvim/commit/93a6c9174c14e673c1f1e8cb6a880e01892277c2))
* **colorscheme:** link comment highlight to GitSignsCurrentLineBlame in Tokyonight theme ([6457cf6](https://github.com/ecosse3/nvim/commit/6457cf635a4a2e9631fbaa5e0db216b53543ded2))
* **keymappings:** change <C-k> map of signature help to L cause of conflicting mapping ([41ade5d](https://github.com/ecosse3/nvim/commit/41ade5db5cf5c0b10f41f6e867452994b0d83191))
* **lsp:** change signs icons and make them work ([4abe5bc](https://github.com/ecosse3/nvim/commit/4abe5bccf8e569b49cc01281f57b6d08457aeda1))

### [1.1.1](https://github.com/ecosse3/nvim/compare/v1.1.0...v1.1.1) (2022-02-02)


### Bug Fixes

* **colorscheme:** make telescope windows transparent in Tokyonight ([47843b0](https://github.com/ecosse3/nvim/commit/47843b01a42eedb88ecabe401bc1bc4a0064f511))
* **lsp:** require graphql settings in installer ([55f733b](https://github.com/ecosse3/nvim/commit/55f733b84e2735aeac422a3dd2e49d42a586b7b8))
* **plugins:** disable space and eol chars & sort indent_blankline options ([2476e93](https://github.com/ecosse3/nvim/commit/2476e932364a5c8824e229b77aff8f65f7e7eccf))
* **plugins:** indent_blankline uses default char symbol for now, so it doesn't break between macOS & Linux ([9c06bc6](https://github.com/ecosse3/nvim/commit/9c06bc6a7f067d0b0576c9644d80ba1b98b35d64))

## [1.1.0](https://github.com/ecosse3/nvim/compare/v1.0.0...v1.1.0) (2022-01-27)


### Features

* **colorscheme:** link line number color to comment in TOKYO NIGHT & VertSplit and Galaxyline background to same color as nvim tree ([fc03882](https://github.com/ecosse3/nvim/commit/fc03882cb516cd2d518a57dd4839f611515642be))
* **plugins:** switch glow.nvim to markdown-preview.nvim ([2a1cf2a](https://github.com/ecosse3/nvim/commit/2a1cf2a0f26acdea089f2dfc2aaeae5131899bde))


### Bug Fixes

* **keymaps:** diagnostics & code action mappings of trouble & telescope ([9b7bf6e](https://github.com/ecosse3/nvim/commit/9b7bf6ecf449b4ba6e0dbb928395a6c89e57f43a))
* remove use_internal_diff from gitsigns config since its deprecated ([c8c0ac8](https://github.com/ecosse3/nvim/commit/c8c0ac87b73f2bcae5ef5bdb3a52f5bd057481f9))
* update gitsigns config ([4833c42](https://github.com/ecosse3/nvim/commit/4833c4289aac5476528e4b9ba8565705989139e6))


### Others

* add configuration file for conventional changelog ([e0bd3ea](https://github.com/ecosse3/nvim/commit/e0bd3ea4a55eecdb031fda57b2e04611310d7cab))
* remove vim-codepainter plugin ([31e3277](https://github.com/ecosse3/nvim/commit/31e3277686cafcee44bef2b706999c108efe7829))
* **trouble:** fix toggle and config ([4f21bac](https://github.com/ecosse3/nvim/commit/4f21bac6f5ec486ffd5acdc0fbb71f98a544915c))

================
File: init.lua
================
require('config.EcoVim')

require('utils.globals')
-- require('utils.functions')

require('config.options')
require('config.lazy')
require('config.keymappings')
require('config.autocmds')
require('config.lsp.config')
require('config.lsp.setup')
require('config.lsp.functions')

require('internal.cursorword')
require('user.create-page')

================
File: lazy-lock.json
================
{
  "Comment.nvim": { "branch": "master", "commit": "e30b7f2008e52442154b66f7c519bfd2f1e32acb" },
  "CopilotChat.nvim": { "branch": "canary", "commit": "451d365928a994cda3505a84905303f790e28df8" },
  "FixCursorHold.nvim": { "branch": "master", "commit": "1900f89dc17c603eec29960f57c00bd9ae696495" },
  "LuaSnip": { "branch": "master", "commit": "03c8e67eb7293c404845b3982db895d59c0d1538" },
  "alpha-nvim": { "branch": "main", "commit": "de72250e054e5e691b9736ee30db72c65d560771" },
  "auto-session": { "branch": "main", "commit": "317412742990371f8e4709074da5c378456a27ff" },
  "blame.nvim": { "branch": "main", "commit": "39bb4cda9e658d053a43919b10ca52c0a4d738e1" },
  "blink.cmp": { "branch": "main", "commit": "dcda20d3aa345025699a920c45b0a0603551f41d" },
  "blink.compat": { "branch": "main", "commit": "f1836ed7a07f8d082ff6c3fbae1e476ba2adee84" },
  "bufferline.nvim": { "branch": "main", "commit": "655133c3b4c3e5e05ec549b9f8cc2894ac6f51b3" },
  "cmp-nvim-lsp": { "branch": "main", "commit": "99290b3ec1322070bcfb9e846450a46f6efa50f0" },
  "codecompanion.nvim": { "branch": "main", "commit": "dea12f6289bb6cd047622028ab53fe1ac54575ec" },
  "codesnap.nvim": { "branch": "main", "commit": "6400480aa6cc366cbd931146c429aaa64680dab9" },
  "conform.nvim": { "branch": "master", "commit": "db8a4a9edb217067b1d7a2e0362c74bfe9cc944d" },
  "copilot-cmp": { "branch": "master", "commit": "b6e5286b3d74b04256d0a7e3bd2908eabec34b44" },
  "copilot.lua": { "branch": "master", "commit": "30321e33b03cb924fdcd6a806a0dc6fa0b0eafb9" },
  "diffview.nvim": { "branch": "main", "commit": "4516612fe98ff56ae0415a259ff6361a89419b0a" },
  "dressing.nvim": { "branch": "master", "commit": "2d7c2db2507fa3c4956142ee607431ddb2828639" },
  "emmet-vim": { "branch": "master", "commit": "6c511a8d7d2863066f32e25543e2bb99d505172c" },
  "faster.nvim": { "branch": "main", "commit": "c3a5286765b43263791eb736affeb6fdff81e4ef" },
  "fidget.nvim": { "branch": "main", "commit": "d9ba6b7bfe29b3119a610892af67602641da778e" },
  "flash.nvim": { "branch": "main", "commit": "3c942666f115e2811e959eabbdd361a025db8b63" },
  "friendly-snippets": { "branch": "main", "commit": "efff286dd74c22f731cdec26a70b46e5b203c619" },
  "fzf-lua": { "branch": "main", "commit": "f970eafc532464cbf6339d501751bdcb6b8659e3" },
  "git-conflict.nvim": { "branch": "main", "commit": "4bbfdd92d547d2862a75b4e80afaf30e73f7bbb4" },
  "git-worktree.nvim": { "branch": "master", "commit": "f247308e68dab9f1133759b05d944569ad054546" },
  "gitlinker.nvim": { "branch": "master", "commit": "23982c86f50a9c3f4bc531d41b7a4a68ddd12355" },
  "gitsigns.nvim": { "branch": "main", "commit": "7010000889bfb6c26065e0b0f7f1e6aa9163edd9" },
  "indent-blankline.nvim": { "branch": "master", "commit": "005b56001b2cb30bfa61b7986bc50657816ba4ba" },
  "lazy.nvim": { "branch": "main", "commit": "6c3bda4aca61a13a9c63f1c1d1b16b9d3be90d7a" },
  "lazygit.nvim": { "branch": "main", "commit": "b9eae3badab982e71abab96d3ee1d258f0c07961" },
  "lualine.nvim": { "branch": "master", "commit": "2a5bae925481f999263d6f5ed8361baef8df4f83" },
  "luarocks.nvim": { "branch": "main", "commit": "1db9093915eb16ba2473cfb8d343ace5ee04130a" },
  "markdown-preview.nvim": { "branch": "master", "commit": "a923f5fc5ba36a3b17e289dc35dc17f66d0548ee" },
  "marks.nvim": { "branch": "master", "commit": "bb25ae3f65f504379e3d08c8a02560b76eaf91e8" },
  "mason-lspconfig.nvim": { "branch": "main", "commit": "1a31f824b9cd5bc6f342fc29e9a53b60d74af245" },
  "mason.nvim": { "branch": "main", "commit": "fc98833b6da5de5a9c5b1446ac541577059555be" },
  "mini.ai": { "branch": "main", "commit": "ebb04799794a7f94628153991e6334c3304961b8" },
  "mini.align": { "branch": "main", "commit": "8d5f3254a4c25fdfd26b7467d2372f5deed3a78c" },
  "mini.bufremove": { "branch": "main", "commit": "285bdac9596ee7375db50c0f76ed04336dcd2685" },
  "mini.icons": { "branch": "main", "commit": "ec61af6e606fc89ee3b1d8f2f20166a3ca917a36" },
  "mini.nvim": { "branch": "main", "commit": "0420076298c4457f200c2de468f65d080597a347" },
  "multicursors.nvim": { "branch": "main", "commit": "72225ea9e4443c3f4b9df91d0193e07c4ee8d382" },
  "neogit": { "branch": "master", "commit": "333968f8222fda475d3e4545a9b15fe9912ca26a" },
  "neotest": { "branch": "master", "commit": "dddbe8fe358b05b2b7e54fe4faab50563171a76d" },
  "neotest-jest": { "branch": "main", "commit": "514fd4eae7da15fd409133086bb8e029b65ac43f" },
  "noice.nvim": { "branch": "main", "commit": "0427460c2d7f673ad60eb02b35f5e9926cf67c59" },
  "nui.nvim": { "branch": "main", "commit": "8d3bce9764e627b62b07424e0df77f680d47ffdb" },
  "numb.nvim": { "branch": "master", "commit": "7f564e638d3ba367abf1ec91181965b9882dd509" },
  "nvim-autopairs": { "branch": "master", "commit": "68f0e5c3dab23261a945272032ee6700af86227a" },
  "nvim-bqf": { "branch": "main", "commit": "ebb6d2689e4427452180f17c53f29f7e460236f1" },
  "nvim-cmp": { "branch": "main", "commit": "8c82d0bd31299dbff7f8e780f5e06d2283de9678" },
  "nvim-coverage": { "branch": "main", "commit": "a939e425e363319d952a6c35fb3f38b34041ded2" },
  "nvim-dap": { "branch": "master", "commit": "6a5bba0ddea5d419a783e170c20988046376090d" },
  "nvim-dap-repl-highlights": { "branch": "master", "commit": "a7512fc0a0de0c0be8d58983939856dda6f72451" },
  "nvim-dap-ui": { "branch": "master", "commit": "bc81f8d3440aede116f821114547a476b082b319" },
  "nvim-dap-virtual-text": { "branch": "master", "commit": "df66808cd78b5a97576bbaeee95ed5ca385a9750" },
  "nvim-dap-vscode-js": { "branch": "main", "commit": "03bd29672d7fab5e515fc8469b7d07cc5994bbf6" },
  "nvim-highlight-colors": { "branch": "main", "commit": "af94cd45b0608755d1affa6c36851fc1e73b48bc" },
  "nvim-lint": { "branch": "master", "commit": "936197073214c26a347fb933c9459c8766376b23" },
  "nvim-lsp-file-operations": { "branch": "master", "commit": "9744b738183a5adca0f916527922078a965515ed" },
  "nvim-lspconfig": { "branch": "master", "commit": "2574ad38c6ee4f0bef3a1ca305cd5df627a52bb3" },
  "nvim-navic": { "branch": "master", "commit": "8649f694d3e76ee10c19255dece6411c29206a54" },
  "nvim-nio": { "branch": "master", "commit": "21f5324bfac14e22ba26553caf69ec76ae8a7662" },
  "nvim-notify": { "branch": "master", "commit": "22f29093eae7785773ee9d543f8750348b1a195c" },
  "nvim-scissors": { "branch": "main", "commit": "c2457e8c0163fc2d00226f78c95acb2c2bd2a549" },
  "nvim-spectre": { "branch": "master", "commit": "ddd7383e856a7c939cb4f5143278fe041bbb8cb9" },
  "nvim-spider": { "branch": "main", "commit": "9b9a1cf88a10790de69d3b0562d7d612f23561d5" },
  "nvim-surround": { "branch": "main", "commit": "ec2dc7671067e0086cdf29c2f5df2dd909d5f71f" },
  "nvim-tree.lua": { "branch": "master", "commit": "5bea2b37523a31288e0fcab42f3be5c1bd4516bb" },
  "nvim-treesitter": { "branch": "master", "commit": "d76a8b6e1b67fd3bcffec4a5d45fd9dee4dbbee8" },
  "nvim-treesitter-textobjects": { "branch": "master", "commit": "9937e5e356e5b227ec56d83d0a9d0a0f6bc9cad4" },
  "nvim-treesitter-textsubjects": { "branch": "master", "commit": "abcbb0e537c9c24800b03b9ca33bee5806604629" },
  "nvim-ts-autotag": { "branch": "main", "commit": "a1d526af391f6aebb25a8795cbc05351ed3620b5" },
  "nvim-ts-context-commentstring": { "branch": "main", "commit": "1b212c2eee76d787bbea6aa5e92a2b534e7b4f8f" },
  "nvim-ufo": { "branch": "main", "commit": "a52c92c3bbaa10f0c9b547a50adaa8c7d8b29f94" },
  "nvim-web-devicons": { "branch": "master", "commit": "4c3a5848ee0b09ecdea73adcd2a689190aeb728c" },
  "octo.nvim": { "branch": "master", "commit": "3377816328436be94c1cad320377eda6cb9667b2" },
  "oil.nvim": { "branch": "master", "commit": "548587d68b55e632d8a69c92cefd981f360634fa" },
  "onedarkpro.nvim": { "branch": "main", "commit": "d3d3e11331d30f7d5c1453232bad9c24d04e564f" },
  "package-info.nvim": { "branch": "master", "commit": "3de4f3569ce60e248707df042b72769b3ec343b8" },
  "plenary.nvim": { "branch": "master", "commit": "857c5ac632080dba10aae49dba902ce3abf91b35" },
  "popup.nvim": { "branch": "master", "commit": "b7404d35d5d3548a82149238289fa71f7f6de4ac" },
  "printer.nvim": { "branch": "master", "commit": "bdd5310075f9d4fe5d4270b7dc75188347fa9353" },
  "promise-async": { "branch": "main", "commit": "119e8961014c9bfaf1487bf3c2a393d254f337e2" },
  "qmk.nvim": { "branch": "main", "commit": "ad51cb15e607da0983fcf9882d38a2aafac32149" },
  "rainbow-delimiters.nvim": { "branch": "master", "commit": "85b80abaa09cbbc039e3095b2f515b3cf8cadd11" },
  "refactoring.nvim": { "branch": "master", "commit": "36bd14ddd7ebf0546c15e6088e8bc93f8a98787d" },
  "render-markdown.nvim": { "branch": "main", "commit": "9721ffe230ec90e49c49ee33b5ca44c3fc689214" },
  "scratch.nvim": { "branch": "main", "commit": "0e3ee1fe64023efe9459a361401a48017d34349e" },
  "smart-splits.nvim": { "branch": "master", "commit": "9996d5f7214e24dcb3e5e0701c2f0259b95bb85c" },
  "snacks.nvim": { "branch": "main", "commit": "bc0630e43be5699bb94dadc302c0d21615421d93" },
  "sqlite.lua": { "branch": "master", "commit": "50092d60feb242602d7578398c6eb53b4a8ffe7b" },
  "stay-in-place.nvim": { "branch": "main", "commit": "0628b6db8970fc731abf9608d6f80659b58932c9" },
  "switch.vim": { "branch": "main", "commit": "b6bab56113312ebaa53038461c1a61bcb1e4a9d9" },
  "tabout.nvim": { "branch": "master", "commit": "3d7fbc7f5e91ef0f96b4d787c78ad9f8820de3ec" },
  "tailwind-fold.nvim": { "branch": "main", "commit": "f8ce6d3c37be5a023c292357efde0c200b0b5138" },
  "tailwind-sorter.nvim": { "branch": "main", "commit": "717e5c9761ed8334dadbb9357df7d826aae97b92" },
  "telescope-fzf-native.nvim": { "branch": "main", "commit": "1f08ed60cafc8f6168b72b80be2b2ea149813e55" },
  "telescope-repo.nvim": { "branch": "master", "commit": "a5395a4bf0fd742cc46b4e8c50e657062f548ba9" },
  "telescope.nvim": { "branch": "master", "commit": "a17d611a0e111836a1db5295f04945df407c5135" },
  "template-string.nvim": { "branch": "main", "commit": "da5f326b65fb74fd068aa1d8b55461b64c8fb23b" },
  "text-case.nvim": { "branch": "main", "commit": "e898cfd46fa6cde0e83abb624a16e67d2ffc6457" },
  "todo-comments.nvim": { "branch": "main", "commit": "304a8d204ee787d2544d8bc23cd38d2f929e7cc5" },
  "toggleterm.nvim": { "branch": "main", "commit": "50ea089fc548917cc3cc16b46a8211833b9e3c7c" },
  "tokyonight.nvim": { "branch": "main", "commit": "057ef5d260c1931f1dffd0f052c685dcd14100a3" },
  "treesj": { "branch": "main", "commit": "0d81326b5afd36babe7dd480aabbb0b05f33e688" },
  "trouble.nvim": { "branch": "main", "commit": "85bedb7eb7fa331a2ccbecb9202d8abba64d37b3" },
  "ts-error-translator.nvim": { "branch": "main", "commit": "47e5ba89f71b9e6c72eaaaaa519dd59bd6897df4" },
  "tsc.nvim": { "branch": "main", "commit": "5bd25bb5c399b6dc5c00392ade6ac6198534b53a" },
  "tw-values.nvim": { "branch": "main", "commit": "34183307a8a3867afb1f52a262d89faac6b20f9d" },
  "typescript-tools.nvim": { "branch": "master", "commit": "35e397ce467bedbbbb5bfcd0aa79727b59a08d4a" },
  "ultimate-autopair.nvim": { "branch": "v0.6", "commit": "b24b97c538b71b6de0ce9d84e47df27b6ecafd76" },
  "vim-maximizer": { "branch": "master", "commit": "2e54952fe91e140a2e69f35f22131219fcd9c5f1" },
  "vim-rooter": { "branch": "master", "commit": "51402fb77c4d6ae94994e37dc7ca13bec8f4afcc" },
  "vim-table-mode": { "branch": "master", "commit": "e4365bde024f73e205eefa2fb78e3029ddb92ea9" },
  "which-key.nvim": { "branch": "main", "commit": "370ec46f710e058c9c1646273e6b225acf47cbed" },
  "yanky.nvim": { "branch": "main", "commit": "80d9385dbebe7049fd1961d7909b835a58ce9dcc" }
}

================
File: LICENSE
================
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.

================
File: README.md
================
# Setup


`npm install -g typescript-language-server typescript`
`:LspInstall ts_ls`


# Ecovim: Frontend Neovim Config

[![Last commit](https://img.shields.io/github/last-commit/ecosse3/nvim?style=for-the-badge)](https://github.com/ecosse3/nvim/commits/master)
![Stars](https://img.shields.io/github/stars/ecosse3/nvim?style=for-the-badge)
![License](https://img.shields.io/github/license/ecosse3/nvim?style=for-the-badge)
![Neovim Version](https://img.shields.io/badge/For%20Neovim-0.9+-yellowgreen?style=for-the-badge&logo=neovim&logoColor=d8abbb&color=d8abbb)

### A non-minimal Neovim config built to work most efficiently with Frontend Development.

## Features

- Configured for TypeScript Development (React.js, Next.js, Vue.js, Angular, Node.js etc.)
- Great default theme: [Tokyonight](https://github.com/folke/tokyonight.nvim)
- Lazy loaded via [lazy.nvim](https://github.com/folke/lazy.nvim)
- Highly performant (90ms load time)
- Extendable LSP configuration via [mason.nvim](https://github.com/williamboman/mason.nvim)
- Support for :robot: AI: [ChatGPT](https://openai.com/blog/chatgpt/), [GitHub Copilot](https://github.com/features/copilot), [Codeium](https://codeium.com/) and [Tabnine](https://www.tabnine.com/)
- Support for [TailwindCSS](https://tailwindcss.com/) with highlighted colors
- JSON autocompletion for most popular Frontend configs
- NPM packages autocompletion in _package.json_
- Internal [Jest](https://github.com/facebook/jest) testing and [Coverage](https://github.com/andythigpen/nvim-coverage) support
- Debugging with [nvim-dap](https://github.com/mfussenegger/nvim-dap) (works with React.js & React Native)
- Automatic Treesitter-based folding with imports folded by default
- Current code context via [nvim-navic](https://github.com/SmiteshP/nvim-navic)
- Beautiful and functional custom statusline built with [galaxyline.nvim](https://github.com/glepnir/galaxyline.nvim) 
- Git management with [Lazygit](https://github.com/jesseduffield/lazygit), custom telescope commits view with [git-delta](https://github.com/dandavison/delta), [gitsigns](https://github.com/lewis6991/gitsigns.nvim) & [diffview](https://github.com/sindrets/diffview.nvim), custom git blame

And of course usage of [telescope](https://github.com/nvim-telescope/telescope.nvim), [nvim-tree](https://github.com/kyazdani42/nvim-tree.lua), [barbar](https://github.com/romgrk/barbar.nvim), [cmp](https://github.com/hrsh7th/nvim-cmp), [treesitter](https://github.com/nvim-treesitter/nvim-treesitter), [blankline](https://github.com/lukas-reineke/indent-blankline.nvim) & more!

## Screenshots

Dashboard plugin Alpha

![Dashboard](./.screenshots/6-alpha.png)

Overview

![Neovim](./.screenshots/5-main.png)

<details>
<summary>More screenshots</summary>

Some of screenshots can be old

TailwindCSS with nvim-cmp

![TailwindCSS](./.screenshots/5-tailwind.png)

Which Key Menu

![WhichKey](./.screenshots/4-which-key.png)

Lazygit

![Lazygit](./.screenshots/4-lazygit.png)

Telescope

![Telescope](./.screenshots/4-telescope.png)

Git Commits w/ Telescope

![Commits](./.screenshots/4-bcommits.png)

Git Side Blame

![Side Blame](./.screenshots/4-side-blame.png)
</details>

## Installation

**Just clone GitHub repo into ~/.config/nvim.**

**Prerequisities**

- Make sure you have installed the latest version of Neovim v0.9.0+ (nightly is preferred).
- Have wget, curl, unzip, git, make, pip, python, npm, node, luarocks, fd, ripgrep and cargo installed on your system. You can check if you are missing anything with `:checkhealth` command.
- Have any nerd font installed. *Fira Code* has been used in screenshots. You can download it from [nerdfonts.com](https://www.nerdfonts.com/font-downloads).

**After install configuration:**

1. Selected treesitter Languages are installed by default.
To check it run `:TSInstallInfo`.
Make sure to run `:TSInstall <lang>` for specific language you want to install.
2. LSP servers are enabled by default. You can check installed LSP servers by `:Mason` command.

## Configuration

To change EcoVim related config use the `config/EcoVim.lua` file.

To change vim settings use the `config/options.lua` file.

To change plugin related settings use the specific `plugins/[name].lua` file. Some of the plugin config can be set up during plugin installation in `config/plugins.lua` file, where you can add new plugins.

## Keybindings

Currently I have no idea how to write for you my whole workflow of using Ecovim config in React.js projects I am working on,\
but I can write you the most useful custom key bindings by the frequency I use them.

Space (SPC) is my Leader key.

<details>
<summary>File Explorer</summary>

### File Explorer

| Key Bindings | Description                                   |
|--------------|-----------------------------------------------|
| <C - e>      | Open File Explorer                            |
| Backspace    | Back to file explorer (in editor normal mode) |
| g?           | Open commands menu                            |
| a            | Create new file/directory                     |
| x            | Cut                                           |
| c            | Copy                                          |
| y            | Copy name                                     |
| r            | Rename                                        |
| I            | Toggle git ignore files                       |

</details>

<details>
<summary>Searching</summary>

### Searching

| Key Bindings | Description         |
|--------------|---------------------|
| <C - p>      | Telescope git files |
| <S - p>      | Telescope live grep |
| s            | Enables lightspeed  |
| SPC s d      | Search dotfiles     |
| SPC s h      | Search file history |
| SPC s s      | Search history      |

</details>

<details>
<summary>Working with LSP</summary>

### Working with LSP:

| Key Bindings           | Description                                       |
|------------------------|---------------------------------------------------|
| <C - Space> or SPC c a | Code action                                       |
| <S - K>                | Show documentation under cursor                   |
| gd                     | Go to definition                                  |
| gr                     | Go to references                                  |
| ]g                     | Go to next diagnostic                             |
| [g                     | Go to prev diagnostic                             |
| SPC c f                | Format document (usually ESLint/Prettier)         |
| SPC c r                | Rename                                            |
| SPC c q                | Quick fix - when I exactly know if it will fix it |
| SPC c d                | Local diagnostics list                            |
| SPC c o                | Organize imports                                  |

</details>

<details>
<summary>Working with Git</summary>

### Working with Git:

| Key Bindings | Description                                                                                                                              |
|--------------|------------------------------------------------------------------------------------------------------------------------------------------|
| SPC g g      | Lazygit - for committing and branch change                                                                                               |
| SPC g s      | Telescope status - when I want to change/search file I am working on with git changes                                                    |
| ]c           | Go to next change hunk                                                                                                                   |
| [c           | Go to prev change hunk                                                                                                                   |
| SPC g d      | Advanced powerful diff view with many filters for debugging code, checking previous changes etc.                                         |
| SPC g m      | View hunk diff of a line under cursor                                                                                                    |
| SPC g h r    | Reset changed hunk under cursor - I like to check quickly what I have changed in that line and then just type 'u' to go back             |
| SPC g h s    | Stage hunk under cursor - Sometimes it's faster than selecting lines in Lazygit, so I can stage specific lines and then just do a commit |
| SPC g l c    | Quick check of previous commit in current buffer, <C-s> inside to switch preview                                                         |
| SPC g w c    | Creates a new worktree. Recommended directory is `../path`                                                                               |
| SPC g w w    | Switches to a worktree. <C-d> removes worktree.                                                                                          |

</details>

<details>
<summary>Working with Project</summary>

### Working with Project:

| Key Bindings | Description                                                                                                                                                                                                                                                                             |
|--------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| <C - e>      | Toggles nvim-tree file explorer                                                                                                                                                                                                                                                         |
| SPC p w      | Find word under cursor in project - very useful to find where component is used. Just use binding and type '<'. There is a lot of alternatives like LSP references but I like it with telescope and to not find only references but whole text under cursor.                            |
| SPC p f      | Find file under cursor in project - it finds files in project which contains text under cursor. Useful when you name directories by component name in React and wants to go quickly to file. 'gd' is better but in some projects without TS or with mixed JS/TS it cannot work properly |
| SPC p t      | Finds TODOs/NOTES in project                                                                                                                                                                                                                                                            |
| SPC p l      | Switch between projects                                                                                                                                                                                                                                                                 |
| SPC p s      | Save session to load it later from Dashboard                                                                                                                                                                                                                                            |

</details>

<details>
<summary>Commenting</summary>

### Commenting

| Key Bindings | Description                |
|--------------|----------------------------|
| gcc          | Create/remove comment      |
| gc (visual)  | Create/remove comment      |
| gcO          | Create comment line before |
| gco          | Create comment line after  |

</details>

<details>
<summary>Table Mode / Alignment</summary>

### Table Mode / Alignment

| Key Bindings | Description                                                                       |
|--------------|-----------------------------------------------------------------------------------|
| ga (visual)  | Aligns selection based on separator (comma, semi-colon, colon etc.)               |
| SPC t m      | Enables Table Mode. Do it in markdown file with some table and you will see magic |
| SPC t i C    | (Only when Table Mode Enabled) Insert column before                               |
| SPC t i c    | (Only when Table Mode Enabled) Insert column after                                |
| SPC t d c    | (Only when Table Mode Enabled) Delete column                                      |
| SPC t d r    | (Only when Table Mode Enabled) Delete row                                         |
| SPC t s      | (Only when Table Mode Enabled) Sort table alphabetically                          |

</details>

<details>
<summary>Other</summary>

### Other VERY useful bindings

| Key Bindings | Description                                                                                                                                                                               |
|--------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| <S - q>      | Smartly closes current buffer without breaking UI                                                                                                                                         |
| <C - a>      | It is not only increases number, but switches between true/false/const/let/function/arrow function/increment dates etc.                                                                   |
| <C - n>      | Finds next occurrence (like *) of word and puts multi-cursor there. Then you can go to Insert mode, Append, Change or Delete. [Read more](https://github.com/mg979/vim-visual-multi/wiki) |
| <C - o>      | Jumps to previous cursor in jumplist. I use it very often.                                                                                                                                |
| v <ENTER>    | Smartly selects next subjects of current treesitter context                                                                                                                               |
| s            | Standalone jump to any word with `folke/flash.nvim`                                                                                                                                       |
| ciq          | Change inside ANY quotes (`` or '' or "" etc.) with `mini.ai`                                                                                                                             |
| cib          | Change inside ANY brackets ({} or [] or () etc.) with `mini.ai`                                                                                                                           |
| za           | Toggle folds. By LSP and nvim-ufo they are automatically added to supported files in smart way.                                                                                           |
| zM           | Close all folds                                                                                                                                                                           |
| zR           | Open all folds                                                                                                                                                                            |
| zr           | Open all folds except imports/comments                                                                                                                                                    |
| gJ           | Smartly joins lines based on treesitter                                                                                                                                                   |
| gS           | Smartly splits lines based on treesitter. I do if VERY often when I want to put import element to new lines (e.g. import { A, B, C, D, E } from ...)                                      |
| < F12 >      | Opens/closes terminal                                                                                                                                                                     |
| ~            | Switch function arguments smartly                                                                                                                                                         |

</details>

Check out the which-key menu and [keymappings.lua](https://github.com/ecosse3/nvim/blob/master/lua/config/keymappings.lua) for most used maps. 


## Performance

Measured on M1.

Ecovim started in 91.13ms 

## Future Todo 

| Description                                                          | Progress                                                           |
|----------------------------------------------------------------------|--------------------------------------------------------------------|
| Support more LSPs (not only frontend? - already possible via Mason)  | ![50%](https://progress-bar.dev/50/?title=progres)                 |
| Better configuration of additional LSPs (already possible via Mason) | ![50%](https://progress-bar.dev/50/?title=planned)                 |
| Project Logo                                                         | ![Planned](https://progress-bar.dev/0/?title=planned&color=b8860b) |
| Auto resize for more consistent UI behavior                          | ![Planned](https://progress-bar.dev/0/?title=planned&color=b8860b) |
| Reload in-time support                                               | ![Planned](https://progress-bar.dev/0/?title=planned&color=b8860b) |


<details>
<summary>Done</summary>

| Description                                     | Progress                                                       |
|-------------------------------------------------|----------------------------------------------------------------|
| lazy.nvim instead of packer                     | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |
| Better support for null-ls and local formatting | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |
| Better support to project word refactor         | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |
| Support for nvim-dap debugger for React         | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |
| Support ESLint & Prettier in Native LSP         | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |
| Replace coc-explorer with nvim-tree.lua         | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |
| Replace coc.nvim with Native LSP                | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |
| Change fzf.nvim to telescope.nvim               | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |
| Update statusline to support LSP diagnostics    | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |
| Rewrite most config to lua                      | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |
| Support TailwindCSS with colors                 | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |
| Provide current screenshots                     | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |
| Create shell installer for Linux & MacOS        | ![100%](https://progress-bar.dev/100/?title=done&color=555555) |

</details>



================================================================
End of Codebase
================================================================
